[{"title":"2024字节青训营笔记-Golang依赖管理、测试与高质量编程","url":"/2024/11/12/2024%E5%AD%97%E8%8A%82%E9%9D%92%E8%AE%AD%E8%90%A5%E7%AC%94%E8%AE%B0-Golang%E4%BE%9D%E8%B5%96%E7%AE%A1%E7%90%86%E3%80%81%E6%B5%8B%E8%AF%95%E4%B8%8E%E9%AB%98%E8%B4%A8%E9%87%8F%E7%BC%96%E7%A8%8B/","content":"依赖管理Golang的依赖管理经历了path -&gt; vendor -&gt; mod三个阶段。很幸运在我开始学go的时候，已经有go mod了(虽然还是要手动设置module)\n为什么要演变呢？其实就是依赖的版本问题。\n\npath。早期的golang要求所有的源码必须放在$GOPATH/src下，拉取的第三方代码也要放在这下面。且当时没有版本的概念，很容易出现名称冲突、版本冲突的情况，非常混乱。\nvendor。vendor直接将第三方库拷贝了一份放在当前项目下，这就不需要将依赖来源设为本地所有项目的第三方库了，只需要查看当前项目的vendor文件夹内。但是这只是单纯的拷贝，没有复用一些公共库，对于外部依赖的变更与版本信息也不能很好的感知到，包升级存在无法评估的风险。\nmod。module模式允许项目放在任意位置了，同时给出了go.mod这种类似pom.xml、package.json的记录依赖和版本信息的文件。在文件中除了依赖名和版本号，还有如incompatible、replace、exclude等关键词来起到辅助管理的作用。使用起来也很简单。go mod init、go mod install、go mod tidy，轻松进行依赖管理和下载！\n\n除此之外，go mod也允许做项目内同依赖不同版本的兼容，在这种情况下会选取一个最低的兼容版本作为各项目共用的依赖。\n除了工具之外，go允许将依赖路径写为一个url，比如下面这样。使用go mod tidy也会拿到这个依赖的”链接”并下载。这里打引号是因为go没有真的这么做。\nimport (    &quot;github.com/Moonlight-Zhao/go-project-example/util&quot;    ...)\n\n如果直接通过url下载，第一是会增加各大代码托管平台的负载，往大了说已经有点在侵犯人家公司的利益了；第二是如果项目作者突然删除仓库，会导致这个依赖不能被正确访问到。go弄了一个proxy，其实就是对这些网站的代码做了不变的备份。开发者只会访问这个镜像网站，而且第三方依赖不会因为作者的行为而产生较大波动。\n\n测试单元测试作为一个后端，也要对自己的模块写单元测试。go提供了良好的工具go test,并且定义了规范，即文件的命名以及测试函数的命名。\n他也做了一个美化的输出，便于查看测试结果\n除此之外也可以加入参数，比如–cover可以查看覆盖率，众所周知覆盖率是衡量测试好坏的一个重要标准，所以这个也是很好用的一个东西。\nMock测试的一个基本要求就是满足幂等，即多次进行同一个测试，测试结果必须相同。这应该不难理解。\n但是有些被测试模块会依赖外部环境，比如用到了数据库、当前时间、随机数种子等。这就需要我们做一个虚拟环境，测试只会依赖这些我们手动搭建的不变的环境，而不会依赖那些在业务中不断变化的外部环境。\n视频中介绍了monkey这个库的用法，原理就是重写了函数定义，虽然单元测试中调用的是业务中涉及的函数，但这个函数已经被monkey替换内容了。\n\n之前有用过go-sqlmock进行数据库的mock，当时还没想过mock是为了幂等，只是以为要让测试不影响上线项目的数据源。看完视频豁然开朗。\n基准测试666，go还为benchmark提供了工具。一般来说，如果要进行简单的性能测试，直接记录开始时间和结束时间，让待测函数跑个几万次，然后拿duration做比较就行。但是专门的benchmark工具显然更加专业，\n如下图，直接在go test下再加一个参数就可以进行，会打印当前的环境信息、单次运行的cpu耗时。\n\n\n高质量编程这个视频真的干货满满。我想把每页PPT都贴在这，不过还是算了。这里做些总结\n\n保持简单和高可读。这里深有感悟，诸如大一时期学的c语言的骚操作，又或者花里胡哨的lambda、新语法等，表面上在炫技，实际上在团队项目中是纯纯的毒瘤，只能自我感动，别人看不懂搜API的时候直呼MMP。\n\n函数加注释。这个是众所周知的了，一堆程序语法哪比得上贴心的自然语言说明书呢？但是也有个要求。\n\n公共方法必须注释。这个是必然的，公共方法要让其他模块调的，不管是跳过来阅读还是让IDE直接显示在函数定义的弹窗上，都能让开发者快速了解函数内容。\n有时候注释不用写。注释虽好，写废话也不行。如果一个函数名称已经足够表明内容，写注释和读注释只会waste time，搞了个寂寞。\n注释要解释代码做了什么、怎么做的、为什么要这么做以及在哪种情况下会产生哪种特定输出或者异常。\n\n\n记得将代码格式化。虽然golang对一些格式有限制，但是在空格、缩进这些还是不会太多干涉。对于一个团队项目，一个人的特立独行的格式可能会脏了大家的眼睛。所以使用go-fmt工具格式化代码再上传，是个好习惯。\n\n命名风格要随机应变。下面是一些例子：\n\n对于会到处使用的一个变量，名称就要尽量具体\n如果是一个for循环的for i，这个i就没必要写成index\n比如一个记录结束时间的变量，我们应该取为end_time而不是t\n如果一个包名为time，那么函数应该用time.Now()而不是time.NowTime()包名有统一的标准，即使用单数、不要与std重名等。\n\n\n流程控制。这里其实我有点异议，对于这块其实业界也是有争议的，一边说的是只留一个统一的返回位置，另一边说的是特殊情况尽早return。只能说仁者见仁的，这两种我比较倾向于第二种，可以少一些考虑if…else的心智负担，分支嵌套也会少一点，代码看起来会舒服一些，虽然找return确实需要眼睛擦亮一点:)\n\n\n总结就是注释应该提供代码未标注的上下文信息。\n最后，很喜欢视频里的两句话：代码是最好的注释以及好的代码有很多注释，不好的代码需要很多的注释\n"},{"title":"2024字节青训营笔记-Golang性能优化与GC","url":"/2024/11/13/2024%E5%AD%97%E8%8A%82%E9%9D%92%E8%AE%AD%E8%90%A5%E7%AC%94%E8%AE%B0-Golang%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E4%B8%8EGC/","content":"性能优化原则\n性能用实际数据衡量(benchmark、pprof)，而不是理论估测。性能数据驱动、指导优化。\n定位最大瓶颈而不是细枝末节。参考木桶效应。\n不要过早优化。在实际业务中代码是不断迭代的，在前期就进行优化，开发成员需要理解并兼容这个优化，会影响项目在整个前中后期的开发进度。更别提万一需求变动大，这个优化不能兼容，反而需要被删掉的情况了。\n不要过度优化。越高级的优化越容易出问题，代码反而不可靠了。\n性能优化也要尽量保证代码的清晰可读。\n\n分析工具go-pprof-practice：仓库地址\n这个项目提前埋入了一些炸弹代码，产生可观测的性能问题。会使用超过一个G的内存。\npprof是标准库中的一员，直接导入非常方便。他的使用方法就是开一个协程启动一个端口服务，可以在浏览器通过这个端口进入操作界面。注意对于&quot;net/http/pprof&quot;的import是用的_,即不会显式主动使用它，它会与net/http合作，自动注册到http的server上的。\nimport(    ...    &quot;net/http&quot;    _ &quot;net/http/pprof&quot;)func main()&#123;    // 启动pprof线程    go func() &#123;        if err := http.ListenAndServe(&quot;:6060&quot;, nil); err != nil &#123;            log.Fatal(err)        &#125;        os.Exit(0)    &#125;()    // 正常待测程序    ...&#125;\n\n具体的使用，参考\n\ngolang pprof 实战 | Wolfogre’s Blog\nGo性能分析工具 | Farmer\n\n在代码层面做性能优化\n如果知道数组最大需要多大，建议在初始化时直接分配这么多内存，即make(数组, 0, maxSize)。因为底层其实还是一个数组，然后保存了当前的长度与当前的最大容量。虽然append会动态扩容，但其实在大小超过当前最大容量时，是会申请一个更大容量的新数组然后将原来的数据拷过去，再将当前数据再append进这个新数组。(相信学过java集合源码的同学都懂这个)。所以预先设定容量，就可以避免这种新数组内存的申请与数据拷贝。map同理。\ntype slice struct    array unsafe.Pointer    len int    cap int&#125;\n\n\n\n对于在大数组中选一段切片，建议使用copy而不是re-slice。因为re-slice会给这个大数组添加一个引用，在感观上会延长这个大数组的生命周期。由于大数组会占用大内存，大数组的存活时间过长会影响我们的程序性能。\n\n\n// badfunc GetLastByslice(origin []int)[]int &#123;    return origin[len(origin)-2:]&#125;// goodfunc GetLastByCopy(origin []int)[]int &#123;    result:=make([]int,2)    // 拷贝这块数据为一个新数组，而不是增加一个原数组的引用    copy(result,origin[len(origin)-2:]    return result&#125;\n\n\n在频繁的字符串拼接上，善用strings.Builder和bytes.Buffer。因为字符串是不可变量，用+直接拼接会分配一个大小为两个数组大小之和的新内存，然后将两个str依次拷进去。如果多次拼接会分配多次，性能较差。Builder和Buffer底层都是[]byte，而且有扩容策略(与前面讲的数组&amp;切片一样)，所以不会每次都重新申请内存，只会到达最大容量再重新申请，性能会好一些。\n关于Buffer和Builder的区别，Buffer会申请一个新内存，再将自己的[]byte转为string再返回。而Builder直接返回[]byte转成的string，可以理解为用的还是同一个地址的数据。因此Builder性能会好一点，但是在某些特定场景应该不得不用Buffer。\n//To build strings more efficiently,see the strings.Builder type.\nfunc (b *Buffer)String()string\n    if b ==nil\n        //Special case,useful in debugging.\n        return &quot;&lt;nil&gt;&quot;\n    &#125;\n    return string(b.buf[b.off:])\n&#125;\n\n// String returns the accumulated string.\nfunc (b *Builder)String()string&#123;\n    return *(*string)(unsafe.Pointer(&amp;b.buf))\n&#125;\n\n进一步的，通过builder.Grow(size)和buffer.Grow(size)，我们可以设定那个底层[]byte的最大容量，传入所有字符串的长度之和，可以进一步减少内存申请。\n\n空结构体。这个只算一个常用trick吧，因为空struct不占内存，可以用map[key_type]struct&#123;&#125;作为set来使用。视频里说他是一个优化手段是相较于拿bool当value_type而言，这种在value位置还是多占了一个byte。\n\n能用atomic就不要用lock。锁肯定是越小越好;然后atomic通过硬件实现，而锁是os实现。相比之下atomic性能好些。\n\n\n性能调优案例\nGC栈内存要求数据大小是不变的，因此对于复杂对象，我们需要将他们本体在堆内存上申请内存，并将指针放在栈内存上。这就是动态分配内存。\n在c和cpp中，堆内存需要程序员自行管理(这里不考虑RAII)，对于大型项目，难免有疏漏，导致内存泄漏(忘记回收内存)、多次回收、悬空指针问题。为了减少程序员的心智负担，让程序员专注业务逻辑(以及减少企业损失)，就有了垃圾回收(GC)的概念。\n内存管理的任务：\n\n分配内存\n跟踪存活对象\n回收死亡对象\n\nGC的一些名词：\n\nMutator：就是执行业务逻辑的程序使用的线程\nCollector：GC线程\nSerial GC：串行，其实就是只有一个GC线程\nParallel GC：多个并行的GC线程\nConcurrent GC：Mutator和GC线程们同时执行\n\nConcurrent GC单独提出来是因为它比较高级，因为运行中的业务程序中的对象们是在动态变化的，比起将动态的它们一一跟踪，让它们静止一秒然后GC扫一遍做处理再让它们动，后者明显简单很多，当然性能还是差一些。\n下图是Concurrent GC的挑战，如果在GC前，两个父子对象已经被标记为死亡但还未被回收，在GC启动后刚准备回收时，第三个对象引用了这个父对象，那么父对象就不该被回收，同时子对象引用了父对象，也不该被回收。GC就要应对这种即时的”死而复生”的情况，还要将依赖链中的所有对象重新标记为存活。\n\n下图是对GC算法的评估标准。\n\nJVM(也是golang)的GC策略下图是对垃圾回收策略的解释。垃圾回收需要标记根对象、通过传递闭包标记存活对象，其他的不可达对象便是需要回收的。注意这可以理解为一种树状的搜索算法，对象只会是“可达”和“不可达”。\n清理不可达对象的策略有三种\n\n将内存分为两块，一块就是我们正常用的，另一块专门用于放存活对象。我们将存活对象移出正常使用的内存，那么剩下的内存(包括不可达对象的内存)全都可以用于接下来的申请。优点是分配内存比较方便，缺点是内存拷贝开销大，而且需要专门开辟一块空间放存活对象。\n\n用一个free-list链表管理空闲内存块，回收就是把这个内存块插入链表中，而申请内存只需要在这个链表上找就行。优点是不需要拷贝，缺点是申请内存需要遍历链表，比较麻烦。\n\n定期将存活对象移动到内存一侧(可以类比清除内存碎片)，之后的申请直接在这块内存之后申请就行。这个主要是对标第一种，优点是不需要隔出两个内存空间，而且分配内存容易，缺点是需要将所有的都移动到内存一侧，开销大。\n\n\n\n每种策略都有不同的优缺点。众所周知软件工程没有银弹，图片里也说了，会根据对象的特点做不同的标记和清理方式。\n对于对象的区分，提出了“年龄”这个说法。对象的年龄与它们经过GC的次数有关，就是上面那三个策略，每次执行就会让存活对象年龄+1。\n由于我们无法预知对象什么时候死亡，我们只能根据当前的年龄对他们进行判断。对于年龄大的老年代，经历多次GC仍然存活，并可能将继续长期存活，不适合用于开销大的内存拷贝，我们考虑用mark-sweep，只需要基于链表标记就行。\n而年轻代对象，我们假定认为他们不会活太久，并且太老的一批已经是老年代了，我们认为现在的年轻代数量是少的，因此可以接受用copying管理。\n通过对不同类型的对象进行不同策略的管理，能实现时空性能开销的折中。\n\n引用计数这个和JVM GC策略在一个层级，说明他也是一种GC策略，但因为缺点较严重不被Java使用。\n策略就是为每个对象维护一个计数器，如果有其他对象引用了它，那计数器+1，如果计数器为0说明可以删除它了。它与JVM GC策略的区别就是在标记存活死亡对象上，它是”计数器&#x3D;&#x3D;0”和”计数器&gt;0”两种，而jvm的是”是否可达”两种。\n看起来思想差不多，细节却天差地别。引用计数将计数操作与程序运行融为一体，似乎是更轻量了，但问题更多了：\n\n对比JVM的树上搜索，引用计数无法找到与根节点分离的环状孤岛，而环状孤岛的每个又正好满足引用计数的存活标准：计数器&gt;0。\n\n\n对于计数器，其实是个AtomicInt，性能开销也不小。\n\n\n第一个缺点可以说是一个致命的缺点，导致它并没有被更多采用。\n在SDK层面主动做性能优化这里对应视频中的字节自研的GC。golang sdk的gc提前将内存分为特定大小的小块用于存储对象，并且有个多级缓存，将可以分配的内存放到离SDK近的位置，分配内存后逐级更新。\n字节团队通过发现上线项目的内存分配特点：\n\n对象分配是高频的，GB级别分配&#x2F;s\n小对象占比高\n分配路径长(就是这个多级缓存)\n\n然后提出的新方案Balanced GC是(我大致理解为)：每个G作为一个可分配块，直接在上面用双指针移动来做内存分配，并且为了防止某个G上只有一个对象却导致这个G一直不释放，还用copying将这个对象移出去。\n只是视频里没提到回收内存后这个G上的指针是怎么个情况，就说了个双指针，我感觉也是个free-list?\n编译器为我们做的性能优化在优化这块主要还是编译器后端部分，对于IP做优化。\n编译器将代码文本树化之后，可以获得cg(调用图)、cfg(控制流图)、数据流图等。\n我大概理解“过程”是指在一个函数内执行。如果只在一个函数内，只要看数据流就行了，跨越多个函数还需要结合上面导出的多个图，结合函数调用情况、参数传递情况等做分析，是个更复杂的问题。\n\n因此，编译器有个inline函数内联，这个在cpp代码中常常显式出现，其实就是把函数定义直接拼到调用者这边，比如下面这样。\nfunc sum(a, b int) int &#123;    return a + b&#125;func main() &#123;    // 原来的程序    result := sum(3, 4)    // 内联后变为     result := &#123; 3 + 4 &#125;&#125;\n\ninline就可以让过程间变成过程内，简化问题，且更方便优化。但一个函数重复地在多处展开，其实也会增加最后编译产出的大小和编译时间。所以编译器也要根据被内联函数的大小，选择性的进行内联。\n除此之外，逃逸分析也是个很重要的分析，即分析一个对象的生命周期是否被扩展，更像人话一点就是一个函数内的指针有没有赋给全局变量、有没有传到另一个函数内、有没有发到另一个goroutine里，这就是逃逸了。\n逃逸也会增加分析和优化的复杂度，而刚刚的inline其实也会帮助对逃逸的分析和优化。\n对此，视频也提到了字节自研的beast mode，其针对go编译器对于inline的策略过于保守的问题，通过调整策略增加了内联的程度，有利于逃逸分析，也为其他优化提供了更好的机会。同时还对不会逃逸的对象，改为在栈上分配内存，在不破坏程序安全的情况下，基于栈上快速的分配回收速度以及减少GC的负担，提高了程序性能。\n"},{"title":"2024字节青训营笔记-消息队列与定时任务","url":"/2024/11/24/2024%E5%AD%97%E8%8A%82%E9%9D%92%E8%AE%AD%E8%90%A5%E7%AC%94%E8%AE%B0-%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E4%B8%8E%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/","content":"概览消息队列是一个独立于业务项目的中间件容器，支持存储生产者的消息和允许消费者拉取消息。支持高吞吐、高并发、高可用。\n消息队列作用：\n\n解耦：将不同的服务通过消息队列关联，将各服务解耦。单个服务的崩溃不会影响整个系统的正常运行。\n削峰：将突增的请求通过消息队列缓存，保证业务服务的可用。\n异步：通过对耗时任务的延时执行和立即返回临时响应结果如”任务已提交”，保证响应速度，并实现数据的最终一致性。\n日志保存：将耗时的日志操作交给消息队列异步处理。\n\n主要项目：Kafka、RocketMQ、Pulsar、BMQ。其中RocketMQ更适用于实时业务场景(电商秒杀)，Kafka适用于高吞吐场景(大数据处理)。\nKafkaProducer和Consumer为生产消息和拉取消息的业务服务。Broker为存放消息的服务。一个Cluster中可以有多个Broker。\n整个消息队列集群服务(多个Broker)，有多个Topic(可以存放多种消息，只是一个逻辑上的分类)。一个Topic中实际存放消息是在Partition中，每个Topic可以有多个Partition放在不同的Broker上，以实现对一个Topic读写时的分布式处理。为了保证数据可靠，每个Partition可以有多个Replica(数据备份)，这些Replica也可以在不同的Broker上。\n对于Consumer可以设立Consumer Group，指定这组Consumer都是消费某个Topic的数据，可以结合负载均衡。注意Kafka不支持Producer Group。\n\n即：对于生产者发送的一组同一个Topic的消息，消息会被保存在不同的Broker上的属于这个Topic的某个Partition中，并且会在某个Broker上有一个Replica存了这个消息。每个Partition单独生成维护offset和消息的序号(在该partition内唯一且严格递增)，而不是用生产者发送时的序号。所以虽然消息是顺序发送，但是如果某几个消息分在同一个Partition中还可以保持相对顺序，不同Partition中就无法查看相对顺序了。\n\n除此之外，整个集群有个Broker兼具Controller的角色，负责管理Broker、Partition和Replica的状态和关系。每个集群同时只能有一个Controller。\n对于每个Partition中的多个Replica，分为主从，读写时只向Leader Replica，而Follwer是不断同步Leader的数据，以便在Follwer所在的节点(Replica可以分布在不同Broker、不同机器上)故障时，替代Leader继续承接业务。当一个Partition的Leader故障时，Controller就会发起选举，从该Partition中的所有Followr中选举出一个新的Leader。\n在Cluster之上还有个ZK进行元数据管理。\n\n消息队列可以做的优化\n消息数量多时，Producer将多条消息批量发送，减少网络IO次数。同时为了防止这批消息太大而带宽不够用，进行数据压缩。\nBroker保存数据使用顺序写减少磁盘寻道时间。\n由于顺序写保证日志文件有序，Broker使用二分查找目标文件。\nBroker使用零拷贝减少内存拷贝。\n动态分配每个consumer处理哪个partition。便于进行结点的调整以及消息处理的负载均衡。\n\n消息队列会存在的问题\nreplica中新增一个follower后，该replica需要花很长时间、很大的带宽追赶leader的进度。\n\npartition的分配依赖手动分配，像下图的情况本应该将Partition3放在右边的Broker中，为Partition1预留足够空间。\n\n\n\nkafka存在的问题\n\nRocketMQ相比较Kafka有Tag、Producer Group、事务消息。\n\n命名区别。kafka的Partition变成了ConsumerQueue;Controller变为Nameserver。\nTag。可以在一个Partition中为每个msg打tag，比如一个order-topic，里面可能有create、pay、cancel多种tag，可以指定某个consumer只处理这个topic中的指定tag的消息。\nProducer Group。不同的Producer可能会交替发送，导致到同一个topic上的消息不能维持相对顺序。将一组Producer分为一组，可以保证他们发送的消息能保证相对顺序，便于后续的事务消息。\n在数据备份中，Kafka是每个Partition内的多个Replica分主从，RocketMQ是在机器(Broker)上分主从。\n\n\n\n事务消息。保证库存-1和订单生成是原子的，不能扣了库存但是不生成订单。本质上是两阶段提交。先告诉Broker我要提交了(让他等着接下来的Confirm消息)，然后在Producer这边库存-1(本地事务)，再通知Broker可以发送这个消息给consumer了。异常情况就是Broker意外没收到Producer的通知，就会主动通知Producer重发下本地事务处理结果。这样就保证了本地事务和消息处理是在一个分布式事务中。\n延迟发送。RocketMQ有一个专门的ScheduleQueue存延时消息，并用一个线程监听哪些任务到时间了。到时间了的任务就会把他们重新写一个log，然后作为正常消息放入queue中等待消费。\n消费失败处理。对于消费失败的数据，会放到一个RetryQueue中，允许Consumer再次拉取这条消息进行重新消费。如果超过一定重试次数，就会把这条消息放入死信队列中，交由平台管理员手动检查和处理。\n\n分布式定时任务分布式系统中，对于整体的定时任务，需要一个统一的定时任务管理平台。Quartz只能实现单机的任务调度。\n\n定时任务的类别：\n\n延时：一段时间后触发(五分钟后触发)。\n定时：特定时间触发(每天零点、每小时的第五分钟)。\n周期：每隔一段时间后触发。(从现在开始，每隔30分钟触发一次)\n\n\n执行方式。\n\n单机：随机指定一台机器处理整个任务\n广播：每个机器各自都进行一次这个任务\nMap：将任务拆分成多段让每个机器执行一部分\nMR：拆分成多段各自处理之后还要整合成一份数据。\n\n\n\n\n实现：\n\n\n\n\n下面的这个时间轮挺有意思，这里讲了方案的演进，即一开始是遍历链表，然后改成查询较快的小顶堆。考虑到每个任务都对应60秒中的某格，到达该秒时处理相关的任务。\n比如一个任务要在每天的02:01:05执行，任务先放在时轮的第二格，每过一个小时时轮走一格，当到达2时将该任务放在分轮的第一格，依次类推，直到秒轮走到他上面之后，执行任务。\n\n因为无法上手操作感受，大概截个图，以后遇到相关情况再回来看看以及补充。\n\n\n\n\n\n\n定时任务业务实践\n"},{"title":"2024字节青训营笔记-微服务与企业级后端架构","url":"/2024/11/26/2024%E5%AD%97%E8%8A%82%E9%9D%92%E8%AE%AD%E8%90%A5%E7%AC%94%E8%AE%B0-%E5%BE%AE%E6%9C%8D%E5%8A%A1%E4%B8%8E%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84/","content":"系统架构演变概述系统架构的演变历史，可以认为是从单体架构-&gt;垂直应用架构-&gt;分布式架构-&gt;SOA架构-&gt;微服务架构，整体看来就是服务的拆分粒度越来越细粒度了，从按业务拆分一直到服务拆分，这与信息技术的广泛使用、互联网的发展紧密相关，因为拆分就是为了方便分工提高开发效率以及故障隔离。当然也带来了更多挑战，如服务治理、运维的难度大大提高、对各服务的观测、安全保证等，在业务开发之外也需要更多的工作去保证一个微服务系统的可靠运行。(当然新技术的发展也养活了一批开拓技术的程序员:))\n服务间通信对于单体应用，业务模块的相互调用就是函数调用。而在微服务中，是RPC网络请求。\n而为了知道要调用哪个服务，以及哪些服务可以调用，需要服务注册与发现。如果用硬编码，则不能做到运行时动态修改。使用DNS，则有因缓存导致的延时问题，且不支持负载均衡、只能做到修改IP而不能修改端口，还不支持心跳探活等高级特性。\n所以就要引入一个统一的服务注册中心中间件，负责管理服务集群的服务名到服务实例的映射。调用方从注册中心中获得可用的被调用方，然后才去调用。启停服务时均会与注册中心交互保证即时更新集群状态。\n微服务项目的流量特征系统整体通过一个网关入口对外提供服务，内部服务通过RPC相互调用，链路呈网状。\n服务发布即更新一个服务的源码并再次运行，起到升级作用的过程。\n上线项目对高可用性的要求对于服务发布提出了挑战。因为服务发布不是瞬间完成的，是需要一定时间，而且更新中的服务肯定是下线的。\n在单体项目中，服务的更新肯定会导致系统的不可用。即使有两个相同服务，也会在更新第一个的过程中因为将流量全部传到第二个服务，导致服务抖动。更有甚者，在服务更新后发现有bug，需要马上回滚，带来更复杂的问题。\n常用解决方案：\n\n蓝绿部署，即再申请一倍的资源再开一个同样的实例对外照常提供服务，然后把要升级的实例下线升级，升级好之后直接将流量从刚刚申请的实例上切换过来。简单、稳定，但需要两倍资源，在切换的过程中其实也容易出现抖动问题。\n\n灰度发布(金丝雀发布)。金丝雀就是指矿工下矿前放金丝雀探查一下是否存在有毒气体。同理，服务的更新也可以存在“探”的过程。这个过程会同时让升级后实例和旧实例同时对外提供服务，在显示升级后实例可以正常提供服务后，继续将其他旧实例逐个替换。但是不断切换流量需要比较复杂的管理机制，而且回滚也比较复杂。\n\n\n流量治理\n根据现实地区分配流量\n将少量流量分给测试服务已实现线上测试\n对于处理能力较差的老机器，分配较少的流量\n对于特殊用户的请求单独测试\n\n负载均衡\n稳定性治理现实世界要比程序复杂许多，总会导致服务出现问题。\n\n限流。为了防止服务器被突增的海量请求打挂掉，将处理能力之外的请求直接拒绝。在被请求方用了一个请求计数器。\n熔断。在请求方加了一个熔断器，如果对同一个被请求实例重试的多次请求都失败，则熔断器会关闭，下一次还请求这个实例时，因为熔断器已关闭，所以直接返回请求失败。\n过载保护。限流是根据请求计数，过载保护则是被请求实例监听本机情况。如果被请求实例存在如CPU过载，则他自身也会开启一个机制，拒绝掉一部分请求，尽量避免本机被打挂。在被请求方用了一个负载监听器。\n降级。在被请求方加一个请求筛选器，只对重要的请求者提供服务，其他的则直接返回拒绝处理。\n\n字节实践重试可以避免偶发的错误。\n\n\n但是也有难点。因为重试就是将同一个请求在timeout后发送多次。\n\n幂等性。这就要求接口满足幂等性。如果一个请求会让balance&#x3D;balance-10，那么三次重试就可能会扣除三次余额。\n重试风暴。在一条链路上的重试次数会被指数级放大。应对策略是为整条链路设置一个最大的重试次数，或者重试次数不超过请求次数的几分之几。或者，如果中间链路都没问题，只是最后一个有问题，那么这个错误不应该被传播回去，而是直接告知前一个节点，出错了，但不是你的问题，不要让前面的节点重试了。\n\n\n"},{"title":"6.5840-lab1-mr记录","url":"/2023/02/19/6-5840-mr-lab1%E8%AE%B0%E5%BD%95/","content":"6.5840分布式(前6.824)—Lab1 MapReduce 学习记录\nMapReduce其次论文讨论了大量减少网络通信的优化技巧，因为带宽是瓶颈。\nLab任务\n实现一个分布式mr，其中包括一个coordinate和多个worker，每个worker通过RPC与coordinate通信\n在mr/coordinator.go, mr/worker.go, mr/rpc.go补充内容\nworker负责从coordinator中读入内容，然后进行加工写入worker本地\ncoordinator负责发送任务给worker，同时如果coordinator发现一个worker无法在规定时间(10s)内完成任务，就将任务分配给其他worker\n给出了main/mrcoordinator.go 和 main/mrworker.go两个样例，不要修改他们。\n运行go build -buildmode=plugin ../mrapps/wc.go来将这个go文件打包成插件wc.so供Map使用。然后运行go run mrcoordinator.go pg-*.txt建立并启动coordinator，并将要处理的文本文件名传给coordinator。然后运行go run mrworker.go wc.so，读取之前生成的插件中含有的map和reduce函数，将其传给worker，让他们调用。\n然后给了一个测试方法，即bash  ~/6.5840/src/main/test-mr.sh\n\n\nlab的一些要求\nmap将输入文件分成多组中间文件，供多个reduce使用，同时要传递nReduce这个变量来创建coordinator\nreduce的输出文件名格式为mr-out-X,其中X为该reduce任务的编号\n每个reduce文件里面的每一行，格式为&quot;%v %v&quot; 导出的一行，分别对应key、value，方式为&#96;fmt.Fprintf(ofile, “%v %v\\n”, intermediate[i].Key, output)\nworker的map要输出到当前目录，以方便reduce读取\n对于mr/coordinator.go中的Done方法要返回true，才表示这次mapreduce结束了，mrcoordinator.go会终止\nmapreduce结束，coordinator会终止，worker也要终止，有很多种设计方法，包括当worker联系不到coordinator时就自行终止。\n\nLab的一些提示\n建议先修改mr/worker.go&#39;的Worker()来实现worker通过rpc从coordinator请求任务文件，然后修改coordinator的代码来返回给worker任务对应的文件名，然后再实现worker读取文件内容并调用map的操作\n中间文件的命名可以是mr-X-Y，其中X是Map任务的编号，Y是Reduce任务的编号，所以每个mapper都会产生reducer个文件的中间文件\n虽然reduce的输出是一行一行的kv，但是map要给reduce的输出不一定是这样，可以采用读写json的方式来让map的输出有效地被reduce读入  //写  enc := json.NewEncoder(file)  for _, kv := ... &#123;    err := enc.Encode(&amp;kv)\t//读  dec := json.NewDecoder(file)  for &#123;    var kv KeyValue    if err := dec.Decode(&amp;kv); err != nil &#123;      break    &#125;    kva = append(kva, kv)  &#125;\nworker可以使用ihash函数来选择map的输出让哪个reduce接收\nmrsequential.go里的读入、写入、排序操作可以自行借用\ncoordinator要注意并发问题\n使用go run -race. test-mr.sh来检测并发问题\nreducer必须在所有的mapper结束之后才能开始操作，所以必须请求coordinator，对于这类轮询可以采用nio的模式，用一个handler loop来接收请求，灵活使用time.Sleep() 或sync.Cond,一把大锁保平安\ncoordinator不能识别worker是正常、崩掉还是处理过慢，这次lab里允许worker通过每10s的发送心跳检测来告知coordinator自己没挂，可以多加一个字段以合并请求操作和心跳操作，比如isHeart的布尔类型;或者coordinator对每一个分配出去的任务设一个定时器，时间到没做完就算worker出问题了\nGo的rpc发送结构体时，只能发送字段名开头大写的字段，子结构体也一样\nrpc调用call返回信息时，reply对象所有的字段都是默认值即可，不要有非默认的赋值，不然可能会出问题，就像下面这样，空构造即可  reply := SomeType&#123;&#125;call(..., &amp;reply)\n一些测试的东西，懒得翻译了\n\n完成过程配置环境\nGo（参考我写的deepin搭建go开发环境（git、go、neovim、NvChad、Nerd Font），只要看go部分就行了）deepin和ubuntu都是用apt注意我的go版本是1.20.4，所以部分代码可能不能在较低版本的Go上编译成功\nGoland（因为我vsc总是报权限不足，nvim也用的繁琐，果然还得是正宗IDE靠谱）链接：Jetbrains全家桶破解文件\n配一下Goland运行程序的方式 参考了下别人配的Goland教程，可以减少很多的测试时间，而且也是第一次学着搭配命令行参数配置运行程序   go build -buildmode=plugin ../mrapps/wc.gorm -f mr-out*rm -f mr-*.json\n\n  注意Working directory很关键，因为很多程序是基于相对路径来的，你设置错运行目录了，他可能就找不到其他文件了    虽然课程作业里面  用命令行可以以pg-*.txt作为入参，但是Goland不惯着你，只能老老实实把每个参数敲上去  不知道为什么有的博主在Go tool arguments那里写了-i，我的go版本是1.20.4，好像没这个参数了\n  pg-being_ernest.txt pg-dorian_gray.txt pg-frankenstein.txt pg-grimm.txt pg-huckleberry_finn.txt pg-metamorphosis.txt pg-sherlock_holmes.txt pg-tom_sawyer.txt\n  同时注意这个Before launch这里，就可以执行那个删除之前生成的文件和编译插件的作用    \n  下面这个是test的\n  \n  注意打开下面这个可以开启竞态检查\n  \n具体实现步骤\n搞清楚哪些代码是我们需要的，哪些是要改和补充的。实际上我们只需要看main/mrcoordinator.go、main/mrsequential.go、main/mrworker.go，好了上面这三个相当于启动类，mrsequential是一个没有用rpc的单机mr例子，可以给我们参考和代码借鉴。然后就是mr/coordinate.go、mr/rpc.go、mr/worker.go，这三个才是我们真正要大量写代码的地方。当然可以自己加一些go文件，比如我加了一个common.go写了一些枚举状态常量，反正只要通过测试就好，然后测试脚本是main/test-mr.sh\n定义好一些状态枚举值这个根据具体实现来吧，而且其实也不急，写到后面自然会加上的，主要就是当前是Map还是Reduce阶段的状态枚举、任务是哪种类型的状态枚举\n知道怎么使用RPC，他那有例子，还挺方便的，传一个参数对象的引用和一个返回值对象的引用\n知道要把初始传入coordinator的所有文件各自转成Map任务，是的他们每个文件就是一个Map任务。\n知道封装Task，反正ID和文件名和Type是需要的。\n知道对于这种发放任务的场景，要支持并发，又类似队列一个一个发放，这就可以联想到Go的chan，待发送的任务都保存在chan里面，而且发放任务的方法里最好加个锁保险\n知道worker根据任务类型，用switch进行不同的操作。注意因为要等Map全搞完才能搞Reduce，所以需要多一个Wait状态，即worker空闲，但也要减少它的询问次数，即这种情况下Sleep。\n要知道Map就是分词，然后要把每个词根据key的hash值 % nReduce归类，hash值由ihash函数得来，别忘了一开始就传入的nReduce。要会借鉴mrsequential.go和课程的提示，他给了将这些kv值转成json格式的代码。注意map这边只需要将输出写入本地，Reduce那边是根据文件名的格式(其实可以正则？)获取到这些输出文件的\nReduce就是对这一系列reduceID是这个Worker的文件进行处理，把kv全部拿出来，排序，再用他给出的代码(双指针统计相同key的数目)，然后再按他的要求写入最终的结果文件\n注意！每个reduce各自有个输出就行了，不需要最后再Reduce成一个\n再补充一下，理解一下Coordinator是一个公司高管，Worker是召之即来、挥之即去的短工，所以这些ID啊、阶段啊、还没完成的Map或Reduce任务数啊，都是由Coordinator掌管，其他人所谓的MapperID、ReducerID，都是Coordinator临时赋给他们的，不是他们天生固定的。\n注意Worker处理完后还要再发rpc告知coordinator，他已经做完了，Coordinator算着这个阶段还差多少任务没干，干完了就前往下一阶段，注意Reduce阶段的开头，coordinator要把所有的mapper生成的文件转为Reduce阶段的任务。\n基本做完上述就能只剩最后一个测试trace不通过了，他会随机关掉Worker，看coordinator能不能继续分配任务并最终完成这次MR。有人是worker发心跳给coordinator来证明自己活着。我是对每个发出的任务监控，如果超出10秒钟（作业里讲了10秒）就认定这个worker有问题，然后把这个任务再放到待发放队列里，让有能力的worker来拉取，反正ReduceID不变，即便那个原来的Worker在断网情况下正常完成任务，这两个worker的结果也顶多相互覆盖，结果还是一样的。我的监控机制是把发出的任务再换个队列存，记录各自的发放时间，然后每秒去检查，如果当前时间-发放时间&gt;10，说明有问题，就将它再放入chan中，但这么写就还要改好几个地方，别忘了，比如发放时要再存一次，做完之后要删掉存的这一份。\n一些小细节就不说了，我也忘了，比如对终止时的处理啥的\n\n源码如下（已通过race，作为一个Go新手敲的，很多地方的使用不是很优雅）mr/common.go  状态枚举\npackage mrconst (\tMapTask    = iota\tReduceTask = iota\tWaitTask   = iota\tExitTask   = iota)const (\tMapPhase    = iota\tReducePhase = iota\tEndPhase    = iota)\nmr/rpc.go\npackage mrimport (\t&quot;os&quot;\t&quot;strconv&quot;)type Task struct &#123;\tID          int\tBelongPhase int\tFileNames   []string&#125;func MakeTask(ID int, ty int, fileNames []string) *Task &#123;\ttask := Task&#123;\t\tID,\t\tty,\t\tfileNames,\t&#125;\treturn &amp;task&#125;type CallArgs struct &#123;\tBelongPhase int\tTaskID      int&#125;type CallReply struct &#123;\tTask       *Task\tTaskType   int\tReducerNum int&#125;func coordinatorSock() string &#123;\ts := &quot;/var/tmp/5840-mr-&quot;\ts += strconv.Itoa(os.Getuid())\treturn s&#125;\nmr/coordinator.go\npackage mrimport (\t&quot;fmt&quot;\t&quot;log&quot;\t&quot;net&quot;\t&quot;net/http&quot;\t&quot;net/rpc&quot;\t&quot;os&quot;\t&quot;strconv&quot;\t&quot;strings&quot;\t&quot;sync&quot;\t&quot;time&quot;)type Coordinator struct &#123;\t// Your definitions here.\tTaskChan          chan *Task\tCurPhase          int\tReducerNum        int\tmu                *sync.Mutex\tMapTaskNumTODO    int\tReduceTaskNumTODO int\tTask2Check        map[int]*CheckItem\tcheckTimer        *time.Ticker&#125;type CheckItem struct &#123;\ttask      *Task\tstartTime time.Time&#125;// Your code here -- RPC handlers for the worker to call.// 根据当前阶段分发任务func (c *Coordinator) Assign(args *CallArgs, reply *CallReply) error &#123;\t//一把大锁防止竞争\tc.mu.Lock()\tdefer c.mu.Unlock()\tswitch c.CurPhase &#123;\tcase MapPhase:\t\tif len(c.TaskChan) &gt; 0 &#123;\t\t\treply.ReducerNum = c.ReducerNum\t\t\treply.Task = &lt;-c.TaskChan\t\t\tci := CheckItem&#123;reply.Task, time.Now()&#125;\t\t\tc.Task2Check[reply.Task.ID] = &amp;ci\t\t\treply.TaskType = MapTask\t\t&#125; else &#123;\t\t\treply.TaskType = WaitTask\t\t&#125;\tcase ReducePhase:\t\tif len(c.TaskChan) &gt; 0 &#123;\t\t\treply.Task = &lt;-c.TaskChan\t\t\tci := CheckItem&#123;reply.Task, time.Now()&#125;\t\t\tc.Task2Check[reply.Task.ID] = &amp;ci\t\t\treply.TaskType = ReduceTask\t\t&#125; else &#123;\t\t\treply.TaskType = WaitTask\t\t&#125;\tcase EndPhase:\t\treply.TaskType = ExitTask\t&#125;\treturn nil&#125;func (c *Coordinator) check() &#123;\tgo func() &#123;\t\tfor &#123;\t\t\tselect &#123;\t\t\tcase &lt;-c.checkTimer.C:\t\t\t\tvar expireTaskIDs []int\t\t\t\tvar expireTasks []*Task\t\t\t\tnow := time.Now()\t\t\t\tc.mu.Lock()\t\t\t\tfor taskID, taskItem := range c.Task2Check &#123;\t\t\t\t\t//fmt.Printf(&quot;%f\\n&quot;, now.Sub(taskItem.startTime).Seconds())\t\t\t\t\tif now.Sub(taskItem.startTime).Seconds() &gt; 10 &#123;\t\t\t\t\t\texpireTasks = append(expireTasks, taskItem.task)\t\t\t\t\t\texpireTaskIDs = append(expireTaskIDs, taskID)\t\t\t\t\t&#125;\t\t\t\t&#125;\t\t\t\tfor idx, taskID := range expireTaskIDs &#123;\t\t\t\t\tdelete(c.Task2Check, taskID)\t\t\t\t\tc.TaskChan &lt;- expireTasks[idx]\t\t\t\t&#125;\t\t\t\tc.mu.Unlock()\t\t\t&#125;\t\t&#125;\t&#125;()&#125;// 任务结束的通知，像个回调func (c *Coordinator) TaskDone(args *CallArgs, reply *CallReply) error &#123;\t//fmt.Println(args.BelongPhase)\t//fmt.Println(args.TaskID, args.BelongPhase)\tc.mu.Lock()\tif args.BelongPhase != c.CurPhase &#123;\t\tc.mu.Unlock()\t\treturn nil\t&#125;\tswitch c.CurPhase &#123;\tcase MapPhase:\t\tc.MapTaskNumTODO--\t\tdelete(c.Task2Check, args.TaskID)\t\tif c.MapTaskNumTODO == 0 &#123;\t\t\t//开始构建Reduce任务\t\t\tc.CurPhase = ReducePhase\t\t\tc.makeAllReduceTask()\t\t\t//fmt.Println(&quot;进入reduce&quot;)\t\t&#125;\tcase ReducePhase:\t\tc.ReduceTaskNumTODO--\t\tdelete(c.Task2Check, args.TaskID)\t\tif c.ReduceTaskNumTODO == 0 &#123;\t\t\tc.CurPhase = EndPhase\t\t\tc.checkTimer.Stop()\t\t&#125;\tcase EndPhase:\t\tfmt.Println(&quot;不收了&quot;)\t&#125;\tc.mu.Unlock()\treturn nil&#125;// start a thread that listens for RPCs from worker.gofunc (c *Coordinator) server() &#123;\trpc.Register(c)\trpc.HandleHTTP()\t//l, e := net.Listen(&quot;tcp&quot;, &quot;:1234&quot;)\tsockname := coordinatorSock()\tos.Remove(sockname)\tl, e := net.Listen(&quot;unix&quot;, sockname)\tif e != nil &#123;\t\tlog.Fatal(&quot;listen error:&quot;, e)\t&#125;\tgo http.Serve(l, nil)&#125;// main/mrcoordinator.go calls Done() periodically to find out// if the entire job has finished.func (c *Coordinator) Done() bool &#123;\t// Your code here.\tc.mu.Lock()\tdefer c.mu.Unlock()\treturn c.CurPhase == EndPhase&#125;// 初始生成所有的map任务func (c *Coordinator) makeAllMapTask(files []string) &#123;\tfor idx, file := range files &#123;\t\tfilenames := []string&#123;file&#125;\t\tt := MakeTask(idx, MapPhase, filenames)\t\tc.TaskChan &lt;- t\t&#125;&#125;// 进入第二阶段的开始时，生成所有的reduce任务func (c *Coordinator) makeAllReduceTask() &#123;\tpath, _ := os.Getwd()\tfiles, _ := os.ReadDir(path)\t//遍历ReducerNum遍\tfor reduceTaskID := 0; reduceTaskID &lt; c.ReducerNum; reduceTaskID++ &#123;\t\tvar filenames []string\t\tfor _, file := range files &#123;\t\t\t// 匹配对应的reduce文件\t\t\tif strings.HasPrefix(file.Name(), &quot;mr-&quot;) &amp;&amp; strings.HasSuffix(file.Name(), strconv.Itoa(reduceTaskID)+&quot;.json&quot;) &#123;\t\t\t\tfilenames = append(filenames, file.Name())\t\t\t&#125;\t\t&#125;\t\treduceTask := MakeTask(reduceTaskID, ReducePhase, filenames)\t\tc.TaskChan &lt;- reduceTask\t&#125;&#125;// create a Coordinator.// main/mrcoordinator.go calls this function.// nReduce is the number of reduce tasks to use.func MakeCoordinator(files []string, nReduce int) *Coordinator &#123;\tc := Coordinator&#123;\t\tTaskChan:          make(chan *Task, 10),\t\tCurPhase:          MapPhase,\t\tReducerNum:        nReduce,\t\tmu:                new(sync.Mutex),\t\tMapTaskNumTODO:    len(files),\t\tReduceTaskNumTODO: nReduce,\t\tTask2Check:        make(map[int]*CheckItem),\t\tcheckTimer:        time.NewTicker(1 * time.Second), // 创建一个每隔1秒触发一次的定时器\t&#125;\tc.makeAllMapTask(files)\t//开始定时检查任务\tc.check()\t// Your code here.\tc.server()\treturn &amp;c&#125;\nmr/worker.go\npackage mrimport (\t&quot;encoding/json&quot;\t&quot;fmt&quot;\t&quot;hash/fnv&quot;\t&quot;io&quot;\t&quot;log&quot;\t&quot;net/rpc&quot;\t&quot;os&quot;\t&quot;sort&quot;\t&quot;strconv&quot;\t&quot;time&quot;)// Map functions return a slice of KeyValue.type KeyValue struct &#123;\tKey   string\tValue string&#125;// use ihash(key) % NReduce to choose the reduce// task number for each KeyValue emitted by Map.func ihash(key string) int &#123;\th := fnv.New32a()\th.Write([]byte(key))\treturn int(h.Sum32() &amp; 0x7fffffff)&#125;// for sorting by key.type ByKey []KeyValue// for sorting by key.func (a ByKey) Len() int           &#123; return len(a) &#125;func (a ByKey) Swap(i, j int)      &#123; a[i], a[j] = a[j], a[i] &#125;func (a ByKey) Less(i, j int) bool &#123; return a[i].Key &lt; a[j].Key &#125;// Map任务只涉及一个Filefunc doMap(mapf func(string, string) []KeyValue, task *Task, reducerNum int) &#123;\t//读取文件内容\tintermediate := []KeyValue&#123;&#125;\tfile, err := os.Open(task.FileNames[0])\tif err != nil &#123;\t\tlog.Fatalf(&quot;cannot open %v&quot;, task.FileNames[0])\t&#125;\tcontent, err := io.ReadAll(file)\tif err != nil &#123;\t\tlog.Fatalf(&quot;cannot read %v&quot;, task.FileNames[0])\t&#125;\tfile.Close()\t//分词\tkva := mapf(task.FileNames[0], string(content))\tintermediate = append(intermediate, kva...)\tsort.Sort(ByKey(intermediate))\t//第一维是按key分的桶，第二维是桶内的数组\thashedKV := make([][]KeyValue, reducerNum)\tfor _, kv := range intermediate &#123;\t\thashKey := ihash(kv.Key) % reducerNum\t\thashedKV[hashKey] = append(hashedKV[hashKey], kv)\t&#125;\t//生成这个Map能生成的所有的reduce任务\tfor hashKey, kvs := range hashedKV &#123;\t\toutput := &quot;mr-&quot; + strconv.Itoa(task.ID) + &quot;-&quot; + strconv.Itoa(hashKey) + &quot;.json&quot;\t\tofile, err := os.Create(output)\t\tif err != nil &#123;\t\t\tlog.Fatalf(&quot;cannot create %v&quot;, output)\t\t&#125;\t\tenc := json.NewEncoder(ofile)\t\tfor _, kv := range kvs &#123;\t\t\tenc.Encode(kv)\t\t&#125;\t\tofile.Close()\t&#125;&#125;// Reduce任务涉及多个Filefunc doReduce(reducef func(string, []string) string, task *Task) &#123;\t//1.取出这个reduce任务负责的所有的kv，然后按key排序\tvar kvs []KeyValue\tfor _, filename := range task.FileNames &#123;\t\tfile, _ := os.Open(filename)\t\tdec := json.NewDecoder(file)\t\tfor &#123;\t\t\tvar kv KeyValue\t\t\t//一报错就跳出循环\t\t\tif err := dec.Decode(&amp;kv); err != nil &#123;\t\t\t\tbreak\t\t\t&#125;\t\t\tkvs = append(kvs, kv)\t\t&#125;\t\tfile.Close()\t&#125;\tsort.Sort(ByKey(kvs))\toname := &quot;mr-out-&quot; + strconv.Itoa(task.ID)\tofile, _ := os.Create(oname)\t//2.双指针 统计每个key的个数\ti := 0\tfor i &lt; len(kvs) &#123;\t\tj := i + 1\t\tfor j &lt; len(kvs) &amp;&amp; kvs[j].Key == kvs[i].Key &#123;\t\t\tj++\t\t&#125;\t\tvalues := []string&#123;&#125;\t\tfor k := i; k &lt; j; k++ &#123;\t\t\tvalues = append(values, kvs[k].Value)\t\t&#125;\t\t//将统计结果写入文件\t\toutput := reducef(kvs[i].Key, values)\t\tfmt.Fprintf(ofile, &quot;%v %v\\n&quot;, kvs[i].Key, output)\t\t//继续下一个key\t\ti = j\t&#125;&#125;// main/mrworker.go calls this function.func Worker(mapf func(string, string) []KeyValue,\treducef func(string, []string) string) &#123;\t// Your worker implementation here.\tfor &#123;\t\treply := AskTask()\t\tswitch reply.TaskType &#123;\t\tcase WaitTask:\t\t\ttime.Sleep(1 * time.Second)\t\tcase MapTask:\t\t\tdoMap(mapf, reply.Task, reply.ReducerNum)\t\t\tcallDone(MapPhase, reply.Task.ID)\t\tcase ReduceTask:\t\t\tdoReduce(reducef, reply.Task)\t\t\tcallDone(ReducePhase, reply.Task.ID)\t\tcase ExitTask:\t\t\tos.Exit(66)\t\tdefault:\t\t\tbreak\t\t&#125;\t&#125;&#125;func AskTask() CallReply &#123;\targs := CallArgs&#123;&#125;\treply := CallReply&#123;&#125;\tcall(&quot;Coordinator.Assign&quot;, &amp;args, &amp;reply)\treturn reply&#125;func callDone(belongPhase int, taskID int) CallReply &#123;\targs := CallArgs&#123;belongPhase, taskID&#125;\treply := CallReply&#123;&#125;\tok := call(&quot;Coordinator.TaskDone&quot;, &amp;args, &amp;reply)\tif !ok &#123;\t\tfmt.Printf(&quot;coordinator把我抛弃了\\n&quot;)\t\tos.Exit(66)\t&#125;\treturn reply&#125;// send an RPC request to the coordinator, wait for the response.// usually returns true.// returns false if something goes wrong.func call(rpcname string, args interface&#123;&#125;, reply interface&#123;&#125;) bool &#123;\t// c, err := rpc.DialHTTP(&quot;tcp&quot;, &quot;127.0.0.1&quot;+&quot;:1234&quot;)\tsockname := coordinatorSock()\tc, err := rpc.DialHTTP(&quot;unix&quot;, sockname)\tif err != nil &#123;\t\tlog.Fatal(&quot;dialing:&quot;, err)\t&#125;\tdefer c.Close()\terr = c.Call(rpcname, args, reply)\tif err == nil &#123;\t\treturn true\t&#125;\tfmt.Println(err)\treturn false&#125;\n","categories":["6.584"],"tags":["分布式计算","Go"]},{"title":"AVL树实现练习","url":"/2022/02/05/AVL%E6%A0%91%E7%BB%83%E4%B9%A0/","content":"debug了好久才写出来的平衡树，代码里有注释可以方便理解可能有代码冗余或者有误的地方，欢迎指出错误（好像因为是看了别人的博客，所以混淆了结点高度这个概念，我先解释一下我代码里的Height&#x3D;当前结点到叶子结点的经过的边+1）很抱歉影响了你的观看体验！\n推荐一个网站（数据结构操作可视化）(我这里给出的是平衡树界面)AVL Tree Visualzation(我debug就是看着可视化的树查错的)\n还是讲下一些关键操作吧：1、左旋(基操)左旋不会改变中序遍历2、右旋(基操)右旋不会改变中序遍历\n3、LL(左左)用下图举例的话，就是插入操作为在结点1的左孩子的左孩子处插入结点3，这样会使得平衡度&#x3D;&#x3D; 2就是对结点1进行一个右旋4、RR(右右，在结点1的右孩子的右孩子处插入结点3，这样会使得平衡度&#x3D;&#x3D;-2)就是对结点1进行一个左旋5、LR（左右，在结点1的左孩子的右孩子处插入结点3，这样会使得平衡度&#x3D;&#x3D;-2）就是先对结点2右旋，再对结点1左旋6、RL(开摆！你们自己对照着LR比划去罢)\n7、计算平衡度首先得到当前结点的左右孩子的高度(高度的更新是在回溯的时候进行的，所以可以保证子结点的高度已经是正确的了)然后就是return leftHeight-rightHeight了\n8、找到左子树的最大值删除一个左右子结点都存在的结点时，需要用左子树的最大结点或右子树的最小结点来替代当前结点(我的代码里用的是左子树的最大结点)其实左子树的最大结点就是左子树的最右下角的结点\n下面开始放代码(欢迎喷我代码的问题)\nimport java.util.LinkedList;/** * @author 20级三班刘宇阳 * @create 2022/2/3 *//** * 平衡樹 * @param &lt;K&gt; key的类型 元素必须可比较 * @param &lt;V&gt; value的类型 */public class AVLTree&lt;K extends Comparable&lt;K&gt;,V&gt; &#123;    //树结点类    private class Node&#123;        //键        private K key;        //值        private V value;        //高度        private Integer height;        //左右父        private Node left,right,parent;        public Node(K key,V value) &#123;            this.key=key;            this.value = value;            height=1;        &#125;        /**         * 获得平衡度         * @return 平衡度         */        private int getBalanceFactor()&#123;            int leftHeight=left==null?0:left.getHeight();            int rightHeight=right==null?0:right.getHeight();            return leftHeight-rightHeight;        &#125;        private int getHeight()&#123;            return height;        &#125;        private void setHeight(Integer height)&#123;            this.height=height;        &#125;        /**         * 更新该结点的高度         */        private void updateHeight()&#123;            int leftHeight=left==null?0:left.getHeight();            int rightHeight=right==null?0:right.getHeight();            height=1+Math.max(leftHeight,rightHeight);        &#125;        private K getKey() &#123;            return key;        &#125;        private void setKey(K key) &#123;            this.key = key;        &#125;        private V getValue() &#123;            return value;        &#125;        private void setValue(V value) &#123;            this.value = value;        &#125;        private void setKeyAndValue(K key,V value)&#123;            setKey(key);            setValue(value);        &#125;        private Node getLeft() &#123; return left; &#125;        private void setLeft(Node left) &#123; this.left = left; &#125;        private Node getRight() &#123; return right; &#125;        private void setRight(Node right) &#123; this.right = right; &#125;        private Node getParent() &#123; return parent; &#125;        private void setParent(Node parent) &#123; this.parent = parent; &#125;        @Override        public String toString() &#123;            return &quot;Node&#123;&quot; +                    &quot;key=&quot; + key +                    &quot;, value=&quot; + value +                    &#x27;&#125;&#x27;;        &#125;    &#125;    //结点个数    private int size;    //根结点    private Node root;    public AVLTree()&#123;        clear();    &#125;    /**     *    1              2     *     \\            / \\     *      2     =&gt;   1   3     *       \\     *        3     * @param node1 需要调整的该子树的根结点     * @return 新的根结点     */    private Node leftRotate(Node node1)&#123;        Node node2=node1.getRight();        node1.setRight(node2.getLeft());        node1.setParent(node2);        if(node1.getRight()!=null)&#123;            node1.getRight().setParent(node1);        &#125;        node2.setLeft(node1);        node1.updateHeight();        node2.updateHeight();        return node2;    &#125;    /**     *      1       2     *     /  =&gt;   / \\     *    2       3   1     *   /     *  3     * @param node1 需要调整的该子树的根结点     * @return 新的根结点     */    private Node rightRotate(Node node1)&#123;        Node node2=node1.getLeft();        node1.setLeft(node2.getRight());        node1.setParent(node2);        if(node1.getLeft()!=null)&#123;            node1.getLeft().setParent(node1);        &#125;        node2.setRight(node1);        node1.updateHeight();        node2.updateHeight();        return node2;    &#125;    /**     * 作为put的递归工具方法     * @param root 当前的根结点     * @param key     * @param value     * @return     */    private Node addNode(Node root,K key,V value)&#123;        if(root==null)&#123;            //直接返回结点，让父节点更新子结点，同时不走下面的reBalance            return new Node(key,value);        &#125;        int cmpRes=key.compareTo(root.getKey());        //小于，看左子树        if(cmpRes&lt;0)&#123;            //这里需要更新左子结点            Node leftChild=addNode(root.getLeft(),key,value);            root.setLeft(leftChild);            leftChild.setParent(root);        &#125;else if(cmpRes&gt;0)&#123;//大于，看右子树            //这里需要更新右子结点            Node rightChild=addNode(root.getRight(),key,value);            root.setRight(rightChild);            rightChild.setParent(root);        &#125;else&#123;            //key值相等就认为是更新            root.setValue(value);        &#125;        return reBalance(root);    &#125;    private Node reBalance(Node root)&#123;        int bf=root.getBalanceFactor();        //左子树高        if(bf&gt;1)&#123;            Node leftChild=root.getLeft();            int childBF=leftChild.getBalanceFactor();            /**LL型             *        1              2             *       /              / \\             *      2              3   1             *     /        =&gt;             *    3             **/            if(childBF&gt;0)&#123;                //右旋                root=rightRotate(root);            &#125;            /** LR型             *             *       1          1        3             *      /          /        / \\             *     2    =&gt;    3   =&gt;   2   1             *      \\        /             *       3      2             */            else&#123;                //先左旋再右旋                //注意左旋是以2为根结点                root.setLeft(leftRotate(root.getLeft()));                root=rightRotate(root);            &#125;        &#125;else if(bf&lt;-1)&#123;//右子树高            Node rightChild=root.getRight();            int childBF=rightChild.getBalanceFactor();            /**RL型             *             *    1         1             3             *     \\         \\           / \\             *      2  =&gt;     3   =&gt;    1   2             *     /           \\             *    3             2             */            if(childBF&gt;0)&#123;                //注意右旋是以2为根结点                root.setRight(rightRotate(root.getRight()));                root=leftRotate(root);            &#125;            /**RR型             *     1              2             *      \\            / \\             *       2    =&gt;    1   3             *        \\             *         3             */            else&#123;                //左旋                root=leftRotate(root);            &#125;        &#125;        //这里可以在回溯时更新路径上的所有结点的高度(已平衡的结点会直接来这里更新高度)        root.updateHeight();        return root;    &#125;    /**     * 根据key值寻找结点     * @param root 当前根节点     * @param key 当前键     * @return 目标结点     */    private Node findNode(Node root,K key)&#123;        if(root==null)&#123;            return null;        &#125;        int cmpRes=key.compareTo(root.getKey());        if(cmpRes&lt;0)&#123;            return findNode(root.getLeft(),key);        &#125;else if(cmpRes&gt;0)&#123;            return findNode(root.getRight(),key);        &#125;else&#123;            return root;        &#125;    &#125;    /**     * 查找要被删除结点的左子树的最大节点     * @param root 当前根节点     * @param deletedNode 要被删除的结点     * @return     */    private Node replaceNode(Node root,Node deletedNode)&#123;        if(root.getRight()==null)&#123;            deletedNode.setKeyAndValue(root.getKey(),root.getValue());            return null;        &#125;        root.setRight(replaceNode(root.getRight(),deletedNode));        root.updateHeight();        return reBalance(root);    &#125;    /**     * 删除结点     * @param root 当前根节点     * @param key 目标键     * @return 当前子树的新根节点(可能会更新也可能不会),用来给父节点更新子树     */    private Node deleteNode(Node root,K key)&#123;        if(root==null)&#123;            return null;        &#125;        int cmpRes=key.compareTo(root.getKey());        if(cmpRes&lt;0)&#123;            //找左子树            Node leftChild=deleteNode(root.getLeft(), key);            root.setLeft(leftChild);            if(leftChild!=null)&#123;                //                leftChild.setParent(root);            &#125;        &#125;else if(cmpRes&gt;0) &#123;            //找右子树            Node rightChild=deleteNode(root.getRight(), key);            root.setRight(rightChild);            if(rightChild!=null)&#123;                rightChild.setParent(root);            &#125;        &#125;else&#123;            //找到要删除的结点了            if(root.getLeft()==null&amp;&amp;root.getRight()==null)&#123;//叶子结点                if(root.getParent()==null)&#123;                    setRoot(null);                &#125;                return null;            &#125;else if(root.getLeft()==null)&#123;//左子树为空，右子树不为空                root.getRight().setParent(root.getParent());                if(root.getParent()==null)&#123;                    setRoot(root.getRight());                &#125;                return root.getRight();            &#125; else if(root.getRight()==null)&#123;//右子树为空，左子树不为空                root.getLeft().setParent(root.getParent());                if(root.getParent()==null)&#123;                    setRoot(root.getLeft());                &#125;                return root.getLeft();            &#125;            else&#123;//有两个儿子结点                Node leftChild=root.getLeft();                if(leftChild.getRight()==null)&#123;                    //要被删除的结点用左儿子结点替换，同时他的右儿子要作为他左儿子的右儿子                    leftChild.right=root.getRight();                    root=leftChild;                &#125;else&#123;                    //用左子树的最大节点覆盖被删除的结点（可视为删除），并更新左孩子                    Node newLeft=replaceNode(leftChild,root);                    root.setLeft(newLeft);                    if(newLeft!=null)&#123;                        newLeft.setParent(root);                    &#125;                &#125;            &#125;        &#125;        root.updateHeight();        return reBalance(root);    &#125;    /**     * 放入元素     * @param key 键     * @param value 值     */    public void put(K key,V value)&#123;        if(root==null)&#123; setRoot(new Node(key,value)); &#125;        else&#123;            setRoot(addNode(root,key,value));            //因为这些操作不涉及根结点的处理，所以需要单独写一个根结点的父节点置空            getRoot().setParent(null);        &#125;        size++;    &#125;    /**     * 获取键对应的值     * @param key     * @return 对应结点的值     */    public V get(K key)&#123;        if(key==null)&#123;            throw new NullPointerException(&quot;key cannot be null&quot;);        &#125;        Node node=findNode(root,key);        if(node==null)&#123;            return null;        &#125;        return node.getValue();    &#125;    /**     * 根据键删除对应结点     * @param key 键     */    public void remove(K key)&#123;        if(key==null)&#123;            throw new NullPointerException(&quot;key cannot be null&quot;);        &#125;        setRoot(deleteNode(root,key));        if(getRoot()!=null)&#123;            getRoot().setParent(null);        &#125;        size--;    &#125;    /**     * 重置树(可用于初始化)     */    public void clear()&#123;        size=0;        root=null;    &#125;    public boolean isEmpty()&#123; return size==0; &#125;    public int size() &#123; return size; &#125;    private void setSize(int size) &#123; this.size = size; &#125;    private Node getRoot() &#123; return root; &#125;    private void setRoot(Node root) &#123; this.root = root; &#125;    private StringBuilder preOrderTraverse(Node root,StringBuilder sb)&#123;        if(root==null)&#123;            //null结点为#            sb.append(&quot;# &quot;);            return sb;        &#125;        sb.append(root.getKey()).append(&quot; &quot;);        sb=preOrderTraverse(root.getLeft(),sb);        sb=preOrderTraverse(root.getRight(),sb);        return sb;    &#125;    @Override    public String toString()&#123;        StringBuilder sb=new StringBuilder();        sb.append(&quot;preOrderTraverseSequenceOfKey is [&quot;);        sb=preOrderTraverse(root,sb);        sb.deleteCharAt(sb.length()-1);        sb.append(&quot;]&quot;);        return sb.toString();    &#125;&#125;class AVLTreeDemo&#123;    public static void main(String[] args) &#123;        AVLTree&lt;Integer,Integer&gt; tree=new AVLTree&lt;&gt;();        LinkedList&lt;Integer&gt; list=new LinkedList&lt;&gt;();        for(int i=1;i&lt;=10;i++)&#123;            list.add(i);        &#125;        list.add(0);//        System.out.println(list);        System.out.println(&quot;----------put测试----------&quot;);        System.out.println(&quot;输出的是前序遍历的key序列：&quot;);        for(Integer it:list)&#123;            tree.put(it,it);            System.out.println(tree);        &#125;        tree.remove(2);        System.out.println(tree);//        System.out.println(&quot;------------get测试--------------&quot;);//        System.out.println(tree.get(2));//        System.out.println(&quot;------------delete测试--------------&quot;);//        tree.remove(2);//        System.out.println(tree);//        tree.remove(1);//        System.out.println(tree);//        tree.remove(-1);//        System.out.println(tree);//        tree.remove(0);//        System.out.println(tree);//        tree.put(11,11);//        System.out.println(tree);//        tree.remove(8);//        System.out.println(tree);//        tree.remove(9);//        tree.remove(11);//        System.out.println(tree);//        tree.remove(3);//        System.out.println(tree);//        tree.remove(6);//        tree.remove(4);//        System.out.println(tree);    &#125;&#125;\n","categories":["数据结构","练习"],"tags":["树"]},{"title":"2025-04-14有感","url":"/2025/04/14/2025-04-15/","content":"每隔一个月都需要重温一遍《我还年轻》以及《县城》和《叫魂》，给自己安逸祥和的生活添加一点悲凉与荒诞，让自己能重新为了未知的未来埋头苦干。\n冬风灌满嘴的时候，我也想纵声长啸。\n"},{"title":"Centos7.6部署fabric以及链码","url":"/2022/09/14/Centos7-6%E9%83%A8%E7%BD%B2fabric%E4%BB%A5%E5%8F%8A%E9%93%BE%E7%A0%81/","content":"参考Fabric学习Fabric2.2 全面学习\n如果是最小化安装遇到找不到命令时，自行用yum安装如yum install vimyum install wget\n\n环境yum -y install git \t\tgit --versionyum -y install curl \t\tcurl --versionsudo yum install -y yum-utilssudo yum-config-manager \\    --add-repo \\    https://download.docker.com/linux/centos/docker-ce.repo    sudo yum install docker-ce docker-ce-cli containerd.iosudo systemctl start dockersudo systemctl enable dockersudo mkdir -p /etc/dockersudo tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;&#123;  &quot;registry-mirrors&quot;: [&quot;https://ppztf0yr.mirror.aliyuncs.com&quot;]&#125;EOFsudo systemctl daemon-reloadsudo systemctl restart dockercurl -L https://get.daocloud.io/docker/compose/releases/download/1.26.2/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-composechmod +x /usr/local/bin/docker-composedocker-compose versioncd /usr/localwget https://studygolang.com/dl/golang/go1.14.7.linux-amd64.tar.gztar -zxvf go1.14.7.linux-amd64.tar.gzvim /etc/profile  # 添加如下#export GOROOT=/usr/local/go#export GOPATH=$HOME/go#export PATH=$PATH:$GOROOT/bin:$GOPATH/binsource /etc/profilego versiongo env -w GO111MODULE=ongo env -w GOPROXY=https://mirrors.aliyun.com/goproxy/\n\n\n安装fabric-samplescd /usr/localmkdir hyperledger cd hyperledgertouch bootstrap.sh\n我这里给出bootstrap.sh文件内容，\n#!/bin/bash## Copyright IBM Corp. All Rights Reserved.## SPDX-License-Identifier: Apache-2.0## if version not passed in, default to latest released versionVERSION=2.2.0# if ca version not passed in, default to latest released versionCA_VERSION=1.4.8ARCH=$(echo &quot;$(uname -s|tr &#x27;[:upper:]&#x27; &#x27;[:lower:]&#x27;|sed &#x27;s/mingw64_nt.*/windows/&#x27;)-$(uname -m |sed &#x27;s/x86_64/amd64/g&#x27;)&quot; |sed &#x27;s/darwin-arm64/darwin-amd64/g&#x27;)MARCH=$(uname -m): $&#123;CONTAINER_CLI:=&quot;docker&quot;&#125;printHelp() &#123;    echo &quot;Usage: bootstrap.sh [version [ca_version]] [options]&quot;    echo    echo &quot;options:&quot;    echo &quot;-h : this help&quot;    echo &quot;-d : bypass docker image download&quot;    echo &quot;-s : bypass fabric-samples repo clone&quot;    echo &quot;-b : bypass download of platform-specific binaries&quot;    echo    echo &quot;e.g. bootstrap.sh 2.4.6 1.5.5 -s&quot;    echo &quot;will download docker images and binaries for Fabric v2.4.6 and Fabric CA v1.5.5&quot;&#125;# dockerPull() pulls docker images from fabric and chaincode repositories# note, if a docker image doesn&#x27;t exist for a requested release, it will simply# be skipped, since this script doesn&#x27;t terminate upon errors.dockerPull() &#123;    #three_digit_image_tag is passed in, e.g. &quot;1.4.7&quot;    three_digit_image_tag=$1    shift    #two_digit_image_tag is derived, e.g. &quot;1.4&quot;, especially useful as a local tag for two digit references to most recent baseos, ccenv, javaenv, nodeenv patch releases    two_digit_image_tag=$(echo &quot;$three_digit_image_tag&quot; | cut -d&#x27;.&#x27; -f1,2)    while [[ $# -gt 0 ]]    do        image_name=&quot;$1&quot;        echo &quot;====&gt; hyperledger/fabric-$image_name:$three_digit_image_tag&quot;        $&#123;CONTAINER_CLI&#125; pull &quot;hyperledger/fabric-$image_name:$three_digit_image_tag&quot;        $&#123;CONTAINER_CLI&#125; tag &quot;hyperledger/fabric-$image_name:$three_digit_image_tag&quot; &quot;hyperledger/fabric-$image_name&quot;        $&#123;CONTAINER_CLI&#125; tag &quot;hyperledger/fabric-$image_name:$three_digit_image_tag&quot; &quot;hyperledger/fabric-$image_name:$two_digit_image_tag&quot;        shift    done&#125;cloneSamplesRepo() &#123;    # clone (if needed) hyperledger/fabric-samples and checkout corresponding    # version to the binaries and docker images to be downloaded    if [ -d test-network ]; then        # if we are in the fabric-samples repo, checkout corresponding version        echo &quot;==&gt; Already in fabric-samples repo&quot;    elif [ -d fabric-samples ]; then        # if fabric-samples repo already cloned and in current directory,        # cd fabric-samples        echo &quot;===&gt; Changing directory to fabric-samples&quot;        cd fabric-samples    else        echo &quot;===&gt; Cloning hyperledger/fabric-samples repo&quot;        git clone -b main https://github.com/hyperledger/fabric-samples.git &amp;&amp; cd fabric-samples    fi    if GIT_DIR=.git git rev-parse v$&#123;VERSION&#125; &gt;/dev/null 2&gt;&amp;1; then        echo &quot;===&gt; Checking out v$&#123;VERSION&#125; of hyperledger/fabric-samples&quot;        git checkout -q v$&#123;VERSION&#125;    else        echo &quot;fabric-samples v$&#123;VERSION&#125; does not exist, defaulting to main. fabric-samples main branch is intended to work with recent versions of fabric.&quot;        git checkout -q main    fi&#125;# This will download the .tar.gzdownload() &#123;    local BINARY_FILE=$1    local URL=$2    echo &quot;===&gt; Downloading: &quot; &quot;$&#123;URL&#125;&quot;    curl -L --retry 5 --retry-delay 3 &quot;$&#123;URL&#125;&quot; | tar xz || rc=$?    if [ -n &quot;$rc&quot; ]; then        echo &quot;==&gt; There was an error downloading the binary file.&quot;        return 22    else        echo &quot;==&gt; Done.&quot;    fi&#125;pullBinaries() &#123;    echo &quot;===&gt; Downloading version $&#123;FABRIC_TAG&#125; platform specific fabric binaries&quot;    download &quot;$&#123;BINARY_FILE&#125;&quot; &quot;https://github.com/hyperledger/fabric/releases/download/v$&#123;VERSION&#125;/$&#123;BINARY_FILE&#125;&quot;    if [ $? -eq 22 ]; then        echo        echo &quot;------&gt; $&#123;FABRIC_TAG&#125; platform specific fabric binary is not available to download &lt;----&quot;        echo        exit    fi    echo &quot;===&gt; Downloading version $&#123;CA_TAG&#125; platform specific fabric-ca-client binary&quot;    download &quot;$&#123;CA_BINARY_FILE&#125;&quot; &quot;https://github.com/hyperledger/fabric-ca/releases/download/v$&#123;CA_VERSION&#125;/$&#123;CA_BINARY_FILE&#125;&quot;    if [ $? -eq 22 ]; then        echo        echo &quot;------&gt; $&#123;CA_TAG&#125; fabric-ca-client binary is not available to download  (Available from 1.1.0-rc1) &lt;----&quot;        echo        exit    fi&#125;pullDockerImages() &#123;    command -v $&#123;CONTAINER_CLI&#125; &gt;&amp; /dev/null    NODOCKER=$?    if [ &quot;$&#123;NODOCKER&#125;&quot; == 0 ]; then        FABRIC_IMAGES=(peer orderer ccenv tools)        case &quot;$VERSION&quot; in        2.*)            FABRIC_IMAGES+=(baseos)            shift            ;;        esac        echo &quot;FABRIC_IMAGES:&quot; &quot;$&#123;FABRIC_IMAGES[@]&#125;&quot;        echo &quot;===&gt; Pulling fabric Images&quot;        dockerPull &quot;$&#123;FABRIC_TAG&#125;&quot; &quot;$&#123;FABRIC_IMAGES[@]&#125;&quot;        echo &quot;===&gt; Pulling fabric ca Image&quot;        CA_IMAGE=(ca)        dockerPull &quot;$&#123;CA_TAG&#125;&quot; &quot;$&#123;CA_IMAGE[@]&#125;&quot;        echo &quot;===&gt; List out hyperledger docker images&quot;        $&#123;CONTAINER_CLI&#125; images | grep hyperledger    else        echo &quot;=========================================================&quot;        echo &quot;$&#123;CONTAINER_CLI&#125; not installed, bypassing download of Fabric images&quot;        echo &quot;=========================================================&quot;    fi&#125;DOCKER=trueSAMPLES=trueBINARIES=true# Parse commandline args pull out# version and/or ca-version strings firstif [ -n &quot;$1&quot; ] &amp;&amp; [ &quot;$&#123;1:0:1&#125;&quot; != &quot;-&quot; ]; then    VERSION=$1;shift    if [ -n &quot;$1&quot; ]  &amp;&amp; [ &quot;$&#123;1:0:1&#125;&quot; != &quot;-&quot; ]; then        CA_VERSION=$1;shift        if [ -n  &quot;$1&quot; ] &amp;&amp; [ &quot;$&#123;1:0:1&#125;&quot; != &quot;-&quot; ]; then            THIRDPARTY_IMAGE_VERSION=$1;shift        fi    fifi# prior to 1.2.0 architecture was determined by uname -mif [[ $VERSION =~ ^1\\.[0-1]\\.* ]]; then    export FABRIC_TAG=$&#123;MARCH&#125;-$&#123;VERSION&#125;    export CA_TAG=$&#123;MARCH&#125;-$&#123;CA_VERSION&#125;    export THIRDPARTY_TAG=$&#123;MARCH&#125;-$&#123;THIRDPARTY_IMAGE_VERSION&#125;else    # starting with 1.2.0, multi-arch images will be default    : &quot;$&#123;CA_TAG:=&quot;$CA_VERSION&quot;&#125;&quot;    : &quot;$&#123;FABRIC_TAG:=&quot;$VERSION&quot;&#125;&quot;    : &quot;$&#123;THIRDPARTY_TAG:=&quot;$THIRDPARTY_IMAGE_VERSION&quot;&#125;&quot;fiBINARY_FILE=hyperledger-fabric-$&#123;ARCH&#125;-$&#123;VERSION&#125;.tar.gzCA_BINARY_FILE=hyperledger-fabric-ca-$&#123;ARCH&#125;-$&#123;CA_VERSION&#125;.tar.gz# then parse optswhile getopts &quot;h?dsb&quot; opt; do    case &quot;$opt&quot; in        h|\\?)            printHelp            exit 0            ;;        d)  DOCKER=false            ;;        s)  SAMPLES=false            ;;        b)  BINARIES=false            ;;    esacdoneif [ &quot;$SAMPLES&quot; == &quot;true&quot; ]; then    echo    echo &quot;Clone hyperledger/fabric-samples repo&quot;    echo    cloneSamplesRepofiif [ &quot;$BINARIES&quot; == &quot;true&quot; ]; then    echo    echo &quot;Pull Hyperledger Fabric binaries&quot;    echo    pullBinariesfiif [ &quot;$DOCKER&quot; == &quot;true&quot; ]; then    echo    echo &quot;Pull Hyperledger Fabric docker images&quot;    echo    pullDockerImagesfi\n运行下载程序注意最后这三个if...fi，分别是克隆fabric-samples文件夹、获得bin和config文件夹、拉取镜像的作用其中pullBinaries耗时最长，最易出错，最易搞心态，建议单独执行(或者往下面看)即可以先将137行的BINARIES=true改为BINARIES=false，执行bootstrap.sh，再重新设BINARIES=true，并将其他两个设为false，再执行bootstrap.sh，并将第二次获得到的bin和config目录移入fabric-samples文件夹内如果出现\n\n可以出现 /bin/bash^M: 坏的解释器: 没有那个文件或目录，解决方案如下：\n\n\n如果克隆fabric-samples失败，即设SAMPLES=true并运行后无fabric-samples文件夹出现，则自己手动安装(因为这个也挺花时间的)\n\ngit clone -b main https://github.com/hyperledger/fabric-samples.gitcd fabric-samplesgit checkout -q v2.2.0git checkout -b branch\n\n如果下载二进制文件的时间很长很长，可以考虑在windows上通过Github直接下好再上传到服务器上，因为shell里下载的方法就是git。将这两个文件在&#x2F;usr&#x2F;local&#x2F;hyperledger&#x2F;下载并解压\n\n第一个下载的wget https://github.com/hyperledger/fabric/releases/download/v2.2.0/hyperledger-fabric-linux-amd64-2.2.0.tar.gz第二个下载的wget https://github.com/hyperledger/fabric-ca/releases/download/v1.4.8/hyperledger-fabric-ca-linux-amd64-1.4.8.tar.gztar -zxvf hyperledger-fabric-linux-amd64-2.2.0.tar.gztar -zxvf hyperledger-fabric-ca-linux-amd64-1.4.8.tar.gz\n\n\n我们继续放命令\nchmod +X bootstrap.sh./bootstrap.shmv config/ fabric-samples/mv bin/ fabric-samples/vim /etc/profile# 添加如下#export PATH=$PATH:/usr/local/hyperledger/fabric-samples/binsource /etc/profile fabric-ca-client version\n\n使用测试网络cd /usr/local/hyperledger/fabric-samples/test-network./network.sh up createChannel\n注意上面有可能报错，无报错的 跳转\nERROR: The Compose file &#x27;./docker/docker-compose-test-net.yaml&#x27; is invalid because:networks.test value Additional properties are not allowed (&#x27;name&#x27; was unexpected)ERROR: The Compose file &#x27;./addOrg3/docker/docker-compose-couch-org3.yaml&#x27; is invalid because:networks.test value Additional properties are not allowed (&#x27;name&#x27; was unexpected)\n此时需要将/usr/local/hyperledger/fabric-samples/test-network/docker/docker-compose-test-net.yaml\n的13、14、15行改为\n并将59、96行的fabric_test改为docker_test再将文件夹/usr/local/hyperledger/fabric-samples/test-network/下的\ndocker/docker-compose-couch.yamldocker/docker-compose-ca.yamladdOrg3/docker/docker-compose-org3.yamladdOrg3/docker/docker-compose-couch-org3.yamladdOrg3/docker/docker-compose-ca-org3.yaml\n的第一个networks也改成然后再\n./network.sh down./network.sh up createChannel\n就行了\n正常后我们继续，当前路径为/usr/local/hyperledger/fabric-samples/test-network\n# 部署链码./network.sh deployCC -ccn basic -ccp ../asset-transfer-basic/chaincode-go -ccl go\n可能会有下面的报错，此时要去这个链码包下删除mod并重新tidy\ncd ../asset-transfer-basic/chaincode-gorm -f go.sumgo env -w GOSUMDB=offgo mod tidygo env -w GOSUMDB=GOSUMDB=&quot;sum.golang.org&quot;# 重新开启./network.sh down./network.sh up createChannel./network.sh deployCC -ccn basic -ccp ../asset-transfer-basic/chaincode-go -ccl go\n\n\nvim /etc/profile# 添加如下# export PATH=/usr/local/hyperledger/fabric-samples/bin:$PATH# export FABRIC_CFG_PATH=/usr/local/hyperledger/fabric-samples/config/source /etc/profileexport CORE_PEER_TLS_ENABLED=trueexport CORE_PEER_LOCALMSPID=&quot;Org1MSP&quot;export CORE_PEER_TLS_ROOTCERT_FILE=$&#123;PWD&#125;/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crtexport CORE_PEER_MSPCONFIGPATH=$&#123;PWD&#125;/organizations/peerOrganizations/org1.example.com/users/Admin@org1.example.com/mspexport CORE_PEER_ADDRESS=localhost:7051# 调用初始化函数peer chaincode invoke -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem -C mychannel -n basic --peerAddresses localhost:7051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt --peerAddresses localhost:9051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt -c &#x27;&#123;&quot;function&quot;:&quot;InitLedger&quot;,&quot;Args&quot;:[]&#125;&#x27;# 输出#-&gt; INFO 001 Chaincode invoke successful. result: status:200# 调用查询peer chaincode query -C mychannel -n basic -c &#x27;&#123;&quot;Args&quot;:[&quot;GetAllAssets&quot;]&#125;&#x27;# 输出#[#  &#123;&quot;ID&quot;: &quot;asset1&quot;, &quot;color&quot;: &quot;blue&quot;, &quot;size&quot;: 5, &quot;owner&quot;: &quot;Tomoko&quot;, &quot;appraisedValue&quot;: 300&#125;,#  &#123;&quot;ID&quot;: &quot;asset2&quot;, &quot;color&quot;: &quot;red&quot;, &quot;size&quot;: 5, &quot;owner&quot;: &quot;Brad&quot;, &quot;appraisedValue&quot;: 400&#125;,#  &#123;&quot;ID&quot;: &quot;asset3&quot;, &quot;color&quot;: &quot;green&quot;, &quot;size&quot;: 10, &quot;owner&quot;: &quot;Jin Soo&quot;, &quot;appraisedValue&quot;: 500&#125;,#  &#123;&quot;ID&quot;: &quot;asset4&quot;, &quot;color&quot;: &quot;yellow&quot;, &quot;size&quot;: 10, &quot;owner&quot;: &quot;Max&quot;, &quot;appraisedValue&quot;: 600&#125;,#  &#123;&quot;ID&quot;: &quot;asset5&quot;, &quot;color&quot;: &quot;black&quot;, &quot;size&quot;: 15, &quot;owner&quot;: &quot;Adriana&quot;, &quot;appraisedValue&quot;: 700&#125;,#  &#123;&quot;ID&quot;: &quot;asset6&quot;, &quot;color&quot;: &quot;white&quot;, &quot;size&quot;: 15, &quot;owner&quot;: &quot;Michel&quot;, &quot;appraisedValue&quot;: 800&#125;#]# 测试网络搭建成功# 关闭网络./network.sh down \n\n编写自己的链码cd /usr/local/hyperledger/fabric-samples/asset-transfer-basicmkdir atcc &amp;&amp; cd atccgo mod init atcctouch atcc.go\n链码内容如下\npackage mainimport (\t&quot;encoding/json&quot;\t&quot;fmt&quot;\t&quot;log&quot;\t&quot;github.com/hyperledger/fabric-contract-api-go/contractapi&quot;)// SmartContract provides functions for managing an Assettype SmartContract struct &#123;\tcontractapi.Contract&#125;// Asset describes basic details of what makes up a simple assettype Asset struct &#123;\tID             string `json:&quot;ID&quot;`\tOwner          string `json:&quot;owner&quot;`\tValue          int    `json:&quot;Value&quot;`&#125;// InitLedger adds a base set of assets to the ledgerfunc (s *SmartContract) InitLedger(ctx contractapi.TransactionContextInterface) error &#123;\tassets := []Asset&#123;\t\t&#123;ID: &quot;asset1&quot;, Owner: &quot;ZhangSan&quot;, Value: 300&#125;,\t\t&#123;ID: &quot;asset2&quot;, Owner: &quot;LiSi&quot;, Value: 400&#125;,\t\t&#123;ID: &quot;asset3&quot;, Owner: &quot;Klay&quot;, Value: 500&#125;,\t&#125;\tfor _, asset := range assets &#123;\t\tassetJSON, err := json.Marshal(asset)\t\tif err != nil &#123;\t\t\treturn err\t\t&#125;\t\terr = ctx.GetStub().PutState(asset.ID, assetJSON)\t\tif err != nil &#123;\t\t\treturn fmt.Errorf(&quot;failed to put to world state. %v&quot;, err)\t\t&#125;\t&#125;\treturn nil&#125;// CreateAsset issues a new asset to the world state with given details.func (s *SmartContract) CreateAsset(ctx contractapi.TransactionContextInterface, id string, owner string, Value int) error &#123;\texists, err := s.AssetExists(ctx, id)\tif err != nil &#123;\t\treturn err\t&#125;\tif exists &#123;\t\treturn fmt.Errorf(&quot;the asset %s already exists&quot;, id)\t&#125;\tasset := Asset&#123;\t\tID:             id,\t\tOwner:          owner,\t\tValue:          Value,\t&#125;\tassetJSON, err := json.Marshal(asset)\tif err != nil &#123;\t\treturn err\t&#125;\treturn ctx.GetStub().PutState(id, assetJSON)&#125;// ReadAsset returns the asset stored in the world state with given id.func (s *SmartContract) ReadAsset(ctx contractapi.TransactionContextInterface, id string) (*Asset, error) &#123;\tassetJSON, err := ctx.GetStub().GetState(id)\tif err != nil &#123;\t\treturn nil, fmt.Errorf(&quot;failed to read from world state: %v&quot;, err)\t&#125;\tif assetJSON == nil &#123;\t\treturn nil, fmt.Errorf(&quot;the asset %s does not exist&quot;, id)\t&#125;\tvar asset Asset\terr = json.Unmarshal(assetJSON, &amp;asset)\tif err != nil &#123;\t\treturn nil, err\t&#125;\treturn &amp;asset, nil&#125;// UpdateAsset updates an existing asset in the world state with provided parameters.func (s *SmartContract) UpdateAsset(ctx contractapi.TransactionContextInterface, id string, owner string, Value int) error &#123;\texists, err := s.AssetExists(ctx, id)\tif err != nil &#123;\t\treturn err\t&#125;\tif !exists &#123;\t\treturn fmt.Errorf(&quot;the asset %s does not exist&quot;, id)\t&#125;\t// overwriting original asset with new asset\tasset := Asset&#123;\t\tID:             id,\t\tOwner:          owner,\t\tValue:          Value,\t&#125;\tassetJSON, err := json.Marshal(asset)\tif err != nil &#123;\t\treturn err\t&#125;\treturn ctx.GetStub().PutState(id, assetJSON)&#125;// DeleteAsset deletes an given asset from the world state.func (s *SmartContract) DeleteAsset(ctx contractapi.TransactionContextInterface, id string) error &#123;\texists, err := s.AssetExists(ctx, id)\tif err != nil &#123;\t\treturn err\t&#125;\tif !exists &#123;\t\treturn fmt.Errorf(&quot;the asset %s does not exist&quot;, id)\t&#125;\treturn ctx.GetStub().DelState(id)&#125;// AssetExists returns true when asset with given ID exists in world statefunc (s *SmartContract) AssetExists(ctx contractapi.TransactionContextInterface, id string) (bool, error) &#123;\tassetJSON, err := ctx.GetStub().GetState(id)\tif err != nil &#123;\t\treturn false, fmt.Errorf(&quot;failed to read from world state: %v&quot;, err)\t&#125;\treturn assetJSON != nil, nil&#125;// TransferAsset updates the owner field of asset with given id in world state.func (s *SmartContract) TransferAsset(ctx contractapi.TransactionContextInterface, id string, newOwner string) error &#123;\tasset, err := s.ReadAsset(ctx, id)\tif err != nil &#123;\t\treturn err\t&#125;\tasset.Owner = newOwner\tassetJSON, err := json.Marshal(asset)\tif err != nil &#123;\t\treturn err\t&#125;\treturn ctx.GetStub().PutState(id, assetJSON)&#125;// GetAllAssets returns all assets found in world statefunc (s *SmartContract) GetAllAssets(ctx contractapi.TransactionContextInterface) ([]*Asset, error) &#123;\t// range query with empty string for startKey and endKey does an\t// open-ended query of all assets in the chaincode namespace.\tresultsIterator, err := ctx.GetStub().GetStateByRange(&quot;&quot;, &quot;&quot;)\tif err != nil &#123;\t\treturn nil, err\t&#125;\tdefer resultsIterator.Close()\tvar assets []*Asset\tfor resultsIterator.HasNext() &#123;\t\tqueryResponse, err := resultsIterator.Next()\t\tif err != nil &#123;\t\t\treturn nil, err\t\t&#125;\t\tvar asset Asset\t\terr = json.Unmarshal(queryResponse.Value, &amp;asset)\t\tif err != nil &#123;\t\t\treturn nil, err\t\t&#125;\t\tassets = append(assets, &amp;asset)\t&#125;\treturn assets, nil&#125;func main() &#123;\tassetChaincode, err := contractapi.NewChaincode(&amp;SmartContract&#123;&#125;)\tif err != nil &#123;\t\tlog.Panicf(&quot;Error creating asset-transfer-basic chaincode: %v&quot;, err)\t&#125;\tif err := assetChaincode.Start(); err != nil &#123;\t\tlog.Panicf(&quot;Error starting asset-transfer-basic chaincode: %v&quot;, err)\t&#125;&#125;\n处理项目依赖\ngo mod tidygo mod vendor\n\n\n使用测试网络进行链码部署当前位置：/usr/local/hyperledger/fabric-samples/test-network\n./network.sh down./network.sh up createChannel# 注意下面那个尖括号的玩意要替换为自定义的链码文件夹名，设为环境变量只是为了方便操作，比如我这里就要换为export CHAINCODE_NAME=atccexport CHAINCODE_NAME=&lt;chaincode-name&gt;peer lifecycle chaincode package 打包后的压缩包名.tar.gz --path ../asset-transfer-basic/$CHAINCODE_NAME/ --lang golang --label atcc_1.0 peer lifecycle chaincode package $CHAINCODE_NAME.tar.gz \\--path ../asset-transfer-basic/$CHAINCODE_NAME/ \\ #注意替换链码文件路径--lang golang \\--label &lt;chaincode-name&gt;_1.0 #注意替换&lt;chaincode-name&gt;内容\n\n\n\n./network.sh down./network.sh up createChannelexport CHAINCODE_NAME=flower_fabricpeer lifecycle chaincode package $CHAINCODE_NAME.tar.gz --path $CHAINCODE_NAME/ --lang golang --label flower_fabric_1.0 export CORE_PEER_TLS_ENABLED=trueexport CORE_PEER_LOCALMSPID=&quot;Org1MSP&quot;export CORE_PEER_TLS_ROOTCERT_FILE=$&#123;PWD&#125;/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crtexport CORE_PEER_MSPCONFIGPATH=$&#123;PWD&#125;/organizations/peerOrganizations/org1.example.com/users/Admin@org1.example.com/mspexport CORE_PEER_ADDRESS=localhost:7051peer lifecycle chaincode install $CHAINCODE_NAME.tar.gzexport CORE_PEER_LOCALMSPID=&quot;Org2MSP&quot;export CORE_PEER_TLS_ROOTCERT_FILE=$&#123;PWD&#125;/organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crtexport CORE_PEER_TLS_ROOTCERT_FILE=$&#123;PWD&#125;/organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crtexport CORE_PEER_MSPCONFIGPATH=$&#123;PWD&#125;/organizations/peerOrganizations/org2.example.com/users/Admin@org2.example.com/mspexport CORE_PEER_ADDRESS=localhost:9051peer lifecycle chaincode install $CHAINCODE_NAME.tar.gz# 查询包IDpeer lifecycle chaincode queryinstalledexport CC_PACKAGE_ID=&lt;Package ID&gt; #注意替换这里的链码包IDexport CC_PACKAGE_ID=atcc_1.0:5657426d49d01aadeaabfd8ea13fa7f431931702f534120335ead5acd107e8cdpeer lifecycle chaincode approveformyorg \\-o localhost:7050 \\--ordererTLSHostnameOverride orderer.example.com \\--channelID mychannel \\--name $CHAINCODE_NAME \\--version 1.0 \\--package-id $CC_PACKAGE_ID \\--sequence 1 \\--tls \\--cafile $&#123;PWD&#125;/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pemexport CORE_PEER_LOCALMSPID=&quot;Org1MSP&quot;export CORE_PEER_MSPCONFIGPATH=$&#123;PWD&#125;/organizations/peerOrganizations/org1.example.com/users/Admin@org1.example.com/mspexport CORE_PEER_TLS_ROOTCERT_FILE=$&#123;PWD&#125;/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crtexport CORE_PEER_ADDRESS=localhost:7051peer lifecycle chaincode approveformyorg \\-o localhost:7050 \\--ordererTLSHostnameOverride orderer.example.com \\--channelID mychannel \\--name $CHAINCODE_NAME \\--version 1.0 \\--package-id $CC_PACKAGE_ID \\--sequence 1 \\--tls \\--cafile $&#123;PWD&#125;/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pempeer lifecycle chaincode checkcommitreadiness \\--channelID mychannel \\--name $CHAINCODE_NAME \\--version 1.0 \\--sequence 1 \\--tls \\--cafile $&#123;PWD&#125;/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem \\--output jsonpeer lifecycle chaincode commit \\-o localhost:7050 \\--ordererTLSHostnameOverride orderer.example.com \\--channelID mychannel \\--name $CHAINCODE_NAME \\--version 1.0 \\--sequence 1 \\--tls \\--cafile $&#123;PWD&#125;/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem \\--peerAddresses localhost:7051 \\--tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt \\--peerAddresses localhost:9051 \\--tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crtpeer lifecycle chaincode querycommitted \\--channelID mychannel \\--name $CHAINCODE_NAME \\--cafile $&#123;PWD&#125;/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pemecho &quot;链码安装完毕，下面为测试代码&quot;peer chaincode invoke \\-o localhost:7050 \\--ordererTLSHostnameOverride orderer.example.com \\--tls \\--cafile $&#123;PWD&#125;/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem \\-C mychannel \\-n $CHAINCODE_NAME \\--peerAddresses localhost:7051 \\--tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt \\--peerAddresses localhost:9051 \\--tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt \\-c &#x27;&#123;&quot;function&quot;:&quot;initLedger&quot;,&quot;Args&quot;:[]&#125;&#x27;peer chaincode query \\-C mychannel \\-n $CHAINCODE_NAME \\-c &#x27;&#123;&quot;Args&quot;:[&quot;getAllAssets&quot;]&#125;&#x27;\n记录一下我自己的链码的测试代码peer chaincode invoke \\-o localhost:7050 \\--ordererTLSHostnameOverride orderer.example.com \\--tls \\--cafile $&#123;PWD&#125;/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem \\-C mychannel \\-n $CHAINCODE_NAME \\--peerAddresses localhost:7051 \\--tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt \\--peerAddresses localhost:9051 \\--tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt \\-c &#x27;&#123;&quot;function&quot;:&quot;CreateWallet&quot;,&quot;Args&quot;:[&quot;1&quot;]&#125;&#x27;peer chaincode query \\-C mychannel \\-n $CHAINCODE_NAME \\-c &#x27;&#123;&quot;Args&quot;:[&quot;getAllWallets&quot;]&#125;&#x27;peer chaincode invoke \\-o localhost:7050 \\--ordererTLSHostnameOverride orderer.example.com \\--tls \\--cafile $&#123;PWD&#125;/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem \\-C mychannel \\-n $CHAINCODE_NAME \\--peerAddresses localhost:7051 \\--tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt \\--peerAddresses localhost:9051 \\--tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt \\-c &#x27;&#123;&quot;function&quot;:&quot;UpdateWalletIntegral&quot;,&quot;Args&quot;:[&quot;1&quot;,&quot;20&quot;,&quot;a&quot;]&#125;&#x27;peer chaincode query \\-C mychannel \\-n $CHAINCODE_NAME \\-c &#x27;&#123;&quot;Args&quot;:[&quot;getAllWallets&quot;]&#125;&#x27;peer chaincode query \\-C mychannel \\-n $CHAINCODE_NAME \\-c &#x27;&#123;&quot;Args&quot;:[&quot;ReadWallet&quot;,&quot;1&quot;]&#125;&#x27;peer chaincode query \\-C mychannel \\-n $CHAINCODE_NAME \\-c &#x27;&#123;&quot;Args&quot;:[&quot;ReadHistory&quot;,&quot;1&quot;]&#125;&#x27;peer chaincode invoke \\-o localhost:7050 \\--ordererTLSHostnameOverride orderer.example.com \\--tls \\--cafile $&#123;PWD&#125;/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem \\-C mychannel \\-n $CHAINCODE_NAME \\--peerAddresses localhost:7051 \\--tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt \\--peerAddresses localhost:9051 \\--tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt \\-c &#x27;&#123;&quot;function&quot;:&quot;initLedger&quot;,&quot;Args&quot;:[]&#125;&#x27;\n","categories":["区块链","运维"]},{"title":"CSDN文章完美粘贴到Hexo上","url":"/2023/01/01/CSDN%E6%96%87%E7%AB%A0%E5%AE%8C%E7%BE%8E%E7%B2%98%E8%B4%B4%E5%88%B0Hexo%E4%B8%8A/","content":"完美将csdn的md(包括图片)复制到hexo上其实主要就是复制图片，因为csdn有防盗链，自己的hexo上不能拉取csdn上的图片资源\n1. 安装TyporaTypora作为本地的md编辑器，有在复制网络图片时，直接将其保存到本地的能力，我们可以利用这个实现链接：安装包及补丁百度网盘\n2.配置typora首先我们用typora，打开hexo的source/_posts目录，方便测试\n把图片保存路径指定到本地hexo项目的../article_images/$&#123;filename&#125;下面，这样当你在typora里编辑posts里的md时，进行图片粘贴时，图片会保存在article_images里的文章同名文件夹下\n下面展示了粘贴到Typora里的效果有水印是个败笔，但我懒得弄图床或者OSS了，评价是能用就行\n3.全文复制将CSDN的文章全选复制粘贴到typora里打开的posts目录里的md即可注意hexo的md顶部的yml配置还是保留一下\n注意不要在typora的源代码模式下进行粘贴，不然不会将网图保存到本地\n\n4.部署看看效果hexo server\n\n","categories":["trick"],"tags":["hexo"]},{"title":"6.5840-lab2-raft记录","url":"/2023/02/25/6-5840-raft-lab2%E8%AE%B0%E5%BD%95/","content":"2a2blab2a主要是完成日志选举和心跳机制只需要修改/src/raft/raft.go中的内容\n\n可交互的raft\ngoland的代码自动格式化测试结果如下\n\n考虑测试中有一些不确定因素，可以考虑使用课程助教提供的实现反复测试的脚本，链接在此。使用方法：100表示执行100次，4表示4个tester子进程测试\n./test-many.sh 100 4 2A\n\n代码如下\npackage raftimport (\t&quot;math/rand&quot;\t&quot;sync&quot;\t&quot;sync/atomic&quot;\t&quot;time&quot;\t//\t&quot;6.5840/labgob&quot;\t&quot;6.5840/labrpc&quot;)type state int// 自定义常量const (\tFOLLOWER = iota\tCANDIDATE\tLEADER)const (\tTimeOut = iota\tVoteDone\tVoteSuccess)const (\tINIT_TERM              = 0 //初始的任期\tNULL                   = -1\tVOTE_NOBODY            = -1\tHEARTBEAT_GAP          = 130  //心跳间隔(ms)\tELECTION_TIMEOUT_FLOOR = 700  //选举超时时间下限(ms)\tELECTION_TIMEOUT_CEIL  = 1000 //选举超时时间上限(ms)\tRETRY_NUM              = 1    //3次超时重试\tELECTION_DURATION      = 3000)type ApplyMsg struct &#123;\tCommandValid bool\tCommand      interface&#123;&#125;\tCommandIndex int\t// For 2D:\tSnapshotValid bool\tSnapshot      []byte\tSnapshotTerm  int\tSnapshotIndex int&#125;type Entry struct &#123;&#125;// Raft// A Go object implementing a single Raft peer.type Raft struct &#123;\tmu        sync.Mutex          // Lock to protect shared access to this peer&#x27;s state\tpeers     []*labrpc.ClientEnd // RPC end points of all peers\tpersister *Persister          // Object to hold this peer&#x27;s persisted state\tme        int                 // this peer&#x27;s index into peers[]\tdead      int32               // set by Kill()\t// Your data here (2A, 2B, 2C).\t// Look at the paper&#x27;s Figure 2 for a description of what\t// state a Raft server must maintain.F\tcurTerm         int           //当前结点任期\tvotedFor        int           //给谁投了票\tcurState        state         //当前状态\tmsgHandler      chan ApplyMsg //处理传入的请求\telectionTimeout int64         //本结点的选举超时时间\tlogs            []Entry       //日志\tticketGot int //选举阶段获得的票数\ttimeLastReceiveHeartBeat time.Time //上一次收到心跳的时间\ttimeLastSendHeartBeat    time.Time //作为leader上一次发送心跳的时间\ttimeStartElection        time.Time //选举开始时间&#125;// GetState// return currentTerm and whether this server// believes it is the leader.func (rf *Raft) GetState() (int, bool) &#123;\t// Your code here (2A).\trf.mu.Lock()\tdefer rf.mu.Unlock()\treturn rf.curTerm, rf.curState == LEADER&#125;func (rf *Raft) persist() &#123;\t// Your code here (2C).\t// Example:\t// w := new(bytes.Buffer)\t// e := labgob.NewEncoder(w)\t// e.Encode(rf.xxx)\t// e.Encode(rf.yyy)\t// raftstate := w.Bytes()\t// rf.persister.Save(raftstate, nil)&#125;// restore previously persisted state.func (rf *Raft) readPersist(data []byte) &#123;\tif data == nil || len(data) &lt; 1 &#123; // bootstrap without any state?\t\treturn\t&#125;\t// Your code here (2C).\t// Example:\t// r := bytes.NewBuffer(data)\t// d := labgob.NewDecoder(r)\t// var xxx\t// var yyy\t// if d.Decode(&amp;xxx) != nil ||\t//    d.Decode(&amp;yyy) != nil &#123;\t//   error...\t// &#125; else &#123;\t//   rf.xxx = xxx\t//   rf.yyy = yyy\t// &#125;&#125;// Snapshot// the service says it has created a snapshot that has// all info up to and including index. this means the// service no longer needs the log through (and including)// that index. Raft should now trim its log as much as possible.func (rf *Raft) Snapshot(index int, snapshot []byte) &#123;\t// Your code here (2D).&#125;type ReqVoteArgs struct &#123;\t// Your data here (2A, 2B).\tCandidateID   int\tCandidateTerm int&#125;type ReqVoteReply struct &#123;\t// Your data here (2A).\tVoteGranted  bool\tFollowerTerm int&#125;type ReqAppendEntriesArgs struct &#123;\tLeaderTerm int\tLeaderID   int&#125;type ReqAppendEntriesReply struct &#123;\tSuccess      bool\tFollowerTerm int&#125;func (rf *Raft) beFollower(newTerm int) &#123;\t//fmt.Printf(&quot;结点 %d 之前的身份是%d\\n&quot;, rf.me, rf.curState)\trf.curTerm = newTerm\trf.curState = FOLLOWER\trf.votedFor = VOTE_NOBODY\trf.refreshElectionTimer()\trf.refreshSendHeartBeatTimer()&#125;func (rf *Raft) beCandidate() &#123;\t// 可能会变多次\tif rf.curState != CANDIDATE &#123;\t\t// 任期+1\t\t//fmt.Printf(&quot;结点 %d 任期+1\\n&quot;, rf.me)\t\trf.curTerm += 1\t\t//变状态\t\trf.curState = CANDIDATE\t&#125;\t// 先给自己投票，防止待会给别人投了\trf.votedFor = rf.me\t// 初始化自己的票数\trf.ticketGot = 1&#125;func (rf *Raft) beLeader() &#123;\trf.curState = LEADER\trf.votedFor = VOTE_NOBODY\t// 这里不用重置，让马上发心跳\t// rf.timeLastSendHeartBeat = time.Now()&#125;// 异步发消息func (rf *Raft) sendAndHandleRequestVote(server int) &#123;\trf.mu.Lock()\ttmpTerm := rf.curTerm\trf.mu.Unlock()\treqArgs := ReqVoteArgs&#123;\t\tCandidateID:   rf.me,\t\tCandidateTerm: tmpTerm,\t&#125;\treply := ReqVoteReply&#123;&#125;\t// 重试发请求\tok := false\ttmpRetryNum := 0\tfor ok == false &amp;&amp; tmpRetryNum &lt; RETRY_NUM &#123;\t\tok = rf.peers[server].Call(&quot;Raft.HandleVote&quot;, &amp;reqArgs, &amp;reply)\t\ttmpRetryNum += 1\t&#125;\trf.mu.Lock()\tif ok == false &#123;\t\t//fmt.Printf(&quot;结点 %d 发请求给 %d 失败\\n&quot;, reqArgs.CandidateID, server)\t\t// 对方结点宕机也算没同意投票\t&#125; else &#123;\t\tif rf.curState == CANDIDATE &#123;\t\t\t// 别人同意投票\t\t\tif reply.VoteGranted &#123;\t\t\t\t// 可能会有很久以前的请求，需要丢弃他们\t\t\t\tif reply.FollowerTerm &lt; rf.curTerm &#123;\t\t\t\t\t//不处理\t\t\t\t&#125; else if reply.FollowerTerm == rf.curTerm &#123;\t\t\t\t\trf.ticketGot += 1\t\t\t\t\t// 查看投票结果，超过结点数一半就算赢\t\t\t\t\t//log.Printf(&quot;结点 %d 当前票数：%d/%d\\n&quot;, rf.me, rf.ticketGot, len(rf.peers))\t\t\t\t\tif rf.ticketGot*2 &gt; len(rf.peers) &#123;\t\t\t\t\t\t//log.Printf(&quot;------结点 %d(%d) : 变成leader------\\n&quot;, rf.me, rf.curTerm)\t\t\t\t\t\trf.beLeader()\t\t\t\t\t&#125;\t\t\t\t&#125;\t\t\t&#125; else &#123;\t\t\t\t// 我out了\t\t\t\tif reply.FollowerTerm &gt; rf.curTerm &#123;\t\t\t\t\trf.beFollower(reply.FollowerTerm)\t\t\t\t\trf.mu.Unlock()\t\t\t\t&#125; else &#123;\t\t\t\t\t//不处理\t\t\t\t&#125;\t\t\t&#125;\t\t&#125;\t&#125;\trf.mu.Unlock()&#125;func (rf *Raft) HandleVote(args *ReqVoteArgs, reply *ReqVoteReply) &#123;\t// Your code here (2A, 2B).\t//log.Printf(&quot;结点(id:%d,term:%d)收到(id:%d,term:%d)的投票请求\\n&quot;, rf.me, rf.curTerm, args.CandidateID, args.CandidateTerm)\trf.mu.Lock()\tif rf.curTerm &gt; args.CandidateTerm &#123;\t\t//不投票\t\treply.VoteGranted = false\t\treply.FollowerTerm = rf.curTerm\t\t//log.Printf(&quot;拒绝&quot;)\t&#125; else if rf.curTerm &lt; args.CandidateTerm &#123;\t\t// 投票\t\treply.VoteGranted = true\t\treply.FollowerTerm = args.CandidateTerm\t\t//log.Printf(&quot;同意&quot;)\t\trf.beFollower(args.CandidateTerm)\t\trf.votedFor = args.CandidateID\t&#125; else &#123;\t\t// 先投票\t\tif rf.votedFor == VOTE_NOBODY || rf.votedFor == args.CandidateID &#123;\t\t\treply.VoteGranted = true\t\t\treply.FollowerTerm = args.CandidateTerm\t\t\t//log.Printf(&quot;同意\\n&quot;)\t\t\trf.beFollower(args.CandidateTerm)\t\t\trf.votedFor = args.CandidateID\t\t&#125;\t&#125;\trf.mu.Unlock()&#125;// 选举超过一段时间后的操作func (rf *Raft) electionTimer() &#123;\ttime.Sleep(time.Duration(ELECTION_DURATION) * time.Millisecond)\trf.mu.Lock()\tif rf.curState == CANDIDATE &#123;\t\trf.beFollower(rf.curTerm - 1)\t&#125;\trf.mu.Unlock()&#125;// 异步发心跳func (rf *Raft) sendAppendEntries(server int) &#123;\trf.mu.Lock()\ttmpTerm := rf.curTerm\trf.mu.Unlock()\treqArgs := ReqAppendEntriesArgs&#123;\t\tLeaderTerm: tmpTerm,\t\tLeaderID:   rf.me,\t&#125;\treply := ReqAppendEntriesReply&#123;&#125;\t// 重试发请求\tok := false\ttmpRetryNum := 0\tfor ok == false &amp;&amp; tmpRetryNum &lt; RETRY_NUM &#123;\t\tok = rf.peers[server].Call(&quot;Raft.HandleAppendEntries&quot;, &amp;reqArgs, &amp;reply)\t\ttmpRetryNum += 1\t&#125;\tif ok &#123;\t\trf.mu.Lock()\t\tif reply.Success &#123;\t\t&#125; else &#123;\t\t\trf.beFollower(reply.FollowerTerm)\t\t&#125;\t\trf.mu.Unlock()\t&#125;&#125;func (rf *Raft) HandleAppendEntries(args *ReqAppendEntriesArgs, reply *ReqAppendEntriesReply) &#123;\t// Your code here (2A, 2B).\trf.mu.Lock()\t//fmt.Printf(&quot;结点 (%d,%d) 收到结点 (%d,%d) 的心跳\\n&quot;, rf.me, rf.curTerm, args.LeaderID, args.LeaderTerm)\tif rf.curTerm &gt; args.LeaderTerm &#123;\t\treply.FollowerTerm = rf.curTerm\t\treply.Success = false\t&#125; else &#123;\t\trf.beFollower(args.LeaderTerm)\t\treply.FollowerTerm = args.LeaderTerm\t\treply.Success = true\t\t//log.Printf(&quot;结点 %d 重置心跳\\n&quot;, rf.me)\t&#125;\trf.mu.Unlock()&#125;func (rf *Raft) Start(command interface&#123;&#125;) (int, int, bool) &#123;\tindex := -1\tterm := -1\tisLeader := true\t//if isLeader ==false&#123;\t//\treturn NULL,NULL,false\t//&#125;\t// Your code here (2B).\treturn index, term, isLeader&#125;func (rf *Raft) Kill() &#123;\tatomic.StoreInt32(&amp;rf.dead, 1)\t// Your code here, if desired.&#125;func (rf *Raft) killed() bool &#123;\tz := atomic.LoadInt32(&amp;rf.dead)\treturn z == 1&#125;// 选举和发送心跳计时器func (rf *Raft) ticker() &#123;\tfor rf.killed() == false &#123;\t\t// pause for a random amount of time between 50 and 350 milliseconds.\t\t// 稍微卡一下时间\t\tms := 50 + (rand.Int63() % 50)\t\ttime.Sleep(time.Duration(ms) * time.Millisecond)\t\t// Your code here (2A)\t\t// Check if a leader election should be started.\t\trf.mu.Lock()\t\t// 只有follower才会想抢\t\tif rf.curState == FOLLOWER &#123;\t\t\t// 心跳超时,开始选举\t\t\t//fmt.Printf(&quot;节点%d距上一次心跳%d,预设超时为%d\\n&quot;, rf.me, time.Now().Sub(rf.timeLastReceiveHeartBeat).Milliseconds(), rf.electionTimeout)\t\t\tif time.Now().Sub(rf.timeLastReceiveHeartBeat).Milliseconds() &gt; rf.electionTimeout &#123;\t\t\t\trf.beCandidate()\t\t\t\t//log.Printf(&quot;结点%d开始选举,term:%d\\n&quot;, rf.me, rf.curTerm)\t\t\t\t// 广播投票请求\t\t\t\tfor serverID := range rf.peers &#123;\t\t\t\t\tif serverID == rf.me &#123;\t\t\t\t\t\tcontinue\t\t\t\t\t&#125;\t\t\t\t\tgo rf.sendAndHandleRequestVote(serverID)\t\t\t\t&#125;\t\t\t\tgo rf.electionTimer()\t\t\t&#125;\t\t&#125; else if rf.curState == LEADER &#123;\t\t\t//leader发心跳\t\t\t//fmt.Printf(&quot;leader结点%d发心跳\\n&quot;, rf.me)\t\t\t//fmt.Printf(&quot;leader距上一次心跳%v，阈值%v\\n&quot;, time.Now().Sub(rf.timeLastSendHeartBeat).Milliseconds(), HEARTBEAT_GAP)\t\t\tif time.Now().Sub(rf.timeLastSendHeartBeat).Milliseconds() &gt; HEARTBEAT_GAP &#123;\t\t\t\tfor idx := range rf.peers &#123;\t\t\t\t\tif idx == rf.me &#123;\t\t\t\t\t\tcontinue\t\t\t\t\t&#125;\t\t\t\t\tgo rf.sendAppendEntries(idx)\t\t\t\t&#125;\t\t\t\t//重置计时\t\t\t\trf.refreshSendHeartBeatTimer()\t\t\t&#125;\t\t&#125;\t\trf.mu.Unlock()\t&#125;&#125;func (rf *Raft) refreshElectionTimer() &#123;\trf.timeLastReceiveHeartBeat = time.Now()&#125;func (rf *Raft) refreshSendHeartBeatTimer() &#123;\trf.timeLastSendHeartBeat = time.Now()&#125;func Make(peers []*labrpc.ClientEnd, me int,\tpersister *Persister, applyCh chan ApplyMsg) *Raft &#123;\trf := &amp;Raft&#123;&#125;\trf.peers = peers\trf.persister = persister\trf.me = me\t// Your initialization code here (2A, 2B, 2C).\trf.logs = make([]Entry, 1024)\trf.msgHandler = applyCh\trf.electionTimeout = int64(ELECTION_TIMEOUT_FLOOR + rand.Intn(ELECTION_TIMEOUT_CEIL-ELECTION_TIMEOUT_FLOOR))\t//fmt.Printf(&quot;超时时间为%d\\n&quot;, rf.electionTimeout)\trf.beFollower(INIT_TERM)\t// initialize from state persisted before a crash\trf.readPersist(persister.ReadRaftState())\t// start ticker goroutine to start elections\tgo rf.ticker()\treturn rf&#125;内容","categories":["6.584"],"tags":["分布式计算","Go"]},{"title":"C语言的OJ判题机设计与实现","url":"/2024/06/04/C%E8%AF%AD%E8%A8%80%E7%9A%84OJ%E5%88%A4%E9%A2%98%E6%9C%BA%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/","content":"1. 接收判题入参判题需要作答代码、测试输入和期望输出、编译器名称、时空限制。对于支持special judge的还需要传入是否为sj和sj代码。推荐使用消息队列，应对高并发的比赛情况会比较好。但是消息队列是异步的，我为了快点实现能提交后在当前页面获得判题结果，就单纯的用了rpc+nginx负载均衡，不过我觉得如果要实现当场获得判题结果，也可以mq+websocket\n2.  编写判题镜像我的设计是一个镜像对应一个编译器，好处是方便对于每个语言的编译运行做独立的修改，坏处是因为镜像基于Ubuntu容器，至少也有1.7G的大小下面为我的judger:base包的dockerfile，因为我需要python进行special judge，c进行判题，所以安装了gcc和python\n# 使用基础镜像， UbuntuFROM ubuntu:latestENV DEBIAN_FRONTEND=noninteractive# 安装所需的编译器和其他依赖项RUN apt-get update &amp;&amp; apt-get install -y \\    build-essential \\    libssl-dev \\    zlib1g-dev \\    libbz2-dev \\    libreadline-dev \\    libsqlite3-dev \\    llvm \\    libncurses5-dev \\    libncursesw5-dev \\    xz-utils \\    tk-dev \\    libffi-dev \\    liblzma-dev \\    python3-openssl \\    python3-pip \\    wget# 将本地的 Python 压缩包复制到容器中COPY Python-3.8.12.tar.xz .# 解压 Python 压缩包并进行安装# RUN wget https://www.python.org/ftp/python/3.8.12/Python-3.8.12.tar.xz &amp;&amp;RUN tar -xf Python-3.8.12.tar.xz &amp;&amp; \\\tcd Python-3.8.12 &amp;&amp; \\    ./configure --enable-optimizations &amp;&amp; \\    make -j$(nproc) &amp;&amp; \\    make altinstall# 删除临时文件RUN rm -f Python-3.8.12.tar.xz# 方便直接执行pythonRUN ln Python-3.8.12/python /usr/bin/python# 设置容器启动时的默认命令CMD [&quot;bash&quot;]\n2.1 编写判题脚本我的是先在判题服务上选择启动对应的判题容器，然后将测试输入和期望输出以及代码保存到本地，然后将测试数量和时空限制传入判题机，所以c语言只需要接收这几个，向容器中传入的方面便是环境变量。go操作docker的操作如下\nimport (\t&quot;context&quot;\t&quot;fmt&quot;\t&quot;github.com/docker/docker/api/types/container&quot;\t&quot;github.com/docker/docker/api/types/image&quot;\t&quot;github.com/docker/docker/api/types/mount&quot;\t&quot;github.com/docker/docker/client&quot;)func getClient() *client.Client&#123;\tcli, err := client.NewClientWithOpts(client.WithHost(&quot;tcp://localhost:2375&quot;), client.WithVersion(&quot;1.44&quot;))\tif err != nil &#123;\t\tpanic(err)\t&#125;\treturn cli&#125;func Run(params *JudgeParams,compiler string,dataDir string)&#123;\tcli := getClient()\tctx :=context.Background()\tenv := []string&#123;\t\tfmt.Sprintf(&quot;special=%d&quot;, params.Special),\t\tfmt.Sprintf(&quot;timelimit=%d&quot;, params.TimeLimit),\t\tfmt.Sprintf(&quot;memorylimit=%d&quot;, params.MemoryLimit),\t\tfmt.Sprintf(&quot;casenum=%d&quot;, params.CaseNum),\t&#125;\t// 准备配置,单位是毫秒-&gt;秒，再两倍\ttimeout := int(params.TimeLimit)/500\tconfig := &amp;container.Config&#123;\t\tImage: fmt.Sprintf(&quot;judger:%s&quot;,compiler), \t\tEnv:   env,\t\tStopTimeout: &amp;timeout,\t&#125;\t// 准备 HostConfig，设置挂载点\thostConfig := &amp;container.HostConfig&#123;\t\tMounts: []mount.Mount&#123;\t\t\t&#123;\t\t\t\tType:   mount.TypeBind,\t\t\t\tSource: dataDir,\t\t\t\tTarget: &quot;/app/data&quot;,\t\t\t&#125;,\t\t&#125;,\t&#125;\t// 创建容器\tcont, err := cli.ContainerCreate(ctx, config, hostConfig, nil, nil, &quot;&quot;)\tif err != nil &#123;\t\tpanic(err)\t&#125;\t// 启动容器\tif err := cli.ContainerStart(ctx, cont.ID, container.StartOptions&#123;&#125;); err != nil &#123;\t\tpanic(err)\t&#125;\tfmt.Printf(&quot;Container %s started.\\n&quot;, cont.ID)    // 等待结束\tstatusCh, errCh := cli.ContainerWait(ctx, cont.ID, container.WaitConditionNotRunning)\tselect &#123;\tcase err := &lt;-errCh:\t    if err != nil &#123;\t        fmt.Println(err)\t    &#125;\tcase status := &lt;-statusCh:\t    fmt.Println(&quot;Container exited with status:&quot;, status.StatusCode)\t&#125;\t//删除容器\tcli.ContainerRemove(ctx,cont.ID,container.RemoveOptions&#123;\t\t// Force: true,\t&#125;)&#125;\n所以在传入这些参数之后，镜像内的c语言进行接收，注意需要从字符串转换\nint main(int argc,char **argv) &#123;    int isSpecial = atoi(getenv(&quot;special&quot;));    int testCaseNum = atoi(getenv(&quot;casenum&quot;));    int timeLimit = atoi(getenv(&quot;timelimit&quot;));    int memoryLimit = atoi(getenv(&quot;memorylimit&quot;));    ...\n接着便是正式判题\n可以看到即使通过Docker开辟了独立的容器空间，但内部还是要通过fork来限制程序运行的时空。\n2.2 forkfork开辟子进程\npid_t pid = fork();if(pid&lt;0)&#123;    printf(&quot;error in fork!\\n&quot;);    result-&gt;status = WRONG_ANSWER;    result-&gt;log = &quot;无法创建新进程&quot;;    return;&#125;// 父进程监听if(pid&gt;0)&#123;    monitor(pid, timeLimit, memoryLimit, result);&#125;else&#123;//子进程运行    setProcessLimit(timeLimit,memoryLimit);    _runExe(exeFile,timeLimit,memoryLimit,inputFile,outputFile);&#125;\n限制时空是下面代码，具体为什么有两个限制内存的，我也不知道，unix的api我一点不会，java选手嗯造c语言\n// ms kbvoid setProcessLimit(const int timelimit, const int memory_limit) &#123;    struct rlimit rl;    /* set the time_limit (second)*/    rl.rlim_cur = timelimit / 1000;    rl.rlim_max = rl.rlim_cur + 1;    setrlimit(RLIMIT_CPU, &amp;rl);    /* set the memory_limit (b)*/    rl.rlim_cur = memory_limit * 1024;    rl.rlim_max = rl.rlim_cur;    setrlimit(RLIMIT_DATA, &amp;rl);    rl.rlim_cur = memory_limit * 1024;    rl.rlim_max = rl.rlim_cur;    setrlimit(RLIMIT_AS, &amp;rl);&#125;\n运行可执行程序。通过重定向将输入文件内容作为程序输入，将程序输出传入实际输出文件中。\nvoid _runExe(char *exeFile,long timeLimit, long memoryLimit, char *in, char *out) &#123;    int newstdin = open(in,O_RDWR|O_CREAT,0644);    int newstdout = open(out,O_RDWR|O_CREAT|O_TRUNC,0644);    if (newstdout != -1 &amp;&amp; newstdin != -1)&#123;        dup2(newstdout,fileno(stdout));        dup2(newstdin,fileno(stdin));        char cmd[20];        char *args[] = &#123;&quot;./program&quot;, NULL&#125;;        if (execvp(args[0], args) == -1)&#123;            printf(&quot;====== Failed to start the process! =====\\n&quot;);        &#125;    &#125; else &#123;        printf(&quot;====== Failed to open file! =====\\n&quot;);    &#125;    close(newstdin);    close(newstdout);&#125;\n注意execvp是在运行程序，具体的api细节我不清楚。但是args[0]作为execvp的第一个参数，只是起一个程序名的作用，没啥用，主要还是args作为按空格分隔的多个运行参数，放在execvp的第二个位置。然后第三个参数放NULL就行了。如python的就是char *args[] = &#123;&quot;python&quot;,&quot;main.py&quot;, NULL&#125;;注意不能用system()，这样父进程是捕获不到子进程运行程序的结束状态码的，因为外面还套了一个shell\nchar *args[] = &#123;&quot;./program&quot;, NULL&#125;;if (execvp(args[0], args) == -1)&#123;       printf(&quot;====== Failed to start the process! =====\\n&quot;);&#125;\n还是execvp这个api，如果是python这种解释性脚本语言，他语法错误时不会什么返回-1，直接打印语法错误然后就返回0了，为什么专门提这个呢？看父进程是怎么监听的。\n2.3 父进程我这里使用了rusage和wait4的api来获取子进程的返回结果和运行时空。\nint status;struct rusage ru;// 等待进程结束if (wait4(pid, &amp;status, 0, &amp;ru) == -1)printf(&quot;wait4 failure&quot;);\n因为我们限制了子进程的时空，所以当子进程触碰到阈值后，就会异常终止，下方代码就是判断进入异常终止和正常结束的情况。可以自行理解TERM和EXIT。\n// 异常 if(WIFSIGNALED(status))&#123;        int sig = WTERMSIG(status); &#125;else&#123; //正常结束\t\tint sig = WEXITSTATUS(status);&#125;       \n然后接下来的异常信号量就是我在网上看别人的了，不过也确实能用。\nvoid monitor(pid_t pid, int timeLimit, int memoryLimit, Result *rest) &#123;    int status;    struct rusage ru;    // 等待进程结束    if (wait4(pid, &amp;status, 0, &amp;ru) == -1)printf(&quot;wait4 failure&quot;);    rest-&gt;timeUsed = ru.ru_utime.tv_sec * 1000            + ru.ru_utime.tv_usec / 1000            + ru.ru_stime.tv_sec * 1000            + ru.ru_stime.tv_usec / 1000;    // 另一个可能可行的方案：缺页错误就是使用内存的次数，乘页面大小就是内存占用，java可能用：`ru.ru_minflt * (sysconf(_SC_PAGESIZE) / 1024))` ;    rest-&gt;memoryUsed = ru.ru_maxrss;    // 程序异常中断    if(WIFSIGNALED(status))&#123;        int sig = WTERMSIG(status);        switch (WTERMSIG(status)) &#123;            case SIGSEGV:                if (rest-&gt;memoryUsed &gt; memoryLimit)                    rest-&gt;status = MEMORY_LIMIT_EXCEED;                else                    rest-&gt;status = RUNTIME_ERROR;                break;            case SIGALRM:            case SIGXCPU:                rest-&gt;status = TIME_LIMIT_EXCEED;                break;            default:                rest-&gt;status = RUNTIME_ERROR;                break;        &#125;    &#125; else &#123;        // 注意语法错误和运行错误都会进这里        int sig = WEXITSTATUS(status);        if (sig==0)&#123;            rest-&gt;status = ACCECPT;        &#125;else&#123;            rest-&gt;status = RUNTIME_ERROR;        &#125;    &#125;&#125;\n注意看代码的正常结束判断的代码段，其实这个判断是我的python判题机里的，因为他因为语法运行错误不会做什么运行错误的返回，而是进入正常返回，所以在这里还需要判断，0是正常结束，1是不正常。而gcc和g++就不用在这里判断(应该是的)。正好也给一个python运行前检查语法错误的法子，万一哪个老师脑子一抽想加个和编译错误同等的语法错误的判断\nimport sysdef check_syntax(file_path):    try:        with open(file_path, &#x27;r&#x27;) as file:            script = file.read()        # 尝试编译脚本        compile(script, file_path, &#x27;exec&#x27;)        print(f&quot;The script &#x27;&#123;file_path&#125;&#x27; has no syntax errors.&quot;)        return True    except SyntaxError as e:        # 捕获语法错误        print(f&quot;Syntax error in &#x27;&#123;file_path&#125;&#x27;: &#123;e&#125;&quot;)        return Falseif __name__ == &quot;__main__&quot;:    file_path = sys.argv[1] if len(sys.argv) &gt; 1 else &quot;data/code.py&quot;    # 检查文件语法    check_syntax(file_path)\n\n2.4 比较输出结果实际输出和期望输出的比较，就见仁见智了，毕竟有些题目要求完全一致，不然格式错误什么的，顺便一提我这里没给出输出超限格式错误的判断方法。更别说还有的什么可以忽略最后的换行符或者每行最后一个空格，那个要自己写了(指不用linux自带的diff命令)\n然后关于特判，我的python代码模版如下。这里面限制了运行时间以及读取实际输出文件，并将返回的True或False的字符串写入文件中，还是通过文件通信。而出题人编写的代码，就放在这下面的第一行的上面，模版再见更下面。\nimport signal  import sys  from contextlib import contextmanager    @contextmanager  def time_limit(seconds):      def signal_handler(signum, frame):          raise Exception()      signal.signal(signal.SIGALRM, signal_handler)      signal.alarm(seconds)      try:          yield      finally:          signal.alarm(0)        try:      with open(sys.argv[1], &#x27;r&#x27;) as file:          lines = file.readlines()      with time_limit(int(sys.argv[2])):        res = judge(lines)  except Exception as e:          res = Falsewith open(sys.argv[3], &#x27;w&#x27;) as f:      f.write(str(res))\n这是出题人的模板，他要负责编写这个函数，入参是实际输出的每行的字符串(所以还需要手动split和类型转换)，返回值必须是True或False\ndef judge(lines)-&gt;bool:      for line in lines:        pass    return True\n\n2.5 返回判题结果至于为什么保存为json进行volume通信，这个见仁见智，我是用的cJSON库，还挺有意思，给你们瞟一眼，其实就是创建链表节点，然后挂载到父结点上，毕竟json也可以看作一个多叉树或链表套链表。只是因为是c语言，没有函数重载，所以创建和添加不同类型的结点有不同的函数，看起来代码有点臭长。\nvoid res2json(Result *compileResult,Result *runResults,int testCaseNum,char *lastOuput)&#123;    // 创建 JSON 对象    cJSON *root = cJSON_CreateObject();    if (root == NULL) &#123;        fprintf(stderr, &quot;Failed to create JSON object.\\n&quot;);        return;    &#125;    //编译结果    cJSON *compileNode = cJSON_CreateObject();    cJSON_AddNumberToObject(compileNode, &quot;status&quot;, compileResult-&gt;status);    cJSON_AddStringToObject(compileNode, &quot;log&quot;, compileResult-&gt;log);    cJSON_AddItemToObject(root, &quot;compile&quot;, compileNode);    // 运行结果    cJSON * runNodes = cJSON_CreateArray();    for(int i=0; i&lt;testCaseNum;i++)&#123;        cJSON *runNode = cJSON_CreateObject();        cJSON_AddNumberToObject(runNode, &quot;status&quot;, runResults[i].status);        cJSON_AddStringToObject(runNode, &quot;log&quot;, runResults[i].log);        cJSON_AddNumberToObject(runNode, &quot;time&quot;, runResults[i].timeUsed);        cJSON_AddNumberToObject(runNode, &quot;memory&quot;, runResults[i].memoryUsed);        cJSON_AddItemToArray(runNodes, runNode);    &#125;    cJSON_AddItemToObject(root, &quot;run&quot;, runNodes);    //最后一次输出    cJSON *lastOutputNode = cJSON_CreateString(lastOuput);    cJSON_AddItemToObject(root, &quot;lastOutput&quot;, lastOutputNode);    // // 将 JSON 对象转换为 JSON 字符串    char *jsonStr = cJSON_Print(root);    if (jsonStr == NULL) &#123;        fprintf(stderr, &quot;Failed to convert JSON object to string.\\n&quot;);        cJSON_Delete(root);        return;    &#125;    cJSON_Delete(root);    // 打开文件，如果不存在则创建，准备写入      FILE *file = fopen(RES_FILE, &quot;w&quot;);      if (file == NULL) &#123;          perror(&quot;Error opening file&quot;);          return;      &#125;      // 写入字符串到文件    fputs(jsonStr, file);    fclose(file);    printf(&quot;%s\\n&quot;,jsonStr);    free(jsonStr);&#125;\n2.6 编译型和解释型语言我这个每种语言各自一个镜像就是为了这种情况。像gcc、g++、java(有编译为字节码和虚拟机运行字节码两步)这种编译型就把编译步骤加上，然后运行也是运行输出的可执行文件。像python nodejs这些就可以注释掉compile操作，然后改写运行的那句命令(execvp那里)\n2.7 请求头我写的很困难，因为很多api都不知道，是chatgpt+stackoverflow告诉我的。姑且分享一下。cjson这里没放，读者自己学着去仓库里下.c和.h然后include h文件(只需要下载两个文件，很容易的，不要什么cmake)\n#define _GNU_SOURCE#include &lt;stdio.h&gt;#include &lt;stdbool.h&gt;#include &lt;stdlib.h&gt; #include &lt;string.h&gt;#include &lt;pthread.h&gt;#include &lt;sys/resource.h&gt;#include &lt;time.h&gt;#include &lt;errno.h&gt;#include &lt;unistd.h&gt;#include &lt;signal.h&gt;#include &lt;sys/wait.h&gt;#include &lt;fcntl.h&gt;#include &lt;sys/types.h&gt; #include &lt;sys/stat.h&gt;\n\n\n不足之处欢迎指正。不欢迎讨论(因为我很菜，真的答不出什么)，也不欢迎要全部代码的。\n\n"},{"title":"Airtest手机APP自动化--操作微信（小米11）","url":"/2022/11/29/Airtest%E6%89%8B%E6%9C%BAAPP%E8%87%AA%E5%8A%A8%E5%8C%96-%E6%93%8D%E4%BD%9C%E5%BE%AE%E4%BF%A1%EF%BC%88%E5%B0%8F%E7%B1%B311%EF%BC%89/","content":"感觉Appium太垃圾了，于是顺手学了下Airtest\n\n安装并解压官网，有很显眼的下载按钮下载完zip文件后进行解压\n\n启动自带AirtestIDE.exe不想登录的可以跳过因为提前通过数据线连接了手机和电脑了，所以一进去就显示已经连接到手机设备了当然启动完再用USB线连上也是没问题的如果是之后插上手机的话，记得刷新双击这个框，会开始连接，等待几秒出现手机界面，与真机是同步的对于某些手机，例如小米，在第一次使用Airtest时，请注意手机上将会弹出提示，询问你是否允许安装App，此时需要点击允许按钮。\n\n打开微信\n # -*- encoding=utf8 -*-__author__ = &quot;lyy&quot;from airtest.core.api import *auto_setup(__file__)start_app(&quot;com.tencent.mm&quot;)\n \n\n定位  选完android会弹出这玩意，点yes，手机上也同意安装该应用  点完上面那个小标志后，光标移到那个手机界面上，就有组件详情了 \n  所以点击红点就写好了\n poco(name=&quot;com.tencent.mm:id/kmv&quot;).click()\n在pycharm中运行这段代码安装相关依赖，东西有点多，要等一会pip install pocoui -i https://pypi.tuna.tsinghua.edu.cn/simple然后就可以直接把AirtestIDE里的代码直接粘贴过去了但是代码运行起来又要下东西，能咋办，下呗。。。\n\n成果\n # -*- encoding=utf8 -*-__author__ = &quot;lyy&quot;from airtest.core.api import *from poco.drivers.android.uiautomation import AndroidUiautomationPocoimport datetimepoco = AndroidUiautomationPoco(use_airtest_input=True, screenshot_each_action=False)def response(text):    if text == &quot;现在什么时候了&quot;:        return datetime.datetime.now().strftime(&quot;%Y-%m-%d %H:%M:%S&quot;)    elif text == &quot;感觉Airtest怎么样&quot;:        return &quot;只要安装exe就可以使用，很舒适，迁移到python上也只要pip装对应的包。速度也较快，但是IDE和接口的bug挺多，输入文本的API做的不太好，而且网上相关博客很少，社区不活跃&quot;    elif text == &quot;你这个脚本的效果是什么&quot;:        return &quot;检测微信主页的可视范围内(不下滑时)的所有有未读信息的好友，判断他们的文本并进行回复&quot;    elif text == &quot;你是谁&quot;:        return &quot;刘宇阳&quot;    elif text == &quot;为什么能回复自己发的消息&quot;:        return &quot;因为左右两边的聊天框是同一类组件，区分起来有点麻烦；不区分也方便自己测试&quot;    else:        return Noneif __name__ == &#x27;__main__&#x27;:    auto_setup(__file__)    # 启动微信    start_app(&quot;com.tencent.mm&quot;)    print(&quot;开始监听&quot;)    while True:    \t# 有带红点的未读新消息        if poco(name=&quot;com.tencent.mm:id/kmv&quot;).exists():            # 点击第一个红点            poco(name=&quot;com.tencent.mm:id/kmv&quot;).click()            # 查看聊天界面是否有消息            if poco(name=&quot;com.tencent.mm:id/b4b&quot;).exists():                # 获得最新消息                target_msg = poco(name=&quot;com.tencent.mm:id/b4b&quot;)[-1].get_text()                resp = response(target_msg)                if resp != None:                    # 输入内容                    poco(resourceId=&quot;com.tencent.mm:id/kii&quot;).click()                    # 使用Airtest的专用输入法Yosemite                    # 异常捕获解决第一次打开Yosemite输入法报错                    try:                        text(resp, enter=False)                    except:                        text(resp, enter=False)                    # 点击发送                    poco(resourceId=&quot;com.tencent.mm:id/b8k&quot;).click()                # 点击返回到主页                poco(resourceId=&quot;com.tencent.mm:id/yn&quot;).click()\n\n","categories":["爬虫"]},{"title":"Datawhale AI 夏令营（2024第三期）AI+逻辑推理方向 模型微调学习笔记","url":"/2024/08/03/Datawhale-AI-%E5%A4%8F%E4%BB%A4%E8%90%A5%EF%BC%882024%E7%AC%AC%E4%B8%89%E6%9C%9F%EF%BC%89AI-%E9%80%BB%E8%BE%91%E6%8E%A8%E7%90%86%E6%96%B9%E5%90%91-%E6%A8%A1%E5%9E%8B%E5%BE%AE%E8%B0%83%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/","content":"如何基于开源大模型进行优化1. Prompt工程大模型可能知道问题相关，但是我们问的不清楚。所以需要根据我们的提问，构建出一个比较结构化的、大模型易于理解和分析的提问内容。在下方的第二个资料里，我才知道有这么多Prompt的构建思路，难怪说是“工程”。\n相关学习资料：\n\ndatawhalechina&#x2F;llm-cookbook(教程)\nPrompt Engineering Guide(内含多种Prompt策略)\n\n2. RAG大模型不知道问题相关。这种情况我们可以在问题上附加部分已知的领域知识，相当于给他一本说明书，让他参考后回答我们(知识储备不变，只是临时参考了外物)。可以结合向量数据库或者知识图谱等优化。\n3. 微调大模型不知道问题相关。这种情况可以构建一定量的数据集，进一步训练、调整大模型的参数(知识储备变多了)，使新的大模型更适合提问者的需求。\n4. 不同需求场景下的比较\n领域知识变更频繁。微调需要重复训练模型，而RAG不用修改已有大模型，调整较为灵活方便，更适合。\n对定制能力要求高。微调对模型的优化效果较RAG好，定制性好，但也会损失一定的通用能力。\n要求幻觉较少：RAG传入的专业辅助知识更能减少幻觉。\n成本与可解释性。微调需要大量训练调整网络参数，成本较高，且网络参数的可解释型较差。RAG可以结合自身的知识库进行解释，且搭建工程框架的成本比训练模型低。\n低延迟。RAG在模型推理的基础上还要进行一些文本向量化、知识库读写等，延迟较微调高。]\n\n当然，将两者结合使用，效果更佳\nbaseline2学习vllm我理解是一个将本地模型暴露为网络服务的框架，但是通过一些优化提高了吞吐率和内存利用效率，适用于实时应用场景。而且他可以无缝集成hf的模型，使用起来确实很方便。\nLoRA模型微调，自然需要得到一个 $\\Delta W$, 通过$W_{new}&#x3D;W_{origin}+\\Delta W$，更新模型参数，进而得到一个新模型。这就意味着$\\Delta W$的矩阵大小与$W_{origin}$一致。众所周知大模型突出一个参数量大，那$\\Delta W$自然也是非常耗显存的。为了把训练的价格打下来，就出现了LoRA。LoRA（Low-Rank Adaptation）：对于一个预训练好的基座模型，保留其原有的权重矩阵W不变，仅微调训练更新部分，且这个更新权重矩阵被分解成A和B两个低秩矩阵。它的策略就是把$\\Delta W$这个大矩阵分解为A、B两个小矩阵。在训练时，只训练这两个小矩阵，最后通过$W_{new}&#x3D;W_{origin}+BA$更新模型参数。我们假设$\\Delta W$是(1e5,1e5),A是(1e5,8), B是(8,1e5)，那么前后的元素个数差为$1e10-1.6*1e6$,这是好几个数量级的差距了。\n(这个图只是推荐算法里矩阵分解的演示，仅供参考)下图为LoRA论文中的图，A矩阵初始化为高斯分布矩阵，B矩阵初始化为0矩阵。\n多路召回采用不同的策略、特征或者简单模型，分别召回一部分候选集，然后再把这些候选集混合在一起后供后续排序模型使用。在baseline中其实就是将一个问题问同一个大模型三次，因为大模型是概率模型所以可能会有不同的答案。收集三次回复的结果，少数服从多数。我感觉在一般的使用中，可以组合使用不同的prompt、不同的模型进行投票。此次比赛有显存限制估计不好用多个模型了。\n其他优化思路(都只是思路，不确定效果是否更好)\n全量微调lora训练的是分解的矩阵，难免有精度损失。如果有钱有时间，全量微调效果应该更好。\n数据集使用更多的开源数据集训练。或者用更好的大模型构建出新数据集(或者获得更好的推理思路)，用他们训练当前模型(模型蒸馏)。\n模型量化将超出比赛要求限制的大模型，通过降低浮点型参数的精度等方式，降低他的显存消耗，使其正常完成比赛。(群友说训练的时候不要降低精度，推理的时候可以量化)\n货比三家对于不同的模型、不同的Prompt，组合搭配，选评分最高的。\n\n完全使用baseline02的分数\n小白本人的pytorch学习由于我没怎么用过pytorch，还学习了相关API\n\n构建网络\n构建网络\npytorch中的几个层\npytorch中的几个层\npytorch教程\n使用pytorch搭建神经网络\n构建pytorch数据集\n\n","categories":["人工智能"],"tags":["LLM"]},{"title":"Linux下Docker安装几种NoSQL和MQ和DB","url":"/2022/02/28/Linux%E4%B8%8BDocker%E5%AE%89%E8%A3%85%E5%87%A0%E7%A7%8DNoSQL%E5%92%8CMQ/","content":"注：本文中所有配置文件都是我用echo或者cat输入的，不全，最好用docker cp如下面的diamagnetic就是将mysql-service容器内的配置文件复制到宿主机上然后在第二次运行的时候再挂载\ndocker cp mysql-service:/etc/mysql/my.cnf /root/docker/mysql/conf\n\n在Linux环境(虚拟机)下使用Docker配置NoSQL  - Docker  - MongoDB  - Redis  - Elasticsearch  - RabbitMQ  - RocketMQ  - Docker-Compose  - Mysql  - Minio  - Milvus\n\n我的服务器是本地虚拟机，所以直接关了防火墙具体要开的端口是mongodb:27017 redis:6379es + kibana:9200 9300 5601rabbitmq 5672 15672\nDocker\n卸载（可选）如果之前安装过旧版本的Docker，可以使用下面命令卸载： yum remove docker \\docker-client \\docker-client-latest \\docker-common \\docker-latest \\docker-latest-logrotate \\docker-logrotate \\docker-selinux \\docker-engine-selinux \\docker-engine \\docker-ce\n安装docker。服务器机器要能联网，安装yum工具 yum install -y yum-utils \\device-mapper-persistent-data \\lvm2 --skip-broken\n更新本地镜像源，这里设为了阿里云的镜像 yum-config-manager \\--add-repo \\https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo\n sed -i &#x27;s/download.docker.com/mirrors.aliyun.com\\/docker-ce/g&#x27; /etc/yum.repos.d/docker-ce.repo\n yum makecache fast\n安装docker社区版 yum install -y docker-ce\n启动docker systemctl start docker systemctl enable docker\n查看docker版本，验证启动成功 docker -v\n配置镜像加速。这里参考阿里云的镜像加速文档：加速文档，把文档里的代码直接全粘了运行docker官方镜像仓库网速较差，我们需要设置国内镜像服务。 sudo mkdir -p /etc/dockersudo tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;&#123;  &quot;registry-mirrors&quot;: [&quot;https://ppztf0yr.mirror.aliyuncs.com&quot;]&#125;EOFsudo systemctl daemon-reloadsudo systemctl restart docker\n\ndocker常用命令docker常用命令\nMongoDB\n我是拉取最新版的\n docker pull mongo\n预先创建好被挂载的配置文件 mongodb.conf 配置文件详解 \n mkdir -p /myData/mongo/confmkdir -p /myData/mongo/datamkdir -p /myData/mongo/logcd /myData/mongo/confcat &gt; mongodb.conf &lt;&lt;EOF#端口port=27017#数据库文件存放目录dbpath=/myData/mongo/data#日志文件存放路径logpath=/myData/mongo/log#使用追加方式写日志logappend=true#以守护线程的方式运行，创建服务器进程fork=true#最大同时连接数maxConns=100#不启用验证#noauth=true#每次写入会记录一条操作日志journal=true#存储引擎有mmapv1、wiredTiger、mongorocksstorageEngine=wiredTiger#访问IPbind_ip=0.0.0.0#用户验证auth=trueEOF\n新建一个名为mongo的容器运行该mongo镜像，映射宿主机的 27017 端口为容器服务的 27017 端口，并指定要验证才能使用服务 \n docker run \\--name mongo \\-p 27017:27017 \\-v /myData/mongo/data:/data/db -v /myData/mongo/conf:/data/conf -v /myData/mongo/log:/data/log \\-d mongo --auth\n查看运行情况\n docker ps\n进入容器\n docker exec -it mongo mongo admin\n 接下来的角色权限配置可以参考MongoDB的角色创建及配置\n\n创建用户\n db.createUser(&#123;user:&quot;root&quot;,pwd:&quot;root&quot;,roles:[&quot;root&quot;]&#125;);\n尝试登录该用户，输出1表示成功(同redis的auth)\n db.auth(&#x27;root&#x27;,&#x27;root&#x27;)\n 用可视化工具连接时也是username和password都是root\n\n退出\n exit\n\nRedis参考自docker拉取Redis\n\n拉取\n docker pull redis\n预先创建好挂载目录及文件 注意daemonize不能为yes，因为docker run里的-d就是守护进程 参考自docker日记（二）–redis\n mkdir -p /myData/redis/confmkdir -p /myData/redis/datatouch /myData/redis/conf/redis.confcat &gt; /myData/redis/conf/redis.conf &lt;&lt;EOFbind 0.0.0.0 protected-mode noappendonly yes requirepass rootdaemonize noEOFchmod -R 777 /myData/redis/\n创建容器运行该镜像 -v /myData/redis/data:/data \\【-v：目录挂载，将容器内部的data 文件夹挂载到Linux的/myData/redis/data目录里】 -V /myData/redis/conf/redis.conf:/etc/redis/redis.conf \\【将/etc/redis/redis.conf挂载到Linux中指定目录下】 -d --restart=always 【配置开机启动】 TIMEZONE解决redis时区不同步问题 注意最后一行是用容器内配置文件启动redis服务端\n docker run -p 6379:6379 --name redis \\--sysctl net.core.somaxconn=1024 --privileged=true --restart=always \\-v /myData/redis/data:/data \\-v /myData/redis/conf/redis.conf:/etc/redis/redis.conf \\-e TIME_ZONE=&quot;Asia/Shanghai&quot; -e TZ=&quot;Asia/Shanghai&quot; \\-d redis redis-server /etc/redis/redis.conf\n进入客户端\n docker exec -it redis redis-cli\n测试 注意下面这个root是我们之前配的密码，如果你想免密，就把那行删掉或注释掉\n auth rootpingexit\n 返回PONG即成功\n\n\nElasticsearch\n拉取 docker pull elasticsearch:7.6.2docker pull kibana:7.6.2\n准备好外部挂在目录和文件，这里文件就用我给出的吧，别复制容器里的了，甚至都不如这里的全 mkdir -p /myData/elasticsearch/config mkdir -p /myData/elasticsearch/pluginsmkdir -p /myData/kibana/configmkdir -p /myData/kibana/datacat &gt; /myData/elasticsearch/config/elasticsearch.yml &lt;&lt;EOFhttp.host: 0.0.0.0# Uncomment the following lines for a production cluster deployment#transport.host: 0.0.0.0#discovery.zen.minimum_master_nodes: 1#Password config#这一步是开启x-pack插件xpack.security.enabled: true   http.cors.enabled: truehttp.cors.allow-origin: &quot;*&quot;EOFcat &gt; /myData/kibana/config/kibana.yml&lt;&lt;EOFserver.name: kibanaserver.host: &quot;0.0.0.0&quot;elasticsearch.hosts: [ &quot;http://es服务器的IP:9200&quot; ]elasticsearch.username: &quot;elastic&quot;elasticsearch.password: &quot;自己待会会设置的密码&quot;i18n.locale: &quot;zh-CN&quot;EOF\n新建容器运行该镜像 docker run -d -it --restart=always --privileged=true \\--name=elasticsearch -p 9200:9200 -p 9300:9300 -p 5601:5601 \\ -e &quot;discovery.type=single-node&quot; -e &quot;cluster.name=elasticsearch&quot; \\ -v /myData/elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml \\ -v /myData/elasticsearch/plugins:/usr/share/elasticsearch/plugins \\ -e ES_JAVA_OPTS=&quot;-Xms512M -Xmx512M&quot; elasticsearch:7.6.2 #-e ES_JAVA_OPTS=&quot;-Xms4G -Xmx4G&quot;  设置运行内存，这个内存不建议太大。因为es走的是直接内存也就是系统内存，所以要预留足够的系统内存。我这台服务器8核16G所以给了4G。如果系统内存预留不足，会导致以后检索时速度达不到预期速度。\n进入es容器设置密码 docker exec -it elasticsearch /bin/bashcd bin#开启密码设置elasticsearch-setup-passwords interactive\n #输出 如下Initiating the setup of passwords for reserved users elastic,apm_system,kibana,kibana_system,logstash_system,beats_system,remote_monitoring_user.You will be prompted to enter passwords as the process progresses.#输入YPlease confirm that you would like to continue [y/N]Y#依次设置密码Enter password for [elastic]:Reenter password for [elastic]:Enter password for [apm_system]:Reenter password for [apm_system]:Enter password for [kibana_system]:Reenter password for [kibana_system]:Enter password for [logstash_system]:Reenter password for [logstash_system]:Enter password for [beats_system]:Reenter password for [beats_system]:Enter password for [remote_monitoring_user]:Reenter password for [remote_monitoring_user]:Changed password for user [apm_system]Changed password for user [kibana_system]Changed password for user [kibana]Changed password for user [logstash_system]Changed password for user [beats_system]Changed password for user [remote_monitoring_user]Changed password for user [elastic]\n重启es exit\n docker restart elasticsearch\n修改kibana.yml的配置\n新建kibana容器(kibana是一个可视化es数据的管理平台) docker run -itd -e ELASTICSEARCH_URL=http://ES服务器IP:9200 --name kibana \\-v /myData/kibana/config:/usr/share/kibana/config --network=container:elasticsearch kibana:7.6.2\n测试http://ES服务器IP:9200如下面的效果并能正确登录说明成功了注意用户名是elastichttp://kibana服务器IP:5601/\n\nRabbitMQ\n拉镜像\n docker pull rabbitmq:management\n准备好外部挂载目录\n mkdir -p /myData/rabbitmq/&#123;data,log,conf&#125;chmod -R 777 /myData/rabbitmq\n新建容器运行该镜像\n docker run -d -p 5672:5672 -p 15672:15672 \\-v /myData/rabbitmq/data:/var/lib/rabbitmq -v /myData/rabbitmq/conf:/etc/rabbitmq -v /myData/rabbitmq/log:/var/log/rabbitmq \\--name rabbitmq --hostname=rabbitmq-1 --restart=always \\rabbitmq:management\n\n进入容器\n docker exec -it rabbitmq  /bin/bash\n启动可视化插件\n rabbitmq-plugins enable rabbitmq_management\n建立供外部访问的用户 先别急着退出来，还在这个容器里 添加账号  rabbitmqctl add_user 账号  密码 设置权限 rabbitmqctl set_permissions -p / 账号 &quot;.*&quot; &quot;.*&quot; &quot;.*&quot; 设置角色rabbitmqctl set_user_tags 账号 administrator\n rabbitmqctl add_user root rootrabbitmqctl set_permissions -p / root &quot;.*&quot; &quot;.*&quot; &quot;.*&quot;rabbitmqctl set_user_tags root administrator\n测试访问web界面http://rabbitmq服务器的IP:15672/有个默认账号和密码都是guest当然也可以用我们刚创建的那一个\n\n\nRocketMQ参考自Rocketmq详解02-mq安装\n\n创建namesrv服务 docker pull rocketmqinc/rocketmqmkdir -p /myData/rocketmq/data/namesrv/logs /myData/rocketmq/data/namesrv/storedocker run -d \\--restart=always \\--name rmqnamesrv \\-p 9876:9876 \\-v /myData/rocketmq/data/namesrv/logs:/root/logs \\-v /myData/rocketmq/data/namesrv/store:/root/store \\-e &quot;MAX_POSSIBLE_HEAP=100000000&quot; \\rocketmqinc/rocketmq \\sh mqnamesrv \n创建broke结点 mkdir -p  /myData/rocketmq/data/broker/logs   /myData/rocketmq/data/broker/store /myData/rocketmq/confcat &gt; /myData/rocketmq/conf/broker.conf &lt;&lt;EOF# 所属集群名称，如果节点较多可以配置多个brokerClusterName = DefaultCluster#broker名称，master和slave使用相同的名称，表明他们的主从关系brokerName = broker-a#0表示Master，大于0表示不同的slavebrokerId = 0#表示几点做消息删除动作，默认是凌晨4点deleteWhen = 04#在磁盘上保留消息的时长，单位是小时fileReservedTime = 48#有三个值：SYNC_MASTER，ASYNC_MASTER，SLAVE；同步和异步表示Master和Slave之间同步数据的机制；brokerRole = ASYNC_MASTER#刷盘策略，取值为：ASYNC_FLUSH，SYNC_FLUSH表示同步刷盘和异步刷盘；SYNC_FLUSH消息写入磁盘后才返回成功状态，ASYNC_FLUSH不需要；flushDiskType = ASYNC_FLUSH# 设置broker节点所在服务器的ip地址brokerIP1 = IP自己填EOFdocker run -d  \\--restart=always \\--name rmqbroker \\--link rmqnamesrv:namesrv \\-p 10911:10911 \\-p 10909:10909 \\-v  /myData/rocketmq/data/broker/logs:/root/logs \\-v  /myData/rocketmq/data/broker/store:/root/store \\-v /myData/rocketmq/conf/broker.conf:/opt/rocketmq/conf/broker.conf \\-e &quot;NAMESRV_ADDR=namesrv:9876&quot; \\-e &quot;MAX_POSSIBLE_HEAP=200000000&quot; \\rocketmqinc/rocketmq \\sh mqbroker -c /opt/rocketmq/conf/broker.conf \n创建rocketmq-console docker pull pangliang/rocketmq-console-ngdocker run -d \\--restart=always \\--name rmqadmin \\-e &quot;JAVA_OPTS=-Drocketmq.namesrv.addr=IP:9876 \\-Dcom.rocketmq.sendMessageWithVIPChannel=false&quot; \\-p 9111:8080 \\pangliang/rocketmq-console-ng\n开放对应端口 firewall-cmd --permanent --zone=public --add-port=9876/tcpfirewall-cmd --permanent --zone=public --add-port=10911/tcpfirewall-cmd --permanent --zone=public --add-port=9111/tcp# 立即生效firewall-cmd --reload\n记得开放9876，10911，10912，10909、9111(自定义的控制台端口)五个端口\n查看控制台http://ip:9111\n\nDocker-Compose\n下载并到服务器上\nmv docker-compose-linux-x86_64 docker-compose\nchmod 777 docker-compose\nmv docker-compose /usr/local/bin/\nvim /etc/profile、export PATH=$PATH:/usr/local/bin/、source /etc/profile\ndocker-compose -vDocker-compose安装\n\ndocker-compose updocker-compose restartdocker-compose logsdocker-compose psdocker-compose stopdocker-compose rm \n\nMysql# 拉取docker pull mysql# 运行docker run -p 3306:3306 --name mysql \\-e MYSQL\\_ROOT\\_PASSWORD=root \\-d mysql# 进入容器测试docker exec -it mysql bashmysql -uroot -p密码\n在3307端口装一个5.7的mysql\ndocker run -p 3307:3306 --name mysql5.7 \\-e MYSQL\\_ROOT\\_PASSWORD=root\\-d mysql:5.7\nMinIOdocker pull minio/miniomkdir /myDatamkdir /myData/miniomkdir /myData/minio/datamkdir /myData/minio/configdocker run --name minio \\-p 9000:9000 \\-p 9999:9999 \\-d --restart=always \\-e &quot;MINIO_ROOT_USER=admin&quot; \\-e &quot;MINIO_ROOT_PASSWORD=admin123&quot; \\-e &quot;MINIO_SERVER_URL=http://IP:9000&quot; \\-v /home/minio/data:/data \\-v /home/minio/config:/root/.minio \\minio/minio server /data \\--console-address &#x27;0.0.0.0:9999&#x27;firewall-cmd --zone=public --add-port=9000/tcp --permanentfirewall-cmd --zone=public --add-port=9999/tcp --permanentfirewall-cmd --reload\n登录consolehttp://IP:9999用户名和密码为admin  admin123\nMilvusmkdir /usr/local/env/milvuscd /usr/local/env/milvuswget https://github.com/milvus-io/milvus/releases/download/v2.0.0-rc7/milvus-standalone-docker-compose.yml -O docker-compose.ymldocker-compose up -ddocker-compose ps\nNginxDocker 安装 Nginx 容器 (完整详细版)\ndocker pull nginx# 创建挂载目录mkdir -p /mydata/nginx/confmkdir -p /mydata/nginx/logmkdir -p /mydata/nginx/html# 生成临时容器(复制完配置文件就删除)docker run --name nginx -p 80:80 -d nginx# 将容器中要被挂载的文件复制到宿主机docker cp nginx:/etc/nginx/nginx.conf /mydata/nginx/conf/nginx.confdocker cp nginx:/etc/nginx/conf.d /mydata/nginx/conf/conf.ddocker cp nginx:/usr/share/nginx/html /mydata/nginx/# 删除临时的docker stop nginxdocker rm nginx# 真正启动容器docker run \\-p 80:80 \\--name nginx \\-v /mydata/nginx/conf/nginx.conf:/etc/nginx/nginx.conf \\-v /mydata/nginx/conf/conf.d:/etc/nginx/conf.d \\-v /mydata/nginx/log:/var/log/nginx \\-v /mydata/nginx/html:/usr/share/nginx/html \\-d nginx\n\nPostgreSQLdocker pull postgresmkdir /myData/postgresqldocker run --name postgres \\    --restart=always \\    -e POSTGRES_PASSWORD=root \\    -p 5432:5432 \\    -v /myData/postgresql:/var/lib/postgresql/data \\    -d postgres# 查看docker ps\n","categories":["运维"]},{"title":"MIT6.5840分布式系统课程笔记","url":"/2023/08/16/MIT6-5840%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/","content":"1.1.介绍1.2.MapReduce2.GFS3.主备复制4.1.Raft共识算法4.2.Raft共识算法5.Go6.一致性模型与线性化7.zookeeper8.链复制技术9.分布式事务10.缓存一致性11.Spanner12.乐观并发控制13.DynamoDB14.Spark15.缓存一致性216.Zanzibar17.SUNDR18.拜占庭容错19.比特币20.智能合约21.经过验证的主备分布式系统工程分布式系统是一组合作提供服务的计算机\n主要是基础设施服务，存储、通信、计算\n例如云存储、云计算、点对点共享\n为什么要构建并行处理：提高计算速度、吞吐量、有可靠和容错机制、可扩展性强\n冗余：通过数据复制提高可靠性\n隔离：提高安全性\n难点并发\n相互作用\n部分节点的失效\n性能问题\n各实验实验 1：分布式大数据框架（如MapReduce）\n实验 2：使用复制的容错 (Raft)\n实验 3：一个简单的容错数据库\n实验 4：通过分片扩展数据库性能\n一个大目标对上层应用程序隐藏分发的复杂性\n权衡\n容错性：尽管出现故障，服务仍然继续。数据冗余。\n\n一致性\n\n性能：可扩展的吞吐量。负载尽量均衡。\n\n\n上述三点需要权衡，因为通信是慢且不可拓展。提供弱一致性以提高速度。\n实施RPC、线程、并发控制MapReduce对多TB数据集进行长时间计算\n对开发人员友好，而不仅限于分布式专家使用\n程序员只需定义Map和Reduce函数\n其他细节被MR管理和隐藏\n论文：[MapReduce: Simplified Data Processing on Large Clusters](rfeet.qrk (mit.edu))\n过程\n输入已经被分割为多个文件\n\n每个文件作为任务，通过Map()生成中间数据\n\n将中间数据传递给Reduce()产生最终输出\n\n\n细节\nMap()和reduce()可以有多次交叉\n同一阶段的Map()和Reduce()们并行执行，它们之间没有交互。允许多个交叉的阶段(如MRMRRMMR)。\n由于并行计算，计算机数目与吞吐量成正比\nMR对于上层应用，隐藏了\n将程序员编写的代码发送到服务器\n跟踪任务进度\n将中间数据乱序传递\n负载均衡\n处理失败恢复\n\n\n限制较多，且无交互、无状态、无迭代、无实时或流处理\n输入和输出存储在GFS集群上，GFS将文件进行了分割，并进行了数据冗余\n性能限制：\n早年的带宽限制\n流量大头在于中间输出传递给Reduce和写入GFS\n\n\n减少使用网络的措施\n在存储了任务的服务器上直接进行Map，如一个服务器同时运行Map()和GFS存储，Map就可以直接读本地文件了\nMap()结果写入本地，Reduce()直接读取该Map()服务器的本地文件，不走GFS\n增加中间文件的大小，进行少次大文件传输而非多次小文件传输\n\n\n负载均衡方案：让较快的服务器完成更多的任务，多次分发给他\n函数保证：Map()和Reduce()必须是纯函数，无状态、无文件IO、无交互、无外部通信\n崩溃恢复的细节：\nMap\nworker节点不响应心跳\ncoordinator知道该worker运行了什么Map任务，并让另一个worker做这个Map\n如果Reduce已经拿到所有数据，那就不用重做这个Map了\n\n\nReduce\n已经完成的任务保存进GFS了，不用管\n没完成的给另一个worker执行\n\n\n\n\n其他错误\n任务被多次分发：对于多个Map任务，只告诉Reduce一个Mapper；对于多个Reduce任务，GFS保证只有一个中间文件可见\n一台机子很慢：将部分任务给worker完成\n\n\n\n目前对后世影响大\n很少被使用GFS论文：The Google File System\n大型、快速、统一、容错的存储系统\n给多个应用共享\n针对批量大数据\n具体实现\n多个client、多个chunkserver、一个coordinator\n\n文件被分割为64MB的chunk，分布在多个chunkserver上\n\ncoordinator保存了两组映射：filename -&gt; 一组chunkhandle、chunkhandle -&gt; 一组chunkserver\n\n\nclient从coordinator获取目标文件的chunk信息，然后使用直接访问相关chunkserver(多个client会有并行读写，性能高)\n\nchunk被冗余存储，同时写入时也会修改所有备份数据，当然只读其中一个\n\n冗余方案(避免了多个client不同顺序的备份写入导致的数据不一致)：对于每个chunk，确定主备server，只写入主server，然后同步到备server\n写入时涉及租约机制，保证只有一个主server，防止脑裂。每个chunk都有一个租约\n\n\n允许client重试追加，因此会出现重复数据。可以在写入数据中添加校验和与ID来支持读操作的过滤去重\n\n一致性支持\n三种状态\n\ndefined：无并发的写入，所有客户端看到的都相同且正确\n\nconsistent：并发的写入，客户端看到的相同，但不一定正确。因为大写入被分解为多个小写入，并发交错写入会有问题\n\ninconsistent：各个客户端看到的不相同。这种情况GFS会返回“写入错误”给client\n\n\n\n结点宕机处理\n\nclient宕机：写入操作对于主节点，告知或没告知\nchunkserver(包括主备节点)宕机：coordinator定期发心跳，更新缓存的映射信息，可能还需要复制副本数据到新分配的备节点上\n备节点宕机：主节点重试，或者主节点返回错误让client重试(其实这次大概率也写入失败)\n主节点宕机：等待租约到期，再分配一个新的主节点\n\n\ncoordinator宕机(备份coordinator发的心跳没有回应)：将临界状态(映射)写入磁盘。重启恢复；或将更新操作发给备份coordinator\n\n\ncoordinator会进行版本记录，防止访问过时chunk\n\n\n一些概括\n全局集群文件系统，一个通用基础设施\n\n将路由与存储分离\n\n分片、并行吞吐\n\n使用大文件(chunk)减少开销\n\n主备机制，保证了写入的顺序。\n\n租约避免脑裂\n\ncoordinator可能是瓶颈，它的存储空间和算力有限（Colossus行），同时对于coordinator的故障处理较差\n\n不适合大量小文件场景（BigTable行）\n\n一致性松散\n\n主备复制论文：The design of a practical system for fault-tolerant virtual machines (mit.edu)\n为什么需要通过复制实现高可用\n避免硬件、设备问题导致的服务不可用\n但是无助于操作员的操作失误和软件错误\n怎么实现\n主要方法：\n快照复制：将快照发送到备份结点。但是快照很大，网络传输较慢。\n状态机复制：对于相同启动状态的两个状态机，在相同的顺序执行相同的确定性操作，能到达相同的终态。所以只需复制追加的操作。\n\n\n主要讨论的问题：\n什么是状态\n主节点是否要等待备份\n备份结点如何知晓要进行接管\n主副结点切换是否出现异常\n结点切换如何加速并保证正确\n\n\n副本级别：\n应用程序：将高级的逻辑操作发送到备份结点\n机器级别：转发机器事件(中断、网络数据包)(VMware实现了)\n\n\n\nVMware案例\n状态机复制：主从结点最初以相同的内存、寄存器、软件(OS等)开始，且运行的指令在主从节点上相同\n但是如读取当前时间、网络数据包和磁盘读取等需要特殊处理。备份必须看到相同的时间和同样的顺序，并且要能产生同样的结果。\n使用网络共享磁盘模拟本地磁盘\n备份必须之后一个日志条目\n允许重试，TCP会忽略重复的序列号，同时共享磁盘也会hash到同一位置\n论文：\n\n[In Search of an Understandable Consensus Algorithm(Extended Version)](In Search of an Understandable Consensus Algorithm (mit.edu))\n\nraft论文中文翻译 In Search of an Understandable Consensus Algorithm(Extended Version)_西西弗的小蚂蚁的博客-CSDN博客](https://blog.csdn.net/zj_18706809267/article/details/125044750))\n\n\n分区问题计算机无法区分“宕机”与“网络损坏”，因为其表现形式都是无响应\n会导致脑裂\n需要一个决定切换服务器的自动化方案\n投票机制允许一半一下的节点宕机(尽量保持服务器数量为奇数)\n一个底层使用了raft的kv服务一条命令的执行与集群一致：\n\nclient向leader的kv层发送PUT&#x2F;GET命令\n\nkv层调用Start(command)来调用raft\n\nleader的raft添加命令到日志\n\nleader向follower们发送AppendEntries RPC\n\nfollower们添加命令到日志\n\n如果leader发现绝大多数人添加成功，就提交日志(执行命令)，并让follower们执行该条相同日志\n\n提交后向client返回响应\n\n\n日志日志保存了状态机状态\n保证了命令的执行顺序\n方便leader查看follower是否一致\n在内存中保存，方便重发，同时支持“未提交”到“提交”状态的转变\n可以持久化以保存leader状态\n集群中日志可能会不同，但最终会收敛到相互一致\n只执行大多数节点都添加的，稳定的日志\nRaft细节\n单领导者：保证命令执行的顺序\n使用任期作为逻辑时钟，并限制唯一leader，防止脑裂\n各follower节点在一个随机时间内未收到leader发来的心跳，就会变为candidate开始选举\n通过“大多数”、“同一个任期只能投一次票”，保证一个任期最多一个leader\n心跳抑制新的选举\n随机的选举超时时间防止多个节点同时开始选举\n心跳间隔必须小于选举超时时间\n\n\n  论文：\n\n[In Search of an Understandable Consensus Algorithm(Extended Version)](In Search of an Understandable Consensus Algorithm (mit.edu))\n\nraft论文中文翻译 In Search of an Understandable Consensus Algorithm(Extended Version)_西西弗的小蚂蚁的博客-CSDN博客](https://blog.csdn.net/zj_18706809267/article/details/125044750))\n\n\n处理日志不一致\nRaft保证当选的leader拥有所有已提交的日志，防止出现“承诺client成功，但无日志”的情况\n\n已提交：即使故障也不会丢失的操作；系统知道已提交\n\n\nRaft让follower只能从leader上获取日志，client只与leader交流，保证执行命令的有序\n\nleader发出的心跳带有leader持有日志的信息，故follower可以拿来判断自身日志是否最新，同时返回结果告诉leader自己的日志是否最新。leader维护了对每个节点的日志情况(有效长度)，并根据这个决定下一次心跳要发给对应节点的日志条目。\n\n日志每个条目除了指令还有任期，相同命令、不同任期的条目最终会被覆盖掉(follower删除与leader不同的日志尾部)，以保证follower日志与leader一致()\n\n只能是日志最新的结点成为leader，不能是最长的，因为最长的不一定是最新的，最新的日志可能已经被提交，若最长的成为leader，则会忽视掉最新日志。\n\n加速日志的回滚(先让follower的前缀与leader一致)：follower在心跳响应中放入第一个冲突的日志信息\n\n\n持久化\n崩溃并重启，需要持久化：\n1. 已持有的日志：如果这个节点有最新日志，允许他重启后，集群内的新leader获得最新日志\n\n1. 当前任期：避免同意被取代的结点发来的投票请求\n\n1. votedFor：避免出现宕机前投了票、宕机后又投了票\n\n\nleader保存的一些集群内所有节点的日志信息不需要持久化，因为会慢慢收敛，重回正常\n\n运行很久的系统，慢慢收敛恢复数据太慢，可以使用快照+一点尾部日志的恢复\n\n\n\n使用快照来日志压缩\n定期将已提交的日志保存为磁盘上的快照，然后丢弃这些已持久化的日志\n使用了快照会导致日志索引不再从0开始，恢复数据需要改变策略\n不使用心跳而是一个新的RPC来让follower读取快照\n\n\n\n读操作\n新leader可能没有执行最新的put操作(老leader执行了)，所以不能马上响应client的PUT操作\n\n还是要通过收敛(GET操作加入日志、发送RPC使数据一致化)直到知晓自己的最新PUT已提交\n\n\n一种方法：租约，规定一个结点是否有权响应只读请求(不一定是当前leader，也可以是老的、租约还未过期的leader)\n\n不过实践中某些时候人们能忍受看到老数据(这种场景就不用出各种方案，并且性能会更高)\n\n\n重传\n保证幂等性\nclient为请求设置ID和顺序号\n同一个请求，重发时请求ID不变\n顺序号防止乱序执行\nkv服务维护ID去重表\n\n\n崩溃恢复如果使用了快照，快照也要包含这个去重表\n采取某些措施减少去重表大小，如当前已连续的顺序号前的请求全部拒绝\n论文：\n\n[The Go Programming Language and Environment](The Go Programming Language and Environment | May 2022 | Communications of the ACM)\n\nGo做的事依赖导入\n需要显式导入包\n避免导入依赖相关的所有依赖(如导入A包，但A中函数Func的参数是与B包相关的内容，如果还需导入B包，那一次导入会导入大量依赖)\n使用大小写区分公开和私有，减少语法重量\n\n类型\n提供引用、字符串、数组、hash表和切片(无自带的Set等数据结构)\n不支持隐式类型转换\n\n并发\n方便程序员管理的线程：goroutine\n\n底层使用多路复用\n提供阻塞IO\n\n\n提供channel以便goroutine的通信和同步\n\n也提供了mutex、cond、atomic等较低层的并发控制类型\n\n提供了竞态检测工具 -race\n\n\n安全\n解决了部分C和C++的问题，减少了因程序员失误导致的系统问题\n\n提供unsafe包编写底层系统\n\n自带一套加密库\n\n\n完整性\n自带一套开发需要的核心部分(如加密包、网络包)等，但也不滥竽充数，防止出现选择障碍\n\n集成了一套编译、测试等的工具包\n\n\n一致性\n性能一致\n不会出现“缓慢启动”的情况，程序在各生命周期的性能一致\n完全并发的GC，开销较小\n\n\n在不同系统架构下效果一致\n不同时间点下一致，官方承诺新版本会向后兼容\n\n辅助工具大量的工具、插件\n库\n作为适合分布式计算的语言，无中央服务器，通过URL获取远程存储库中托管的包\n也可以发布静态文件包，以支持实现私有服务\n帖子：[Testing Distributed Systems for Linearizability](Testing Distributed Systems for Linearizability (anishathalye.com))\n一致性模型产生了很多模型\n\n线性化\n最终一致性\n因果一致性\n分叉一致性\n可串行化\n顺序一致性\n\n因为需要在 性能&#x2F;便利性&#x2F;可靠性上做权衡\n线性化模型强一致性\n需要串行组件\n可用性差\n最终一致性模型更受欢迎\n性能更好、更大的容错空间\n可能读到旧数据，不利于系统安全(权限、支付)\n一致性差\n权衡可用性和一致性不能两者兼得论文：zookeeper.pdf (mit.edu)\n论文：Chain Replication for Supporting High Throughput and Availability\n\n链复制技术\n一系列服务器组成链表(保证有序、线性化写入)\n\n头结点接收写请求，并按配置的顺序(有序)，依次向后发送更新请求并进行响应的更新\n\n当前写入时，首先将数据缓存，然后将写入请求发给下一个节点(不会像P&#x2F;R模型一样primary结点负载大)，并等待下一个节点返回ACK\n下一个节点返回ACK后，才将缓存中的数据持久化到本地，然后给上一个结点返回ACK\n在等待ACK期间，结点不进行其他操作(线性化)\n在写入头结点后立刻返回给client写成功响应(高吞吐)\n\n\n尾结点接收读请求(该结点负载大)(同一时间获得同一数据，强一致)，将尾结点上的数据和请求结果返回给客户端\n\n易知后面结点的数据一定是前面数据的前缀\n\n结点宕机情况\n\n写操作\n头结点：写操作直接失败，客户端报错\n中间结点和尾结点：反正已经返回客户端成功了。恢复后比较本地存储和前一个结点的数据，并恢复数据。\n\n\n读操作：\n尾结点：读操作直接失败\n\n\n\n\n可用：\n\n多个结点进行数据冗余，\n额外的配置和监听服务器，监听集群内各节点状态，在节点宕机时分配备份节点。\n\n\n容忍最多N-1个结点失败\n\n\nCRAQ\n允许任何节点处理读请求，并继续保持强一致\n\n双向链表\n\n不能处理脑裂问题\n\nTODO\n\n\n事务是数据库中的老生常谈了\n\nACID\n\nAtomic\nConsistent\nIsolated\nDurable\n\n\n分布式事务 &#x3D; 原子提交 + 并发控制\n\n并发控制\n悲观锁：访问前加锁\n乐观锁：不加锁，用变量进行记录\n如果并发小，乐观锁性能好，否则悲观锁\n\n\n\n\n两段锁协议（2PL）：用于单机事务中的一致性与隔离性\n\n写操作时加锁\n\n所有的解锁操作必须在加锁操作之后(即分为两个阶段)\n\n\n可能产生死锁\n\n是一种\n\n\n\n两阶段提交(2PC)：用于分布式事务\n\n将事务分为准备阶段和提交阶段\n准备阶段：事务管理器给每个参与者发送Prepare消息，每个参与者在本地执行事务，并写Undo、Redo日志\n提交阶段：如果事务管理器收到了失败或超时消息，就给每个参与者发回滚消息，否则发提交消息。参与者根据发来的消息执行操作，然后释放事务中使用的锁资源。\n\n\n可用性差，因为加锁会阻止其他事务，同时也有无限期阻塞的可能。必须所有服务器都活着才有效\n\n\n论文：Frangipani: A Scalable Distributed File System论文：[Spanner: Google’s Globally-Distributed Database](spanner.pdf (mit.edu))\nSpanner\n使用Paxos作为分布式一致性协议\n\n非阻塞的读，且只读事务不使用锁机制\n\n会随着时间推移，自动对数据进行重新分片，以平衡各节点负载\n\n支持通用事务\n\n在使用了时间戳的情况下，支持跨越全球的一致性的读操作\n\n时间戳分配给数据，更像一个多版本数据库\n时间戳反应了事务的执行顺序\n使用了具有原子时钟和GPS的TrueTime API来决定时间戳标记。\n\n\n结构\n\n\n\n并发控制\n\n\n论文：[No compromises: distributed transactions with consistency, availability, and performance](farm-2015.pdf (mit.edu))\n乐观并发控制(OCC)论文：[Amazon DynamoDB: A Scalable, Predictably  Performant, and Fully Managed NoSQL  Database Servic](atc22-dynamodb.pdf (mit.edu))\n论文较新，解读较少，这里放译文：[译文]Amazon DynamoDB - A Scalable, Predicably Performant, and Fully Managed NoSQL Database Service - 知乎 (zhihu.com)\nDynamoDB 2022 论文解读丨东旭说 (qq.com)Resilient Distributed Datasets: A Fault-Tolerant Abstraction for In-Memory Cluster Computing\nRDD\nRDD：弹性分布式数据集，是一种分布式内存（集群上的内存存储）的抽象，即支持数据重用、容错、并行\n是只读、分局记录的集合\n只能通过稳定的物理存储或者其他RDD的数据集来创建\n\n\n\n用户可以控制哪些RDD被缓存、哪些被分区\n\nSpark\nSpark是一种RDD系统，提供了Scala接口(简洁、高效)\n\nSpark中RDD都是对象，可以操作\n\nSpark中RDD默认存储到RAM，RAM不够时部分写到磁盘上\n\nSpark使用lineage进行容错恢复，只需重新计算丢失节点，不需要回滚全部\n\nSpark可以利用数据局部性，提高性能\n\nRDD适用于：     \n​    对数据集中的所有元素使用同一操作的批量应用。在这种情况中，RDD可通过lineage高效记住每个转换，并且无需大量数据即可恢复丢失分区。\n\nRDD不适用于：在共享状态下的异步细粒度的更新，比如web存储系统，或增量式web爬虫，这些更适合于用传统的日志更新，或是数据检查点。\n\nMR的局限性\n\n需要准备好批量处理的大量数据\n所有数据处理的方式相同\n不适用于交互性的\n\n\n比起MR，提高了表现力和性能，可以描述数据流图，操作内存比操作磁盘更快\n\n论文：Scaling Memcache at Facebook\n构建缓存层的最佳实践\n大部分业务都是读多写少，缓存层能保护DB\n\n缓存策略\n\n读时，先从缓存获取数据，获取失败则将数据从DB加入缓存\n写时，先更新DB，再将缓存中数据删除\n不一定必须用分布式事务保证一致性(性能要求)\n\n\n业务增加时，也需要缓存层横向扩容，通过一致性hash建立memcache集群\n\n读取多个数据，且数据有依赖关系时，会产生一个DAG\n\n\n对于可能会从一个memcache上读多次的情况，在业务层减少读取次数，一次读出\n\n因为读对错误的容忍性较高，使用UDP通信(此外还在拥塞控制上进行了处理，动态找到窗口大小)\n\n通过对数据发放租约id，避免读到并使用过期数据\n\n防止缓存穿透\n\n控制lease的发放速率，并让请求拿过期数据或重试\n如果容忍过期数据，可以缓存过期数据\n对各个缓存按访问频率分类，即热数据、冷数据这样的\n一个缓存节点建立多个备份结点，写效率换读效率\n\n\n可以使用DB的日志，实现最终一致性\n\n在不同地域建立数据中心和缓存服务\n\n论文：Zanzibar: Google’s Consistent, Global Authorization System\nZanzibar\n一个谷歌内部的分布式的鉴权应用\n\n结合了Spanner进行全球存储\n\n为谷歌的众多服务提供了鉴权服务，蒋授权逻辑提取到公共服务中，统一用户模型\n\nZanzibar是内部系统，服务的对象都是谷歌的服务，信任它们的代码\n\n权限模型：\n\nACL：对每个存储对象，增删查改每个操作都设置一个可供修改的条目\n\n\nZanzibar部署在全球\n\nZanzibar不是线性化设计\n\n利用 Spanner 的线性化和即时快照读取\n\n利用特定的安全要求来允许使用过去的快照\n\n用时间戳标记缓存数据而不是试图保持最新\n\n容错全部交给Spanner\n\n。。。。。。。。。。。。。。。。。。。。。。。。TODO\n\n论文：Secure Untrusted Data Repository (SUNDR)论文：Practical Byzantine Fault Tolerance\nPBFT\n一种状态机副本复制算法，允许(N-1)&#x2F;3个节点出错\n\nPBFT算法的过程如下:\n\n客户端向主节点发送请求操作消息, 主节点接收到请求操作消息并校验正确后, 保存该消息, 并依据该请求操作消息生成预准备消息, 广播给各备份节点.\n各备份节点接收到预准备消息并校验正确后, 保存该消息, 并以该预准备消息为依据, 生成准备消息广播给主节点和其他备份节点.\n各存储副本的节点接收到准备消息并校验正确后, 保存该消息, 并以该准备消息为依据, 生成提交消息给客户端、主节点和其他备份节点.\n各存储副本的节点接收到 (2n + 1)&#x2F;3 个提交消息并校验正确后, 则执行来自客户端的请求操作消息里的操作.\n客户端接收到 (n + 2)&#x2F;3 个提交消息, 验证正确并接受后, 便认为该消息已被副本节点集群所承认与执行. 这里的客户端接受 (n + 2)&#x2F;3 个提交消息而不是 (2n + 1)&#x2F;3 个的原因在于失效的节点数量不超过 (n − 1)&#x2F;3, 因此 (n − 1)&#x2F;3 + 1 个一致响应必定能够保证结果是正确的.\n\n\n\n论文：Bitcoin: A Peer-to-Peer Electronic Cash System\n比特币\n一个开放&#x2F;无权限的系统，服务器数量都未知(很难投票)\n\n提出l了一种解决双花问题的P2P网络：该网络把 交易(transactions) 哈希结果记录到一个基于 PoW共识机制 不断增长的链上，用来给交易打上时间戳形成一条不可篡改的记录\n\nP2P的电子货币可以在无第三方金融机构的情况下进行在线支付\n\n数字签名技术可以用于防止双花(double-spending)\n\n最长链会作为已发生事件的载体，同时其自身也代表了最强大的CPU算力池\n\n只要大部分算力由节点控制而不是合作用于攻击网络，他们将始终创造比攻击者更长的链（也就是攻击该网络需要拿下 &gt;50% 的算力）\n\n消息会尽可能广播。\n\n节点可以随时加入和离开网络。\n\n签名机制如下\n\n\n\n在没有可信第三方的情况下，交易需要被广播（transactions must be publicly announced），同时还需要一个可以让参与者对他们接受到的信息达成一致历史顺序的系统\n\n每个Timestamp包含了对上一个Timestamp的hash，如此循环形成链。时间戳服务器通过对要加时间戳的项目区块进行hash并且广播hash值来工作\n\nPOW：工作量证明包括检测hash结果中的某个值，例如：SHA-256算法 hash值以一些0 bit开头，就是计算结果满足前缀有多少个0才满足PoW机制，平均所需工作量是0的位数的指数倍，工作量证明难度由根据每小时区块产生的平均值确定。如果它们生成得太快，则难度会增加。\n\n论文：Ethereum White Paper (2014)\n智能合约\n一种带有内置完整成熟的图灵完备编程语言的区块链，可用于创建“合同”，该合同可用于编码任意状态转换函数，从而允许用户创建上述任何系统，以及我们尚未想到的许多其他功能，只需通过几行代码编写逻辑即可。\n内容","categories":["6.584"]},{"title":"MySQL实战45讲学习笔记（二）","url":"/2022/05/05/MySQL%E5%AE%9E%E6%88%9845%E8%AE%B2%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/","content":"事务隔离\n 事务的四个特性ACID（Atomicity、Consistency、Isolation、Durability，即原子性、一致性、隔离性、持久性） 原子性：都成功或都失败 一致性：一个事务在执行之前和执行之后，数据库都必须处以一致性状态。比如：如果从A账户转账到B账户，不可能因为A账户\t扣了钱，而B账户没有加钱 隔离性：并发环境中，并发的事务是互相隔离的，一个事务的执行不能被其它事务干扰。 持久性：事务一旦提交后，数据库中的数据必须被永久的保存下来。即使服务器系统崩溃或服务器宕机等故障。只要数据库重新启动，那么一定能够将其恢复到事务成功结束后的状态\n\n隔离得越严实，效率就会越低。\nSQL 标准的事务隔离级别包括：读未提交（read uncommitted）、读提交（read committed）、可重复读（repeatable read）和串行化（serializable ）。\n假设两个事务A和B同时执行，都在更改一个变量P\n\n读未提交：A更改P，并在A提交事务之前B查询到的P是已经被改了的了\n读提交：A更改P，在A提交事务之前B查到的P没变，在A提交事务之后B查到的P变了\n可重复读：随便A怎么更改P，在B开始事务的时候B查到的P和结束事务的时候B查到的P一直是一样的（B的事务期间B没有改P）\n串行化：即对P加锁，一个事务没执行完，另一个就不能操作P\n\n实现原理：数据库里面会创建一个视图，访问的时候以视图的逻辑结果为准。\n\n读未提交没有视图概念\n读提交的视图是在每个 SQL 语句开始执行的时候创建\n可重复读的视图在事务启动时创建的，整个事务存在期间都用这个视图，此时的视图可以认为是静态的，不受其他事务更新的影响。\n串行化直接用加锁的方式来避免并行访问。\n\n\n提醒：Oracle 数据库的默认隔离级别其实就是“读提交”，因此对于一些从 Oracle 迁移到 MySQL的应用，为保证数据库隔离级别的一致，你一定要记得将 MySQL 的隔离级别设置为“读提交”。 配置的方式是，将启动参数transaction-isolation 的值设置成 READ-COMMITTED。你可以用 show variables来查看当前的值。\n\n事务隔离的实现在 MySQL 中，实际上每条记录在更新的时候都会同时记录一条回滚操作。记录上的最新值，通过回滚操作，都可以得到前一个状态的值。不同时刻启动的事务会有不同的 read-view，同一条记录在系统中可以存在多个版本，就是数据库的多版本并发控制（MVCC）。对。当系统里没有比这个回滚日志更早的 read-view 的时候，回滚日志会被删除。所以尽量不要使用长事务，不然回滚段可能会占用大量存储空间，而且长事务还占用锁资源，也可能拖垮整个库。\n事务的启动方式\n显式启动事务语句， begin 或 start transaction。配套的提交语句是 commit，回滚语句是 rollback。例如：START TRANSACTION;事务代码commit;\n\nset autocommit=0 ，这个命令会将这个线程的自动提交关掉。这样子的话你的事务就会从第一句SQL语句到主动执行commit或rollback语句、或者链接断开。set autocommit=0\nmysql中查看当前自动提交状态的命令为：show VARIABLES like &#39;autocommit&#39;;\n\n建议总是使用 set autocommit=1, 并通过显式语句的方式来启动事务。\n如果想减少语句的交互次数，推荐第二种，第二种会比第一种少一个begin，并建议使用commit work and chain语法。如果执行 commit work and chain而不是commit，则是提交事务并自动启动下一个事务，这样也省去了再次执行 begin 语句的开销。同时带来的好处是从程序开发的角度明确地知道每个语句是否处于事务中。\n可以在 information_schema 库的 innodb_trx 这个表中查询长事务下面这个是查找持续时间超过 60s 的事务。select * from information_schema.innodb_trx where TIME_TO_SEC(timediff(now(),trx_started))&gt;60课后问题：如何避免长事务对业务的影响？答：\n\n从应用开发端来看：1.1 确认是否使用了 set autocommit&#x3D;0。1.2 确认是否有不必要的只读事务,即框住了几个select1.3 业务连接数据库的时候，根据业务本身的预估，通过 SET MAX_EXECUTION_TIME 命令，来控制每个语句执行的最长时间，避免单个语句意外执行太长时间。\n从数据库端来看：2.1 监控 information_schema.Innodb_trx 表，设置长事务阈值，超过就报警 &#x2F; 或者 kill；2.2 Percona 的 pt-kill 这个工具不错，推荐使用；2.3 在业务功能测试阶段要求输出所有的 general_log，分析日志行为提前发现问题；2.4 如果使用的是 MySQL 5.6 或者更新版本，把 innodb_undo_tablespaces 设置成 2（或更大的值）。如果真的出现大事务导致回滚段过大，这样设置后清理起来更方便。\n\n\n索引索引的常见模型\n哈希表一种以键 - 值（key-value）存储数据的结构好处是增加新的数据时速度会很快。但缺点是，因为不是有序的，所以哈希索引做区间查询的速度是很慢的。所以，哈希表这种结构适用于只有等值查询的场景\n有序数组有序数组在等值查询和范围查询场景中的性能就都非常优秀，配合二分法，查找只要$O(logN)$，但是插入数据时需要进行$O(N)$的数据移动，所以有序数组索引只适用于静态存储引擎，比如存储去年的统计信息\n平衡二叉树为了维持$O(logN)$的查询复杂度，就不说最基本的二叉搜索树了。平衡树的更新也是$O(logN)$\nN叉树实际上大多数的数据库存储却并不使用二叉树。其原因是，索引不止存在内存中，还要写到磁盘上。因为磁盘IO次数与树的高度成正比，为了减少磁盘IO次数，我们将子结点数量增多，以此降低树的高度\n等等\n\nInnoDB的索引模型在 InnoDB 中，表都是根据主键顺序以索引的形式存放的，这种存储方式的表称为索引组织表。InnoDB使用了B+树，每一个索引在 InnoDB 里面对应一棵 B+ 树。\n举个索引存储的例子一张表，表有主键索引ID和非主键索引k和数据R，表中 R1~R5 的 (ID,k) 值分别为 (100,1)、(200,2)、(300,3)、(500,5) 和 (600,6)，两棵树的示例示意图如下。即左树为主键ID的索引树，右树为非主键索引k的索引树根据叶子节点的内容，索引类型分为主键索引和非主键索引。\n主键索引的叶子节点存的是整行数据。在 InnoDB 里，主键索引也被称为聚簇索引（clustered index）。\n非主键索引的叶子节点内容是主键的值。在 InnoDB 里，非主键索引也被称为二级索引（secondary index）。\n如果查询的条件语句是where ID=500 ，那就会搜索ID这棵树如果条件语句是where k=5 那就会先搜索k这棵树，再拿着搜到的主键ID去ID那棵树里搜。这个过程也称为回表。也就是说，基于非主键索引的查询需要多扫描一棵索引树。因此，我们在应用中应该尽量使用主键查询。（下面这张图不来自上面的例子，随便找的）\n索引维护B+树的维护有点麻烦，比如下图要插入一个400，那就要挪动500和600而更糟的情况是，如果 R5 所在的数据页已经满了，根据 B+ 树的算法，这时候需要申请一个新的数据页，然后挪动部分数据过去。这个过程称为页分裂。而且页分裂还影响数据页的利用率。原本放在一个页的数据，现在分到两个页中，整体空间利用率降低大约 50%。当然为了提高利用率，也会进行合并\n自增主键的使用一些建表规范里面要求建表语句里一定要有自增主键。在建表语句中一般是这么定义的： NOT NULL PRIMARY KEY AUTO_INCREMENT。插入新记录的时候可以不指定 ID 的值，系统会获取当前 ID 最大值加 1 作为下一条记录的 ID 值。对比前面那个插入操作，递增的插入就只会在结点数组的后面追加，而不会出现后面的数据全部挪动的情况，也不会触发叶子节点的分裂，就很好。\n那我们为什么不选用业务逻辑字段作为主键呢？答：业务逻辑不容易保证有序插入\n我们为什么不选用如身份证这种也具有唯一性的字段作为主键呢？答：主键长度越小，普通索引的叶子节点就越小，普通索引占用的空间也就越小。\n所以，从性能和存储空间方面考量，自增主键往往是更合理的选择。\n有没有什么场景适合用业务字段直接做主键的呢？答：K-V场景，即只有一个索引且该索引必须是唯一索引，这种时候直接设K为主键，避免每次查询需要搜索两棵树。\n覆盖索引对于一般的区间查询，比如前面那个例子，对于表(ID,k,R),有主键ID和二级索引k，我们要select * from T where k between 3 and 5，那么会先在k的索引树中查3，再拿对应的ID去查ID的索引树中查R，再在k的索引树中查4，再去ID树查R，再在k索引树查5，没有了就停止了，返回数据集。我们发现上面就回表了两次，显然是低效的\n我们再举个例子，表和索引还是前面那样，但是查询语句是select ID from T where k between 3 and 5，我们发现根据k查到的就是ID，直接就拿到数据了，不需要回表什么的，减少了树的搜索次数，显著提升了查询性能，这就是覆覆盖索引\n覆盖索引就是select的数据列只用从索引中就能够取得，不必从数据表中读取，换句话说查询列要被所使用的索引覆盖一般针对联合索引，如果筛选的字段不在联合索引，那么索引会失效\n显然这是一种空间换时间的操作，对于高频请求，我们就可以建立这种联合索引\n最左前缀原则为了直观地说明这个概念，我们用（name，age）这个联合索引来分析。\n可以看到，索引项是按照索引定义里面出现的字段顺序排序的。当你的逻辑需求是查到所有名字是“张三”的人时，可以快速定位到 ID4，然后向后遍历得到所有需要的结果。但是如果我们的查询条件语句是where name like ‘张 %’时，其实也可以用到这个索引，会先查找到ID3，然后向后遍历\n不只是索引的全部定义，只要满足最左前缀，就可以利用索引来加速检索。这个最左前缀可以是联合索引的最左 N 个字段，也可以是字符串索引的最左 M 个字符。所以查询%com和com%的速度就不一样了，所以解决办法就是倒着插入域名数据moc.udiab.www，这样查询的时候就是’com%’，这样就可以使用索引了，这也是一个在使用数据库时的小技巧。\n因为可以支持最左前缀，所以当已经有了 (a,b) 这个联合索引后，一般就不需要单独在 a 上建立索引了。因此，设置联合索引内字段顺序的第一原则是：如果通过调整顺序，可以少维护一个索引，那么这个顺序往往就是需要优先考虑采用的。\n所以如果有这么一个需求：我们要为高频请求创建 (身份证号，姓名）这个联合索引，并用这个索引支持“根据身份证号查询地址”，我们此时根据最左前缀原则，可以直接用高频请求的（身份证号，姓名）联合索引来充当（身份证号）索引的作用。\n但是如果有联合索引(a,b)，我们现在要加快以b为条件的查询语句速度，我们就不得不维护（b）这个索引了，所以我们可以发现我们可以让字段小一点的字段作为b这个靠右的索引，这样即便多维护（b）这个索引，也比维护（a）在空间上更优\n索引下推结合图讲起来会好一点\nselect * from tuser where name like &#x27;张 %&#x27; and age=10 and ismale=1;\n\n\n无索引下推执行流程（MySQL 5.6 之前）先根据模糊查询查到ID3，然后只能一个一个遍历然后回表\n\n索引下推执行流程（MySQL 5.6 开始）、还是查到ID3，但是在联合索引这边就利用了age=10 这个条件过滤掉了ID3和ID6这两个age对不上的，只会回表两次\n\n\n","categories":["数据库"],"tags":["MySQL"]},{"title":"Lightfm学习记录","url":"/2024/04/05/Lightfm%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/","content":"\n推荐参考资料\n\n官方文档\n仓库地址\n论文地址\nLightFM推荐系统框架学习笔记\nLightFM推荐模型库\n(利于入门)how-i-would-explain-building-lightfm-hybrid-recommenders-to-a-5-year-old\n(用处不大)协同推荐 + lightfm + 根据用户已读诗词推荐\n(可能有用)Recommendation System in Python: LightFM\n(进阶调参有用)针对推荐系统隐式和显式反馈的混合模型——lightFM（下：python场景实例）\n\n\n上面的引用资料都很有用！\n一些使用的细节对于用户和物品的特征设置权重注意网上的文章大多都是未设置权重的，如(user id, [list of feature names])，但是从官方文档我们可以看到实际上是可以设置权重的(user id, &#123;feature name: feature weight&#125;)这个权重的意思就是某字段在全部字段中的占比，比如\n打印稀疏矩阵一般的交互矩阵都是稀疏矩阵，貌似没有很好的实现__str__，为了查看矩阵的值，参考下方 (interactions, weights) = dataset1.build_interactions([(x[0], x[1], x[2]) for x in df.values ])interactions.todense()&#x27;&#x27;&#x27;matrix([[1, 1, 0, 0],       [0, 1, 1, 0],       [1, 0, 1, 1]])&#x27;&#x27;&#x27;\n矩阵分解日常业务中可以得到用户的行为数据(交互)，如点赞&#x2F;评分等，如三元组{userID,itemID,rate},但是复杂业务中矩阵会很大，且矩阵十分稀疏(可能1w个物品，用户A只点赞了5个，我们在lightfm中使用的就是scipy的coo_matrix和csr_matrix)。我们的推荐，实际上就是预测这些空白项的值。因此我们引入矩阵分解，将这个大矩阵分解为两个较小的矩阵以实现降维，如M x N分解为M x k和k x N，即把他们投射到k维(这个k无法解释，此时就成为隐向量了)。此时两个小矩阵重新一乘，原来有的项会近似相等，原来的空白项此时也有值，那么这些值就是预测值了。而对于这个分解过程，就有一些算法和目标函数了，我暂时还没搞懂按照论文的说法，至少比MF模型和CB要好\n混合模型由于协同过滤需要历史交互数据，存在冷启动问题；同时由于基于内容的推荐没有使用交互，用户之间是孤立的，所以实际效果不如协同过滤。所以提出了混合模型，结合了基于内容的推荐(CB)和协同过滤的基于模型推荐(CF协同过滤，MF矩阵分解)两种方式，训练者可以传入用户&#x2F;物品的特征信息(如地理位置&#x2F;年龄)等，同时也传入交互信息{userID,itemID,rate},那么在数据少时仍可以基于用户物品的特征进行适当的推荐所以，如果没有传入用户物品的特征信息，那么模型只是一个单纯的MF模型，基于内容是通过embedding实现的而embedding是通过矩阵分解?得到的，事实上M x k的矩阵元素都是embedding\n论文解读(我是科研新人，如有不对欢迎指正)模型的需求：1. 如果物品A和B经常同时被推荐，那么应该学到A和B非常相似 2. 模型能即时根据新数据进行更新对于需求一，使用latent representation，根据交互信息确定两个物体的embedding的距离。对于需求二，将用户和物体表示为内容特征的线性组合\n对于predict，就是是对用户&#x2F;物品的已分解出的特征矩阵进行点积，再加上偏置，得到一个值$\\hat r_{ui}$，这个就是MF模型的方法。但是这个$q_u$和$p_i$还有那两个偏置都是各特征之和(也算线性组合)，所以也融入了一点CB的思想。$$\\hat r_{ui} &#x3D; f (q_u · p_i + b_u + b_i)$$\n目标函数是求最优化的分解出的矩阵，利用了交互信息，即对于交互信息(有正向和负向的交互)，每个{user,item}对求出$\\hat r_{ui}$然后根据正负属性进行操作，累乘后再两部分相乘。论文中提及的模型结构如下\n我的demo只是对于官方例子和参考其他人的例子改出来的demo，不知道是不是符合原作者的想法。使用这个框架时，对于用户&#x2F;物品的特征和交互量的量化，似乎也是一个关键，而所有例子都没有体现（包括我这个）。不过这本来也该是自己完成的。\nimport pandas as pdimport numpy as npfrom scipy import sparsefrom lightfm import LightFM# 交互信息interaction = [(&#x27;u1&#x27;, &#x27;i1&#x27;, 1), (&#x27;u1&#x27;, &#x27;i3&#x27;, 2), (&#x27;u2&#x27;, &#x27;i2&#x27;, 1), (&#x27;u2&#x27;, &#x27;i3&#x27;, 3),               (&#x27;u3&#x27;, &#x27;i1&#x27;, 4), (&#x27;u3&#x27;, &#x27;i4&#x27;, 5), (&#x27;u3&#x27;, &#x27;i2&#x27;, 2)]# 3user 4item 5种rateinteraction&#x27;&#x27;&#x27;[(&#x27;u1&#x27;, &#x27;i1&#x27;, 1), (&#x27;u1&#x27;, &#x27;i3&#x27;, 2), (&#x27;u2&#x27;, &#x27;i2&#x27;, 1), (&#x27;u2&#x27;, &#x27;i3&#x27;, 3), (&#x27;u3&#x27;, &#x27;i1&#x27;, 4), (&#x27;u3&#x27;, &#x27;i4&#x27;, 5), (&#x27;u3&#x27;, &#x27;i2&#x27;, 2)]&#x27;&#x27;&#x27;user_data = [(&#x27;u1&#x27;, &#123;&#x27;f1&#x27;: 5, &#x27;f2&#x27;: 2, &#x27;f3&#x27;: 1&#125;), (&#x27;u2&#x27;, &#123;&#x27;f1&#x27;: 0, &#x27;f2&#x27;: 1, &#x27;f3&#x27;: 3&#125;), (&#x27;u3&#x27;, &#123;&#x27;f1&#x27;: 4, &#x27;f2&#x27;: 3, &#x27;f3&#x27;: 3&#125;)]users = set(map(lambda i:i[0],interaction))items = set(map(lambda i:i[1],interaction))user_features = [&#x27;f1&#x27;,&#x27;f2&#x27;,&#x27;f3&#x27;]print(users,items,user_features)&#x27;&#x27;&#x27;&#123;&#x27;u3&#x27;, &#x27;u2&#x27;, &#x27;u1&#x27;&#125; &#123;&#x27;i1&#x27;, &#x27;i2&#x27;, &#x27;i4&#x27;, &#x27;i3&#x27;&#125; [&#x27;f1&#x27;, &#x27;f2&#x27;, &#x27;f3&#x27;]&#x27;&#x27;&#x27;from lightfm.data import Dataset# we call fit to supply user id, item id and user/item featuresdataset1 = Dataset()# 把数据先丢进去，生成&#123;值:内部id&#125;的映射，方便后面提取出稀疏矩阵dataset1.fit_partial(users=users,items=items,user_features=user_features)dataset1.mapping()&#x27;&#x27;&#x27;第一行是用户的编号(模型内部生成)第二行是用户的特征及其编号，可以看到用户编号也作为特征第三行第四行就是物品的编号和特征和特征编号搞这么多编号也对应了这个模型适合分析离散的数据，虽然我没怎么懂(&#123;&#x27;u3&#x27;: 0, &#x27;u2&#x27;: 1, &#x27;u1&#x27;: 2&#125;, &#123;&#x27;u3&#x27;: 0, &#x27;u2&#x27;: 1, &#x27;u1&#x27;: 2, &#x27;f1&#x27;: 3, &#x27;f2&#x27;: 4, &#x27;f3&#x27;: 5&#125;, &#123;&#x27;i1&#x27;: 0, &#x27;i2&#x27;: 1, &#x27;i4&#x27;: 2, &#x27;i3&#x27;: 3&#125;, &#123;&#x27;i1&#x27;: 0, &#x27;i2&#x27;: 1, &#x27;i4&#x27;: 2, &#x27;i3&#x27;: 3&#125;)&#x27;&#x27;&#x27;# 构造用户特征矩阵uf = dataset1.build_user_features(user_data)uf.todense()&#x27;&#x27;&#x27;6列三行，对应3个用户的6个特征属性，计算过程我们来看第二行，u2是(&#x27;u2&#x27;, &#123;&#x27;f1&#x27;: 0, &#x27;f2&#x27;: 1, &#x27;f3&#x27;: 3&#125;),他的特征就是&#123;u1:0,u2:1,u3:0,f1:0,f2:1,f3:3&#125;，其他为0的就不看了，只剩&#123;u2:1,f2:1,f3:3&#125;，所以分母为5，分子为各值，就出来了0,2,   0,2,   0.6，这就是权重的作用，可以分配比例matrix([[0.09090909, 0.        , 0.        , 0.36363637, 0.27272728,         0.27272728],        [0.        , 0.2       , 0.        , 0.        , 0.2       ,         0.6       ],        [0.        , 0.        , 0.11111111, 0.5555556 , 0.22222222,         0.11111111]], dtype=float32)&#x27;&#x27;&#x27;# 构造交互矩阵(interactions, weights) = dataset1.build_interactions(interaction)print(interactions.todense())print(weights.todense())# 注意这里的行数是用户数，列数是物品数，所以是交互&#x27;&#x27;&#x27;[[1 1 1 0] [0 1 0 1] [1 0 0 1]][[4. 2. 5. 0.] [0. 1. 0. 3.] [1. 0. 0. 2.]]&#x27;&#x27;&#x27;# windows只能用这个model = LightFM(loss=&#x27;logistic&#x27;)# 下面的参数在ubuntu上可运行，效果更好# 参考 https://github.com/lyst/lightfm/issues/690# model = LightFM(loss=&#x27;warp&#x27;)model.fit(interactions,      user_features= uf,       sample_weight= weights,      epochs=10)      from lightfm.evaluation import auc_score# 好像是测试一下train_auc = auc_score(model,                      interactions,                      user_features=uf                     ).mean()print(&#x27;Hybrid training set AUC: %s&#x27; % train_auc)&#x27;&#x27;&#x27;好像效果不是很好Hybrid training set AUC: 0.5&#x27;&#x27;&#x27;user_id_map, user_feature_map, item_id_map, item_feature_map = dataset1.mapping()# 预测现有的用户# 注意输入的id必须要转换为lightfm内部的iduser_x = user_id_map[&#x27;u3&#x27;]# 即对于该用户，看所有物品和他的匹配度items_range = np.arange(len(items))res = model.predict(user_x, items_range)res = list(zip(items_range,res))res = sorted(res, key=lambda x: x[1],reverse=True)res&#x27;&#x27;&#x27;注意下方拿到的是内部重新编号后的id及对应的分数，需要重新映射回原来的物品id[(3, 0.5297617), (0, 0.51895887), (2, 0.4935133), (1, 0.46990803)]&#x27;&#x27;&#x27;\n","categories":["人工智能"],"tags":["推荐算法"]},{"title":"动漫/电影观后感","url":"/2024/10/09/anime_movie_reflection/","content":"资源\n稀饭动漫\n次元城动画\n\n孤独摇滚没有 mygo、gbc 那样闹矛盾，全程喜剧番，虽然波奇酱那种社恐的人我真想象不到，而且直到结尾都没有改变太多。但是他们乐队的气氛还是很令人向往的。\n其实波奇酱生活的比我们都好，她有着一个温馨而快乐的家庭；遇到了虹夏这样开朗乐观的女生，还一起组了乐队；她有着高超的吉他技术，而且她的家庭条件还不错。真羡慕啊。\n然后，感觉只有 ギターと孤独と蒼い惑星 这首比较好听。\n星际穿越非常非常牛逼，我居然研一才下定决心看。关于时间、维度这些的演绎让电影的逼格一下起来了。其次主角父女间的亲情、那个寒冷星球上的人性黑暗面、主角将飞船与空间站对接的智慧与勇气，都使我震撼。最后那句贯穿全篇的诗歌，其中表达了不甘平庸、死前也要扑腾的含义，也让我印象深刻。\n\nDo not go gentle into that good night,\nOld age should burn and rave at close of day;\nRage, rage against the dying of the light.\n\n中二病也要谈恋爱哦哦哦！我的幼态审美又起来了，六花赛高！！！\n\n居然也是10年前的番了，现在看感觉太理想了(很适合我这种在被窝里看番的肥宅)。东方大国的高中生活怎么可能这样自由，这种chu-2 byo也几乎不存在，与升学不同的玩乐理念多半被遏制，孩子也总被教育要为自己、家人着想。六花被家庭束缚、暂时毕业的那段真的很让人心疼。像主角那样强行挽留六花、让他继续保持中二、积极向上乐观的行为，真的很yasashii desu。\n哦对了，森凸大法好嘎嘎嘎\n\n\n观看顺序：\n\n第一季\nDEPTH OF FIELD~爱与憎恨的剧场(主仆中二战斗)\nLite(或者说第14集,一级日常)\n【剧场版】小鸟游六花·改(可以看下开头和结尾，这里不太一样。而中间内容说是六花的回忆，其实就是第一季剧情重放一遍)\n第二季(有新人物)\n第二季 恋lite(第14集,一级日常)\n【剧场版】中二病也要谈恋爱！Take On Me(3个小时，1小时30分钟之前是第一季或者【改】的内容，而且很多地方删减了，看起来没有因果很不连贯，好抽象的电影制作方法。后面的半段就是新内容了，安心食用！虽然剧情有点水，就是到处私奔，不过也算是最终完全确定关系吧，也是给这个 IP 一个不错的尾声了)\n\nThe Amazing Digital Circus(神奇数字马戏团)3D可爱卡通风格(别被画风骗了！)，好看。\n落叶归根07年的电影，因为刷到短视频片段，加上评论都说是最好的公路片，还有赵本山，所以想看看。\n不知道是在18年左右之后的抽象网络环境中呆久了，外加在城市生活与互联网短视频的影响下，看这种充满人文气息的老片子，感觉在看另一个世界，一个并非纸醉金迷，而是作为老百姓的普普通通的生活与心路历程。\n以前看天气之子之后，也看见“公路片”，但是不太理解。现在看完这部才知道，公路片就是在路上遇到形形色色的人，在路上感悟与成长。虽然不能了解到萍水相逢的过客是否达成了愿望，但也能感受到一种生活的动力与主角的踏实诚恳。虽然主角与他的兄弟历尽千难万苦，兄弟的儿子也失去了他的父亲，但最终还是有个具体的地址，最终还是会落叶归根。\n本山大叔在车顶高呼的台词令人动容，印象深刻。这也许就是当年一个普通人的爱国心与生活热情。虽然也能联想到黄渤春晚的那个《我的要求不算高》。。。\n\n如果我的祖国是一条大路，我就是一辆汽车，我跑啊跑，我多快乐!\n如果我的祖国是一棵大树，我就是一片树叶，我摇啊摇，我多快乐!\n\n这个杀手有点冷以前是小孩子的时候还能代入一点女主，现在看来，纯纯的找事害人精啊妈的。\n不过按照现在的治安水平，也想象不到这种流水线杀人作业和缉毒局局长贩毒的剧情了。\n别当欧尼酱了难评，带脑子的看，霓虹这么一个成年男性就这么消失，然后一个黑户直接插进初中班了，还挺离谱的(可能这就是博士妹妹的大手！)。\n然后男主就这么飞快地接受女性身份而且乐在其中，甚至不想变回来了，对我还是有点冲击的。(不理解但尊重)\n但抛开脑子看，全篇都是和孤独摇滚一样有一点剧情推进但不多的日常，欢乐，还挺エロ，对幼态审美的宅男来说还是赛高的。\n感觉和《天使降临到我身边》不相上下呢。\n齐木楠雄的灾难男主虽然有超能力但也有人性，虽然不想多管闲事但是不希望看到坏事发生，全程的捧哏吐槽也很搞笑，一点点的恋爱喜剧情节也很有意思。\n发条橙最近经常在评论区看到这个电影名，所以抽了一个半小时看了看。\n影片里的女郎就不谈了，胸大脸美，比很多限制级片的都好看。只根据我愚钝的理解能力，看出来的是一个过度狂躁、但又不乏理智的青年，在犯罪后受到了应有的惩罚，但是又因政治因素得以获救。\n感觉自己还是看的太浅了，所以还是看了下知乎，果然有很多深层解读。\n首先“发条橙”就是《A Clockwork Orange》的直译。“橙子”（Orange），在马来语里意思是“人”（Orang）。用“发条橙”形容“失去了自由意志的傀儡，被发条操控着的发条人”。牧师的话经常被拿来讨论，“当一个人无法选择，他也不再为人”，正说的是主角在实验所里被捆绑，无法选择不看那些恶心的画面、不听自己最爱的贝多芬第九交响曲，已不再是人。\n而在最后，虽然与医生的第一反应的测试中，主角说了很多很暴力偏激的想法，下面这句最有意思，虽然粗鲁，但是是主角原来的风趣幽默，而不是对sex恐惧，说明主角已经回归了他的有血有肉的状态。\n也不知道从何时起，我深陷教条主义的囹圄之中，不可自拔。我羡慕离经叛道者。\nhttps://www.zhihu.com/question/22036793\n阳光灿烂的日子95年姜文的电影。是我不能想到(现在也接触不到的)的70年代的军队大院子弟的生活。吸烟、喝酒、泡妞。能感受到电影中传达的是有关少年懵懂的恋爱。但是又夹杂了一些很刻意的情节与旁白讲述，比如徐北蓓的突然淡出剧情、喝酒那晚的真假记忆、给王朔举高高的时候镜头刚好到教员且旁白说被几个孩子刺死了。\n看完知乎影评果然掺杂了点政治叙事。感觉看完之后回味过来是那么个事，但对我来说意义不大，我只想感受下姜文电影的那种感觉，这次的是文艺感？我也不知道怎么描述。\n总的来说，看完之后让我对少年的懵懂恋爱、对自己是否美化记忆之类，有了几分钟的思考。\n如何评价电影《阳光灿烂的日子》？ - Ludwigsnachen的回答 - 知乎\n(突然想起来，宁静的还挺大，我知道她的时候她已经是阿姨了都)\n幸运星现视研二代目凉宫春日的消失我的青春恋爱物语果然有问题你好世界看完让我想到了天气之子，也是世界被主角两人的恋爱弄的支离破碎。世界观还挺牛的，层层套娃，最后结果被救赎的是男主。甜甜甜！然后里面那首歌也挺震撼的，不错不错。只是当年我以为和程序员有关，现在想来几乎没有一点关系，意思就是对世界的热爱与拥抱。\n死亡笔记从L死之后就跳着看了，熟人死完，一堆新人粉墨登场，已经看不懂了。夜神月是真的冷酷到我觉得逆天。然后我看着L被耍来耍去，最后放下戒备的时候当场去世，还挺可惜的。里面的女生都没有个善终。唉。不过确实是个佳作。\n2001太空漫游叛逆的鲁鲁修魔法少女小樱夏目友人帐虫师甲方乙方地。-关于地球的运动-飞跃情海摇曳露营罗马假日迷宫饭小林家的龙女仆奇蛋物语漂流少年笨女孩紫罗兰永恒花园赛博朋克青春期猪头少年不做兔女郎学姐的梦路人女主的养成方法三峡好人邓小平小道美国精神病人之前因为sigma的相关表情包去看了一下，这次为了写观后感又看了一下。\n天使爱美丽刀剑神域girls brand cry花丸幼稚园败犬女主太多了！男子高中生的日常理科生坠入情网无机杀手爱死机天使降临到我身边阿兹漫画大王悠哉日常大王龙与虎日常吊带袜天使辉夜大小姐高木同学搞姬日常虚构推理"},{"title":"MySQL实战45讲学习笔记（一）","url":"/2022/02/26/MySQL%E5%AE%9E%E6%88%9845%E8%AE%B2%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/","content":"查询语句执行过程  （select * from T where ID&#x3D;10;）mysql的逻辑架构图大体来说，MySQL 可以分为 Server 层和存储引擎层两部分，不同的存储引擎共用一个Server 层。\nServer 层包括连接器、查询缓存、分析器、优化器、执行器等，涵盖 MySQL 的大多数核心服务功能，以及所有的内置函数（如日期、时间、数学和加密函数等），所有跨存储引擎的功能都在这一层实现，比如存储过程、触发器、视图等。\n而存储引擎层负责数据的存储和提取。其架构模式是插件式的，支持 InnoDB、MyISAM、Memory 等多个存储引擎。现在最常用的存储引擎是 InnoDB，它从 MySQL 5.5.5 版本开始成为了默认存储引擎。不过可以在 create table 语句中使用 engine=xxx来指定引擎\n下文涉及到的是select * from T where ID=10；这条SQL运行的过程\n1. 连接器连接器负责跟客户端建立连接、获取权限、维持和管理连接。连接命令：\nmysql -h$ip -P$port -u$user -p如mysql -hlocalhost -uroot -proot\n可以只写个-p并换行再输密码，这样安全一些。如果你连的是生产服务器，强烈建议你这么做。命令中的mysql是客户端工具，用来跟服务端建立连接。在输入用户名和密码后，如果有误，则报错Access denied for user 否则在权限表内查出你的权限，你接下来的操作就限于这个权限内了但是，如果一个用户已经登录了，那即便管理员修改了他的权限，他当前的权限也不会收到影响，除非他重新登录，建立新的连接\n连接完成后如果不在这个连接上进行操作，那么这个连接就处于空闲状态，可以在 show processlist 命令中看到它。\n客户端超过8h没响应，就会断开这个连接，这个时间是由参数wait_timeout控制的，即默认是8h此时再次发送请求的话，就会收到一个错误提醒： Lost connection to MySQL server during query。\n在使用中肯定要尽量使用长连接，但是长连接也有弊端：MySQL 在执行过程中临时使用的内存是管理在连接对象里面的。这些资源会在连接断开的时候才释放。这些内存累计起来就可能导致进程被系统杀死，即异常重启对此有两种解决方案：\n\n规定一个最长连接时间，连接时间超过这个时间的连接就断开；如果刚刚执行过了一个占内存很大的操作，就断开。\n如果你用的是 MySQL 5.7 或更新版本，可以在每次执行一个比较大的操作后，通过执行 mysql_reset_connection 来重新初始化连接资源。这个过程不需要重连和重新做权限验证，但是会将连接恢复到刚刚创建完时的状态。\n\n2. 查询缓存大多数情况下作者不建议使用查询缓存，因为弊大于利原因：只要你对一张表进行了更新，这张表的查询缓存就会清空，所以除非是很长时间都不会更改的、近似静态或就是静态的表，就推荐用这个查询缓存。需要注意的是，MySQL 8.0 版本直接将查询缓存的整块功能删掉了，也就是说 8.0 开始彻底没有这个功能了。\n3. 分析器即解析SQL语句\n\n词法分析：提取出”select”这个查询操作关键词，”T”这个表名\n语法分析：分析SQL是否符合语法，不符合就会You have an error in your SQL syntax，查错要关注的是紧接use near之后的内容。\n\n4. 优化器优化器是在表里面有多个索引的时候，决定使用哪个索引；或者在一个语句有多表关联（join）的时候，决定各个表的连接顺序。有时候几个执行方法的逻辑结果是一样的，但是执行的效率会有不同，而优化器的作用就是决定选择使用哪一个方案。\n5. 执行器先判断用户有没有对表T进行查询操作的权限如果有权限，就打开表继续执行，执行器就会根据表的引擎定义，去使用这个引擎提供的接口，获得结果集返回给客户端。\n你会在数据库的慢查询日志中看到一个 rows_examined 的字段，表示这个语句执行过程中扫描了多少行。这个值就是在执行器每次调用引擎获取数据行的时候累加的，但是引擎扫描行数跟 rows_examined 并不是完全相同的。\n课后问题：如果表 T 中没有字段 k，而你执行了这个语句 select * from T where k=1, 那肯定是会报Unknown column ‘k’ in ‘where clause，这个错误是在我们上面提到的哪个阶段报出来的呢？答：分析器。分析器会提取出输入的SQL的关键词，并且判断语句是否正确，表是否存在，列是否存在等。\n更新操作过程中的日志模块 （update T set c&#x3D;c+1 where ID&#x3D;2;）与查询流程不一样的是，更新流程还涉及两个重要的日志模块，redo log（重做日志）和 binlog（归档日志）。redo log 是 InnoDB 引擎特有的日志， binlog是server层的日志\nredo log如果每一次的更新操作都需要写进磁盘，然后磁盘也要找到对应的那条记录，然后再更新，整个过程 IO 成本、查找成本都很高。\n所以有了Mysql的WAL(Write-Ahead Logging)技术，即先写日志，再写磁盘。当有一条记录需要更新的时候，InnoDB 引擎就会先把记录写到 redo log 里面，并更新内存，这个时候更新就算完成了。同时，InnoDB 引擎会在适当的时候，将这个操作记录更新到磁盘里面，而这个更新往往是在系统比较空闲的时候做，\n当然，redo log也有大小限制，当大小不足时会先停下来把一部分记录更新到磁盘，以空出空间给后面的操作用\n有了 redo log，InnoDB 就可以保证即使数据库发生异常重启，之前提交的记录都不会丢失，这个能力称为crash-safe。\n两个日志模块的比较有两个日志模块的原因：Mysql自带的MyISAM引擎不能crash-safe，**binlog 日志只能用于归档**，所以那个写了innoDB的公司就在innoDB里写了具有crash-safe能力的redo log\n两种日志的不同：\n\nredo log 是InnoDB 引擎特有的；binlog 是 MySQL 的 Server 层实现的，所有引擎都可以使用。\n\nredo log 是物理日志，记录的是“在某个数据页上做了什么修改”；&#96;binlog1 是逻辑日志，记录的是这个SQL语句的原始逻辑，比如“给 ID&#x3D;2 这一行的 c 字段加 1 ”。\n\nredo log 是循环写的，空间固定会用完；binlog 是可以追加写入的。“追加写”是指 binlog 文件写到一定大小后会切换到下一个，并不会覆盖以前的日志。\n\nredo log（重做日志）让InnoDB存储引擎拥有了崩溃恢复能力。binlog（归档日志）保证了MySQL集群架构的数据一致性。\n\n\n执行器在用innoDB引擎执行这个update操作的流程\n执行器先从引擎中找到数据，如果在内存则直接返回，如果不在内存查询后返回\n执行器拿到数据后，会先修改数据，然后调用引擎接口重新写入数据\n引擎将数据更新到内存，同时写入redo log，此时处于prepare状态\n执行器生成这个操作的binlog\n执行器调用引擎的事务提交接口，将redo log状态改成commit状态，更新完成\n\n作者的图\n两阶段提交注意最下面的这三个发现一个记将录写入redo log的操作，愣是先把先设为prepare状态，、再设置为commit状态，难道不能直接设置吗？我们假设不搞两阶段提交，并且举出两种情况\n\n先写binlog，再写redo log当前事务提交后，写入binlog成功，之后主节点崩溃。在主节点重启后，由于没有写入redo log，因此不会恢复该条数据。而从节点依据binlog在本地回放后，会相对于主节点多出来一条数据，从而产生主从不一致。\n\n先写redo log，再写binlog当前事务提交后，写入redo log成功，之后主节点崩溃。在主节点重启后，主节点利用redo log进行恢复，就会相对于从节点多出来一条数据，造成主从数据不一致。\n\n\n因此，只写一次redo log与binlog，无法保证这两种日志在事务提交后的一致性。也就是无法保证主节点崩溃恢复与从节点本地回放数据的一致性。\n不只是误操作后需要用这个过程来恢复数据。当你需要扩容的时候，也就是需要再多搭建一些备库来增加系统的读能力的时候，现在常见的做法也是用全量备份加上应用 binlog 来实现的，这个“不一致”就会导致你的线上出现主从数据库不一致的情况。\nredo log 和 binlog 都可以用于表示事务的提交状态，而两阶段提交就是让这两个状态保持逻辑上的一致。即：\n\nredo 还没写入之前崩溃，这时binlog也还没写入，恢复数据不受影响\nredo写好了，binlog还没写入之前崩溃，这是redo处于prepare状态，还没有提交，恢复时事务会回滚，binlog也还没有记录，所以不会影响\nredo写好了，binlog写好了，但是还没有commit时崩溃了，这时会判断对应事务的binlog是否存在并完整：（1）如果存在并完整则提交事务，这时恢复到事务提交之后的状态，因为binlog中有记录，所以恢复成功（2）如果binlog不存在或者不完整，这时会恢复到事务提交之前的状态，因为binlog中无记录或者不完整的记录不会生效，所以恢复也成功。\nredo已经有了commit标识，则直接提交事务，同时因为binlog有记录，则恢复数据也不受影响\n\nredo log 用于保证 crash-safe 能力。innodb_flush_log_at_trx_commit 这个参数设置成 1 的时候，表示每次事务的 redo log 都直接持久化到磁盘。这个参数建议设置成 1，这样可以保证 MySQL 异常重启之后数据不丢失。\nsync_binlog 这个参数设置成 1 的时候，表示每次事务的 binlog 都持久化到磁盘。这个参数也建议设置成 1，这样可以保证 MySQL 异常重启之后 binlog 不丢失。\n","categories":["数据库"],"tags":["MySQL"]},{"title":"bcompare使用","url":"/2024/10/31/bcompare%E4%BD%BF%E7%94%A8/","content":"因为用meld报错/usr/bin/python3: symbol lookup error: /snap/core20/current/lib/x86_64-linux-gnu/libpthread.so.0: undefined symbol: __libc_pthread_init, version GLIBC_PRIVATE，只好改用bcompare\n网站：https://www.scootersoftware.com/download.php?zz=dl4\n下载链接：https://www.scootersoftware.com/files/bcompare-4.4.6.27483_amd64.deb\n安装与输入破解码\nsudo dpkg -i bcompare-4.4.6.27483_amd64.debcd /usr/lib/beyondcompare/sudo sed -i &quot;s/keexjEP3t4Mue23hrnuPtY4TdcsqNiJL-5174TsUdLmJSIXKfG2NGPwBL6vnRPddT7tH29qpkneX63DO9ECSPE9rzY1zhThHERg8lHM9IBFT+rVuiY823aQJuqzxCKIE1bcDqM4wgW01FH6oCBP1G4ub01xmb4BGSUG6ZrjxWHJyNLyIlGvOhoY2HAYzEtzYGwxFZn2JZ66o4RONkXjX0DF9EzsdUef3UAS+JQ+fCYReLawdjEe6tXCv88GKaaPKWxCeaUL9PejICQgRQOLGOZtZQkLgAelrOtehxz5ANOOqCaJgy2mJLQVLM5SJ9Dli909c5ybvEhVmIC0dc9dWH+/N9KmiLVlKMU7RJqnE+WXEEPI1SgglmfmLc1yVH7dqBb9ehOoKG9UE+HAE1YvH1XX2XVGeEqYUY-Tsk7YBTz0WpSpoYyPgx6Iki5KLtQ5G-aKP9eysnkuOAkrvHU8bLbGtZteGwJarev03PhfCioJL4OSqsmQGEvDbHFEbNl1qJtdwEriR+VNZts9vNNLk7UGfeNwIiqpxjk4Mn09nmSd8FhM4ifvcaIbNCRoMPGl6KU12iseSe+w+1kFsLhX+OhQM8WXcWV10cGqBzQE9OqOLUcg9n0krrR3KrohstS9smTwEx9olyLYppvC0p5i7dAx2deWvM1ZxKNs0BvcXGukR+/g&quot; BCompare\n\n启动，并尝试enter key 激活\n\n输入key\n--- BEGIN LICENSE KEY ---GXN1eh9FbDiX1ACdd7XKMV7hL7x0ClBJLUJ-zFfKofjaj2yxE53xauIfkqZ8FoLpcZ0Ux6McTyNmODDSvSIHLYhg1QkTxjCeSCk6ARz0ABJcnUmd3dZYJNWFyJun14rmGByRnVPL49QH+Rs0kjRGKCB-cb8IT4Gf0Ue9WMQ1A6t31MO9jmjoYUeoUmbeAQSofvuK8GN1rLRv7WXfUJ0uyvYlGLqzq1ZoJAJDyo0Kdr4ThF-IXcv2cxVyWVW1SaMq8GFosDEGThnY7C-SgNXW30jqAOgiRjKKRX9RuNeDMFqgP2cuf0NMvyMrMScnM1ZyiAaJJtzbxqN5hZOMClUTE+++--- END LICENSE KEY -----\n激活成功\n点这个选择待比较目录\n注意要改下设置，不然连时间戳不对他也会认为文件不一致。下面那个“比较内容”的设置，我是跟着网上博客学的，我也不知道是干嘛的。\n这样之后如果apt update可能会报错：E: 仓库 “https://www.scootersoftware.com bcompare4 Release” 没有数字签名。，直接把这个删掉即可：rm /etc/apt/sources.list.d/scootersoftware.list\n"},{"title":"MySQL常问考点总结","url":"/2022/07/03/MySQL%E5%B8%B8%E9%97%AE%E8%80%83%E7%82%B9%E5%AD%A6%E4%B9%A0/","content":"范式\n第一范式（1NF）：数据库表中的每个属性都是原子、不可再分的。\n第二范式（2NF）：第二范式要求满足第一范式的基础上，非主键属性完全依赖于主键。也就是说，表中的非主键属性必须完全依赖于主键，而不能部分依赖于主键，即不能依赖于组合键的一部分。下表就不符合2NF，学生姓名和课程名会重复出现。\n\n\n\n\nStudentID\nCourseID\nStudentName\nCourseName\nGrade\n\n\n\n1\n101\nAlice\nMath\nA\n\n\n1\n102\nAlice\nScience\nB\n\n\n2\n101\nBob\nMath\nB\n\n\n2\n103\nBob\nHistory\nA\n\n\n3\n102\nCharlie\nScience\nC\n\n\n\n第三范式（3NF）：第三范式要求满足第二范式的基础上，消除表中的传递依赖。传递依赖是指非主键属性通过其他非主键属性传递依赖于主键。下表不符合3NF。部门名和部门名传递依赖于部门ID\t，而不是主键(员工ID)\n\n\n\n\nEmployeeID\nEmployeeName\nDepartmentID\nDepartmentName\nDepartmentManager\n\n\n\n1\nAlice\n101\nSales\nJohn\n\n\n2\nBob\n102\nMarketing\nKate\n\n\n3\nCharlie\n101\nSales\nJohn\n\n\n4\nDavid\n103\nFinance\nMary\n\n\n5\nEmma\n102\nMarketing\nKate\n\n\n\n还有其他范式如BCNF（Boyce-Codd范式）、第四范式（4NF）和第五范式（5NF）。这些范式的目标是进一步减少冗余和数据异常，但随着范式的提高，设计和查询复杂度也会增加。\n范式设计需要在满足业务需求和性能要求之间进行权衡。在某些情况下，可以通过反范式化来优化性能，即有意地引入一定程度的冗余数据来减少查询的复杂性和提高性能。\n\n事务事务是一系列数据库操作的逻辑单元。\n\nACID:\n\n原子性（Atomicity）：全部成功或全部回滚。事务执行期间的所有操作记录到日志中，失败时可以使用日志进行回滚操作。\n一致性（Consistency）：事务的执行不会破坏数据库的完整性约束。设计数据库时定义约束、触发器等以保证数据一致性。\n隔离性（Isolation）：并发执行的事务之间应该相互隔离，一个事务的中间结果对其他事务是不可见的。使用**锁和MVCC(多版本并发控制)**等。MVCC可以使每个事务只看到自己的视图。\n持久性（Durability）：事务一旦提交，对数据库的改变应该是永久性的，即使发生系统故障也不会丢失。使用日志记录事务的操作信息，即使故障重启也能恢复。\n\n\n事务隔离级别\n\n读未提交（Read Uncommitted）：最低的隔离级别，允许一个事务读取另一个事务未提交的数据，可能导致脏读、不可重复读和幻读问题。\n读已提交（Read Committed）：要求一个事务只能读取另一个事务已提交的数据，解决了脏读问题，但可能会出现不可重复读和幻读问题。\n可重复读（Repeatable Read）：要求一个事务在整个过程中看到的数据保持一致，解决了不可重复读问题，但可能会出现幻读问题。\n串行化（Serializable）：最高的隔离级别，要求事务串行执行，避免了脏读、不可重复读和幻读问题。\n\n\n事务隔离性问题\n\n脏读：事务B对数据进行了修改，但是又回滚了。事务A读了数据并正常执行结束，那么数据是有误、脏的。\n不可重复读：事务A读取数据，事务B修改或删除该数据并执行结束，事务A再读取时，两次数据读取不一致\n幻读：通常发生在范围查询时，不可重复读是因为实现可重复读时是对查询范围内的每个数据进行锁定，但是其他事务新增或删除(与不可重复读的区别)的数据没有锁定，当前事务仍然可以查询到查询范围内其他事务新插入的数据，那么事务A读、事务B增删、事务A读，事务A两次读取会不一致。\n\n  隔离级别的增加在增加安全的同时，也增加系统开销和并发性降低，在实际应用中需要根据业务需求和性能要求来选择适当的隔离级别。\n\n数据库的锁\n\n读锁：可以多个事务同时读。但是只要有一个读，其他人就不能获取写锁。\n写锁：只要有一个事务持有写锁，其他事务就不能获取读锁和写锁。\n意向锁\n行锁：事务只锁定访问的行。\n表锁 ：事务锁定整张表，性能比行锁好，但是更容易锁冲突和阻塞。\n行锁细粒度更高，锁管理开销较大。而表锁粒度较粗，容易发生阻塞。选择时需要考虑并发读和并发写的多少、业务需要的并发控制细粒度。  数据库根据并发控制算法和事务隔离级别来管理锁机制，常见的并发控制算法包括两段锁协议、多版本并发控制（MVCC）等。\n\n\n页级锁\n\n\n两段锁协议指所有的事务必须分两个阶段对数据项加锁和解锁\n\n加锁：在对任何数据进行读操作之前要申请并获得S锁（共享锁），在进行写操作之前要申请并获得X锁（排它锁）。加锁不成功，则事务进入等待状态，直到加锁成功才继续执行。\n解锁：当事务释放了一个封锁以后，事务进入解锁阶段，在该阶段只能进行解锁操作不能再进行加锁操作。\n\n\nMVCC维护多个版本以实现并发控制。每个数据行关联一个版本号和时间戳。\n\n读操作：每个事务有一个全局唯一时间戳，无法读取时间戳晚于他自己的时间戳的数据版本。\n写操作：创建一个新的数据版本，并为他分配一个新的时间戳。旧版本的数据仍可以被旧版本事务读取。在该事务提交后，该新版本才可以对新事务可见。\n垃圾回收：旧版本数据会根据垃圾回收算法，即时回收空间。\n\n\n日志：\n\nredo log：物理操作日志，如页号xxx，偏移量yyy写入了’zzz’数据。可以崩溃恢复时重新执行未提交的事务或恢复已提交事务的修改。用于保证持久性。\nundo log：逻辑操作日志，记录反操作用于回滚。比如进行了INSERT操作，那么就记录一条DELETE操作，以便在回滚事务或进行崩溃恢复时撤销已提交的事务修改。保证一致性、原子性。回滚到特定的版本即MVCC。能实现事务的隔离性。\nbin log:记录所有的修改(写)操作，不记录读操作。用于数据恢复和数据复制。\n慢查询日志：记录了执行时间超过预设阈值的查询语句。可以找到潜在的性能瓶颈并进行优化。\n其他的还有什么查询日志、错误日志啥的\n在事务执行修改操作之前，MySQL会将修改操作记录到Redo Log中，以确保事务的持久性。在事务提交之前，MySQL会将修改操作记录到Undo Log中，以便在回滚事务或崩溃恢复时撤销已提交事务的修改。在事务提交后，MySQL将Redo Log中的修改操作应用到数据库中的数据页，确保数据的持久性。在事务回滚或崩溃恢复时，MySQL根据Undo Log中的信息撤销或重做事务的修改，恢复数据库到一致状态。\n\n\n\n数据库的备份和恢复机制全量备份(全部数据)和增量备份(新写的数据)\n数据库扩容\n垂直硬件扩容：增加CPU、内存、磁盘\n水平扩展：集群、负载均衡(一致性hash)\n数据分片：将数据分散存储(垂直拆分和水平拆分)，每个节点只存储部分数据\n数据库复制：创建冗余副本\n\n底层数据结构和索引一般使用InnoDB作为存储引擎，ACID、MVCC\nB+树\n多叉树，而且修改操作要服务于降低层数的目的，减少IO\n只有叶节点存放数据\n\n存储引擎相关\n每种索引都是一棵B+树，分为主键索引(聚簇索引)、非主键索引(二级索引)\n一般来说要先把二级索引扫描完得到数据对应的ID，然后拿ID去主键索引上找\n回到主键上找的操作叫做回表。要回表的原因是：由于查询结果所需要的数据只在主键索引上有，所以不得不回表。\n覆盖索引：如果二级索引上已经存了要查的数据(联合索引、冗余索引)，那么就查完二级索引就直接返回数据，不需要回表\n\n\n最左前缀：索引上搜索时，会从左到右看索引(联合索引)的内容，所以最左的字段最好是能快速命中的，比如就要将经常LIKE的数据放在索引靠右的位置，让左边索引先精准命中，然后缩小范围去LIKE\n索引下推：如果二级索引是个联合索引 ( id , age )，那么在有where age=10的条件时，本来MySQL 5.6之前是一个一个拿着id去回表，然后再检查主键索引上的age字段。MySQL 5.6开始，因为二级索引有age字段，所以会age的判断操作放在二级索引上进行，少了回表。\n\n2PC协议分布式事务协议下面是2PC协议的工作流程：\n\n准备阶段（Prepare Phase）：\n 1.1 协调者（Coordinator）向所有参与者（Participants）发送事务的准备请求。\n\n\n1.2 参与者执行事务的操作，并将操作的结果记录在本地的事务日志中。1.3 参与者向协调者发送“准备就绪”（Ready）或“中止”（Abort）的响应。1.4 如果所有参与者都发送了“准备就绪”响应，协调者进入下一个阶段。否则，协调者发送“中止”消息，终止事务。2. 提交阶段（Commit Phase）：    2.1 协调者向所有参与者发送“提交”（Commit）请求。    2.2 参与者收到“提交”请求后，将事务的操作结果应用到持久化存储中。    2.3 参与者向协调者发送“完成”（Done）的响应。    2.4 协调者收到所有参与者的“完成”响应后，事务被提交，协调者发送“提交完成”（Commit Done）消息给所有参与者。\n如果在任何阶段发生故障或参与者无法完成操作，2PC协议具有回滚机制来确保事务的一致性。\n2PC简单，可以实现强一致性缺点:\n\n同步阻塞：在2PC的准备阶段和提交阶段，所有参与者都需要等待协调者的指令，这会导致同步阻塞，影响性能和可伸缩性。\n单点故障：协调者是2PC协议的中心节点，一旦协调者发生故障，整个协议无法继续执行。\n阻塞等待：如果有一个参与者无法正常响应或发生故障，其他参与者可能会一直阻塞等待，造成资源浪费和延迟。\n\nMySQL的分布式部署通过日志复制实现异步数据同步\n分布式集群\n主从复制、读写分离：主节点接收写操作，将操作记录到binlog，从节点复制主节点的binlog保持数据一致性。从节点处理只读操作。可以实现高可用、可伸缩(增加从节点分担读压力)、数据备份。\n\nMySQL的安全机制\n访问控制\n用户认证、密码加密\n管理员分配权限，权限包括数据库级别、表级别、列级别\n安全连接：支持SSL&#x2F;TLS协议，加密网络连接\n\n\n审计\n日志记录：错误日志、查询日志\n支持审计插件：记录和监控数据库操作\n\n\n数据加密\n定期备份\n\n数据库连接池和连接管理连接管理涉及连接的创建、获取、释放和销毁等操作，它负责确保连接的可用性和有效性，并管理连接的生命周期。通过重复利用连接，避免了频繁创建和销毁连接的开销，提高了数据库访问的效率。\n","categories":["数据库"],"tags":["MySQL"]},{"title":"casbin权限和配置文件的理解","url":"/2023/01/23/casbin%E6%9D%83%E9%99%90%E5%92%8C%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E7%9A%84%E7%90%86%E8%A7%A3/","content":"\n官方文档\n\n基础权限模型下图为我基于个人理解画出来的(关于多租户RBAC模型可能有误)发现一篇博客讲的还行Casbin权限模型，看他的权限系统设计模型分析部分\ncasbin配置文件内容的结构解释注意matchers可以设置多个。我在知道这个之前一直疑惑为什么需要policy_effectpolicy.csv只是一个数据文件，即持久化了的用户权限数据，也可以存在数据库中而model.conf一般在设计项目权限模型时就定好了，一般就用conf文件或者字符串形式\nmodel.conf文档相关\n至少包含[request_definition], [policy_definition], [policy_effect], [matchers]\n使用#进行注释\n[policy_definition]如果只有操作没有具体资源，比如write-all-objects，可以只写p = sub, act\n[policy_effect]：自己去看官方文档吧，感觉怪怪的\n\n模型方案的具体实现\nACL(最基础的，后面模型的改变均基于此)  [request_definition]r = sub, obj, act[policy_definition]p = sub, obj, act[policy_effect]e = some(where (p.eft == allow))[matchers]m = r.sub == p.sub &amp;&amp; r.obj == p.obj &amp;&amp; r.act == p.act\n有超级用户的ACL：  matchers加个如果是超级用户就放行  m = r.sub == p.sub &amp;&amp; r.obj == p.obj &amp;&amp; r.act == p.act || r.sub == &quot;root&quot;\n没有用户、只有资源和操作的ACL  去掉所有的sub  r = obj, actp = obj, actm = r.obj == p.obj &amp;&amp; r.act == p.act\n基础RBAC  添加role_definition，且只有两个下划线  [role_definition]g = _, _\n  matcher添加用户-角色关联  m = g(r.sub, p.sub) &amp;&amp; r.obj == p.obj &amp;&amp; r.act == p.act\n具有资源角色的RBAC  相比基础RBAC添加角色-资源关联  g = _, _g2 = _, _m = g(r.sub, p.sub) &amp;&amp; g2(r.obj, p.obj) &amp;&amp; r.act == p.act\n带有域&#x2F;租户的RBAC\t  三个下划线并添加关联  g = _, _, _m = g(r.sub, p.sub, r.dom) &amp;&amp; r.dom == p.dom &amp;&amp; r.obj == p.obj &amp;&amp; r.act == p.act\nABAC  matchers进行属性的过滤，且不需要policy文件，因为权限是即时得出的  m = r.sub == r.obj.Owner\nRestful  matchers进行正则匹配  m = r.sub == p.sub &amp;&amp; keyMatch(r.obj, p.obj) &amp;&amp; regexMatch(r.act, p.act)\nmatcher全allow才true  e = !some(where (p.eft == deny))\n\n","categories":["权限","笔记"]},{"title":"datawhale大模型应用开发夏令营学习笔记一","url":"/2024/07/03/datawhale%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E5%A4%8F%E4%BB%A4%E8%90%A5%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%80/","content":"\n参考自\n\n基于LangChain+LLM的本地知识库问答：从企业单文档问答到批量文档问答\ndatawhale的llm-universe\n\n\n随便谈谈由于科大讯飞的星火杯已经为我们提供了 星火大模型 的API，我也不好进行模型调参，现在能做的就是开展prompt工程，结合RAG，给到模型优质的输入信息，帮助它正确回答我提出的疑问和要求。我首先学的就是这两个。\n我一开始的想法是做本地知识库，那么模型是怎么知道这些知识呢？我们知道一个人的知识储备，可以来自他的积累，也可以来自他现在手里正翻着的书(或者当场百度:))。大模型也一样。我们可以在训练大模型时让他学习庞大的知识，也可以在提问一些小众知识时附加可参考的内容(比如在询问一个rust的第三方库怎么用时，顺带把这个库的文档文本一起给他，让他参考这些文档进行回答)\n\n参数知识：在训练期间学习到的知识，隐式存储在神经网络的权重中。\n非参数知识：存储在外部知识源中，例如向量数据库。\n\n当然，直接传整篇文档的方式比较粗暴，可以事先将全篇文档放入向量数据库或知识图谱（统称为知识库）。那么一次问答的过程为：首先用户提问请回答我的xx问题，然后大模型根据用户的提问去知识库中匹配并获取相关的参考资料，然后再将用户输入改为根据 xxxxx 这些参考资料，请回答我的xx问题并传入大模型。\n一步步基于langchain实现讯飞大模型的调用和RAG主要参考自datawhale的教程https://github.com/datawhalechina/llm-universe/tree/main/notebook，确实比较详细我实操的大概过程为：\n\n调用星火大模型\n读取Markdown或pdf作为本地知识，并解析出其中的文本，并进行数据清洗\n对解析出的文本进行文本切分。因为单个文档的长度往往会超过模型支持的上下文，导致检索得到的知识太长超出模型的处理能力\n调用星火的文本向量化接口\n使用Chroma存储向量并检索，即建立本地知识库\n使用template，并使用langchain的LCEL语法实现一条链式处理，该链将获取输入变量，将这些变量传递给提示模板以创建提示，将提示传递给语言模型，然后通过（可选）输出解析器传递输出。\n将”知识库检索”这一过程加入处理链中，实现大模型链接本地知识库\n基于Memory模块让大模型能使用到历史对话，实现带上下文的对话\nstreamlit的教学我没看，目前考虑使用Gradio\n\n以上过程均基于langchain的api。我这里只放一些重点内容，对详细过程感兴趣的同学可以跟着教程继续学习，我就不粘贴一遍教程里的代码了\nRAG和微调的对比\n\n\n特征比较\nRAG\n微调\n\n\n\n知识更新\n直接更新检索知识库，无需重新训练。信息更新成本低，适合动态变化的数据。\n通常需要重新训练来保持知识和数据的更新。更新成本高，适合静态数据。\n\n\n外部知识\n擅长利用外部资源，特别适合处理文档或其他结构化&#x2F;非结构化数据库。\n将外部知识学习到 LLM 内部。\n\n\n数据处理\n对数据的处理和操作要求极低。\n依赖于构建高质量的数据集，有限的数据集可能无法显著提高性能。\n\n\n模型定制\n侧重于信息检索和融合外部知识，但可能无法充分定制模型行为或写作风格。\n可以根据特定风格或术语调整 LLM 行为、写作风格或特定领域知识。\n\n\n可解释性\n可以追溯到具体的数据来源，有较好的可解释性和可追踪性。\n黑盒子，可解释性相对较低。\n\n\n计算资源\n需要额外的资源来支持检索机制和数据库的维护。\n依赖高质量的训练数据集和微调目标，对计算资源的要求较高。\n\n\n推理延迟\n增加了检索步骤的耗时\n单纯 LLM 生成的耗时\n\n\n降低幻觉\n通过检索到的真实信息生成回答，降低了产生幻觉的概率。\n模型学习特定领域的数据有助于减少幻觉，但面对未见过的输入时仍可能出现幻觉。\n\n\n伦理隐私\n检索和使用外部数据可能引发伦理和隐私方面的问题。\n训练数据中的敏感信息需要妥善处理，以防泄露。\n\n\nLangChain封装了很多模型的调用方式以及工具比如chain、memory等https://python.langchain.com/v0.2/docs/integrations/llms/\nPrompt在 ChatGPT 推出并获得大量应用之后，Prompt 开始被推广为给大模型的所有输入。即，我们每一次访问大模型的输入为一个 Prompt，而大模型给我们的返回结果则被称为 Completion。\nTemperatureLLM 生成是具有随机性的，我们一般可以通过控制 temperature 参数来控制 LLM 生成结果的随机性与创造性。\nTemperature 一般取值在 0~1 之间，当取值较低接近 0 时，预测的随机性会较低，产生更保守、可预测的文本，不太可能生成意想不到或不寻常的词。当取值较高接近 1 时，预测的随机性会较高，所有词被选择的可能性更大，会产生更有创意、多样化的文本，更有可能生成不寻常或意想不到的词。\n对于不同的问题与应用场景，我们可能需要设置不同的 temperature。例如，在个人知识库助手项目中，我们一般将 temperature 设置为 0，从而保证助手对知识库内容的稳定使用，规避错误内容、模型幻觉；在产品智能客服、科研论文写作等场景中，我们同样更需要稳定性而不是创造性；但在个性化 AI、创意营销文案生成等场景中，我们就更需要创意性，从而更倾向于将 temperature 设置为较高的值。\nSystem Prompt在使用 ChatGPT API 时，你可以设置两种 Prompt：一种是 System Prompt，该种 Prompt 内容会在整个会话过程中持久地影响模型的回复，且相比于普通 Prompt 具有更高的重要性；另一种是 User Prompt，这更偏向于我们平时提到的 Prompt，即需要模型做出回复的输入。System Prompt 一般在一个会话中仅有一个。在通过 System Prompt 设定好模型的人设或是初始设置后，我们可以通过 User Prompt 给出模型需要遵循的指令。例如，当我们需要一个幽默风趣的个人知识库助手，并向这个助手提问我今天有什么事时，可以构造如下的 Prompt：\n&#123;    &quot;system prompt&quot;: &quot;你是一个幽默风趣的个人知识库助手，可以根据给定的知识库内容回答用户的提问，注意，你的回答风格应是幽默风趣的&quot;,    &quot;user prompt&quot;: &quot;我今天有什么事务？&quot;&#125;\n\n\nPrompt工程可以理解为使用结构化的提问方式，向模型传入更详细的提问内容，引导大模型进行更精确和正确的回答具体可参考https://github.com/datawhalechina/llm-universe/blob/main/notebook/C2%20%E4%BD%BF%E7%94%A8%20LLM%20API%20%E5%BC%80%E5%8F%91%E5%BA%94%E7%94%A8/3.%20Prompt%20Engineering.ipynb\n此次开发用到的官方文档\nlangchain中使用sparkllm\nlangchain中使用spark的文本向量化\nlangchain中解析文件中的文本\nlangchain中使用Chroma\n\n还是贴个代码知识库为一篇Markdown https://github.com/sunface/rust-course/blob/main/src/advance/macro.md这里的代码参考datawhale的代码，只实现了链接知识库和结合上下文对话，没有用到LCEL。深入源码以及看官方文档后发现，LangChain非常多的API弃用或将被弃用，API改动这么频繁，而且有些API都不好在IDE里跳到源码，难怪langchain的争议这么大。\n import osimport refrom langchain_text_splitters import RecursiveCharacterTextSplitterfrom langchain_community.llms.sparkllm import SparkLLMfrom langchain_community.embeddings import SparkLLMTextEmbeddingsfrom langchain_community.document_loaders import UnstructuredMarkdownLoaderfrom langchain.text_splitter import RecursiveCharacterTextSplitterfrom langchain_community.vectorstores import Chromafrom langchain.prompts.chat import ChatPromptTemplate,SystemMessagePromptTemplate,HumanMessagePromptTemplatefrom langchain_core.output_parsers import StrOutputParserfrom langchain.prompts import PromptTemplatefrom langchain.memory import ConversationBufferMemoryfrom langchain.chains import ConversationalRetrievalChain# 通过环境变量的方式设置秘钥，具体的key-value可以在IDE内点进源码查看def load_env():    # 星火认知大模型Spark Max的URL值，其他版本大模型URL值请前往文档（https://www.xfyun.cn/doc/spark/Web.html）查看    #星火认知大模型调用秘钥信息，请前往讯飞开放平台控制台（https://console.xfyun.cn/services/bm35）查看    #星火认知大模型Spark Max的domain值，其他版本大模型domain值请前往文档（https://www.xfyun.cn/doc/spark/Web.html）查看    os.environ[&quot;IFLYTEK_SPARK_API_URL&quot;] = &quot;wss://spark-api.xf-yun.com/v3.5/chat&quot;    os.environ[&quot;IFLYTEK_SPARK_API_KEY&quot;] = &quot;&quot;    os.environ[&quot;IFLYTEK_SPARK_API_SECRET&quot;] = &quot;&quot;    os.environ[&quot;IFLYTEK_SPARK_APP_ID&quot;] = &quot;&quot;    os.environ[&quot;IFLYTEK_SPARK_LLM_DOMAIN&quot;] = &quot;generalv3.5&quot;    # 文本向量化    os.environ[&quot;SPARK_APP_ID&quot;] = &quot;&quot;    os.environ[&quot;SPARK_API_KEY&quot;] =  &quot;&quot;    os.environ[&quot;SPARK_API_SECRET&quot;] = &quot;&quot;# 使用UnstructuredMarkdownLoader读取时似乎不能读emoji# 此时需要预先处理文件，再使用API解析无emoji的Markdown文件def remove_emojis(text):    try:        co = re.compile(u&#x27;[\\U00010000-\\U0010ffff]&#x27;)    except re.error:        co = re.compile(u&#x27;[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]&#x27;)    no_emojis_text = co.sub(r&#x27;&#x27;, text)    return no_emojis_text# 长文本切分为多个小文档def text_split(doc):    # 知识库中单段文本长度    CHUNK_SIZE = 500    # 知识库中相邻文本重合长度    OVERLAP_SIZE = 50    # 使用递归字符文本分割器    text_splitter = RecursiveCharacterTextSplitter(        chunk_size=CHUNK_SIZE,        chunk_overlap=OVERLAP_SIZE    )    return text_splitter.split_documents(doc)def prepare_knowledge():    # 此篇文章无emoji    files = [&quot;macro.md&quot;]    md_pages = []    for f in files:        loader = UnstructuredMarkdownLoader(f)        md_page = loader.load()        # 打印这个文档来自哪个的文件名        # source = md_page.metadata[&#x27;source&#x27;]        # print(source)        # 删除无必要的连续换行        md_page[0].page_content = md_page[0].page_content.replace(&#x27;\\n\\n&#x27;, &#x27;\\n&#x27;)        md_pages.extend(md_page)    # 文本切分    docs = text_split(md_pages)    # 实例化星火文本向量化接口的调用工具    embeddings = SparkLLMTextEmbeddings()    # 可以直接调用来向量化文本    # embeddings.aembed_query(text)/aembed_documents(doc)    # 初始化一个Chroma向量数据库，让Chroma将文档向量化    # 并将数据库文件和向量数据保存到文件夹中    vectordb = Chroma.from_documents(        documents=docs,        embedding=embeddings,        persist_directory=&#x27;./vector&#x27;    )    vectordb.persist()if __name__ == &#x27;__main__&#x27;:    # 设置环境变量    load_env()    # 实例化星火大模型调用工具    llm = SparkLLM(temperature=0.95)    # 初始化知识库    prepare_knowledge()    # 加载本地知识库    embeddings = SparkLLMTextEmbeddings()    vector_db = Chroma(persist_directory=&quot;./vector&quot;, embedding_function=embeddings)    # 对话历史记录    memory = ConversationBufferMemory(        memory_key=&quot;chat_history&quot;,        return_messages=True,  # 将以消息列表的形式返回聊天记录，而不是单个字符串    )    # 模版    system_template = &quot;&quot;&quot;使用提供的上下文和聊天记录回答用户的问题。不知道也不要编造答案，回答尽量简要。并且总是在回答的最后说“谢谢你的提问！”    ----------------    CONTEXT:    &#123;context&#125;    CHAT HISTORY:    &#123;chat_history&#125;    USER QUESTION:    &#123;question&#125;    &quot;&quot;&quot;    messages = [        SystemMessagePromptTemplate.from_template(system_template),        HumanMessagePromptTemplate.from_template(&quot;&#123;question&#125;&quot;)    ]    qa_prompt = ChatPromptTemplate.from_messages(messages)    # 创建问答链，为其添加检索知识库和历史记录的功能    qa = ConversationalRetrievalChain.from_llm(        llm,        retriever=vector_db.as_retriever(),        combine_docs_chain_kwargs=&#123;&#x27;prompt&#x27;: qa_prompt&#125;,        memory=memory    )    print(&quot;第一次问答：&quot;)    question = &quot;我可以在你这里学习到关于提示工程的知识吗？&quot;    result = qa(&#123;&quot;question&quot;: question&#125;)    print(result[&#x27;answer&#x27;])    print(&quot;第二次问答：&quot;)    question = &quot;为什么?&quot;    result = qa(&#123;&quot;question&quot;: question&#125;)    print(result[&#x27;answer&#x27;])\n\n\n\n由于突然文本向量化接口突然报错，上述代码我这里测试不了构建知识库了。但好在可以加载之前构建好的知识库来测试后面的代码。代码总体应该没问题，之后再看看Request error: 11202, {‘header’: {‘code’: 11202, ‘message’: ‘licc failed’, ‘sid’: ‘emb000fc090@dx1907452bed6738d882’}}Request error: 11202, {‘header’: {‘code’: 11202, ‘message’: ‘licc failed’, ‘sid’: ‘emb000ebcb7@dx1907452bf547020882’}}\n\nTODO\n怎么持久化以及加载历史信息，这篇博客到时候可以参考：【LangChain】对话式问答(Conversational Retrieval QA)\n怎么将知识图谱作为知识库\n评测和优化\n\n","categories":["人工智能"],"tags":["LLM"]},{"title":"d3.js数据可视化学习","url":"/2023/07/15/d3-js%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%E5%AD%A6%E4%B9%A0/","content":"清华大学 - 数据可视化有空再写笔记，看的差不多了，还是缺少实战\n","categories":["科研技能"],"tags":["数据可视化"]},{"title":"gal/butter reflection","url":"/2024/10/16/gal_butter_reflection/","content":"\n\n  5abcf1c9fdf987264abb4688b39835b257ade6e7256b99a215519372555793ee350fced7024586ccc42d85960fd495d17e1bd82a7712d2059fbd0f7d9ed7570ac3ce4abc1f3c72709fdb3d746fa5c355f2a7215052c3b9a62bdf15b99a6458f78ae296ce7c1de97aebaaf1f5e0ab028c1cdc50da0bb025a2ee18216a5e6a7e29e7630d2a07ee00cb13f253f001a6eb609ee2dd8329b2bc9d23a222cc8ad5b235d72021363a8cd620f53213005e922fc536ca043ca254aea3dfa76120fabba7d8bf73284f22c4647a4f2b11baaad5a3020551fb4cd73ff54088554ba623f2c9cef3212a167af6a111ddb4011eb04d4036b86cc7d9c6334037b5f7015a3d6761ca26ab4de976fdfa87aa417e89c56fa468e35f6b536c8c7fade4b5bd7fb0aa7a754d583a3d6b66f627d754ab298b3aa4e815e6f8ab1f058787b686ea6afe492aa26f5c6ec75de783e4284ecae0e0e71441d0a9d455497853a03ef6319241a8da3e218324da3c5955764fc3d5d3153f5b64073082fd290868634fb9108f62cbca48281d9679f695191835c56f98474e23dec3e660cc8f0872b1cce4b12f8e277971ebfcdd7b5031e5b6e3588001bf0e43508b8c1667e83534ec4040dce6ba78ecbb04aa7a69093a465b6d083ac6ef633155482b12c3b3a0fa77ccdab1637c009967c86bf1023b8aed7cc8eef436f31f048c0bd3bf53fc8121e99bef0dbab59fd9b89e94678c19f43ad6ea86bb264ac5a8e813ba022a59627e206d433cfe8f829687d0066a51e0035912ea4fbf08da279e2876ad5e1133538d3b4bd2c461ab39352b72b463c6dbb1c05fd7a362378197c6e0b7f8ca94c4dd0626cd327b8ef6507f2b2b9c88b019b1c422cdd9aa613060afe6b95787b082ba05183bb96ce46f545fc3dea70d40b0c5b6e6cd097d0947737363a7a062af3da6ed6e7d391a2ebad0fc14ee3b9912835c18db446011c76c5cf3ba858173a370ce993667abf184ca3790d29d48b51fad5d99ebd0e03eeb3e305c59a8910cce4477fd0ed0899aef5e13ff9c706bfd1c011560a3313d68840063de5f9564e4d22459cca1fc6b4f32088d559a4a6f44b9bb3f797e345e06f684b4d0e93a9464d54efc64ec9e500bab27ffcf8914fdeb42792bf292cce46b1512ecb0bc657bcd22ee8c0dd87f25a7588be57f5c980c58635d4ae16de964a9d48a74a71a7d650e886280d6bd191a11d449e398bb5be70e6011b8cfb127a63ca1038b61ae3c47866bccc8a0e3b053bc821739a54dde8c8078e400f4055020873350aeb763543dad76e3a3cd23e7a07f57bf52463b6dc40d323bbc3bfb3f9ec61902c202290f91898a8620ac811976d4864091f802b93e16f4f5f765712e107d3bdccd2630eacdefdf20b331b6c2e86f8240164566513c7010845daeeb3a2432414d77d103726b52e9d09f3c5146be7bab3f3a6b12a74f6fd9af27254c95eb8b9e34045c3120a7b7d4dc3d257fdba46bc609648d6bb3b91b1648f1fc98b24c34819ed722fa309fdf7967d97131be70f5c32dcadd823abe9ec564e0d87b2c902de834f28343469a67432270dfdfda12cc343417818b56d745d6fcd7036763fb2f5f5c540c2418f7f966b067253bcc72b0823ef83e08dbabcb12ac2656c631ca3c6c00d7be99115a91792c49cfcf8a3ceaf46944e79a91548272879a11886d8f453580a9d38a1932ed9b4bd9b97ba8a8a5f08e1c685cd8929c709c383df34e8056d28ca97e88bfa2e1eafc9c81e2754b4958b33c1d2995d4084aeb4287a664ea751e77dbd06ea7f8adcf383ff5f90f7d7e6be0ba5e9fe14e36da19033817e3a6f78f9a0f88c7905431c97eca8056941524bb799e2571efe284fe9651ad6a960430870fd713e5e9c439ea1d80e96d44d6aa555d1957576b899b3734b52a944514357304f6e912e7ebc904026d6bce1c541a036528c74645add4dc788329d1bcb44d8aeaff11c8813239a3be785396144768a1c0c729c7e04cabb3ff328506c3d06105680108843c64d362ae6e73f828351cf0101186836c4218a88bc3b4a9236cbdec2a183a76a2e886fad69e08b68abe2f482c6628b125baa246cdb51055fa3109fc912e97d4283ff890bb1e1c7983458e1e6edb6753c694b21e53fe3beeddfb3862216cc6c590d1a21fede318ae1e1c0fc62d027ca9813df2bf8ab748ee992b0350127ad9d844d1e83968b878bfbf0ead55879d2461c45d53c3d1065ae34f8d60dd5c0c0475d57f17309f611c654277da28809f998ef9a277c4c7ea49e5743b03945f60d5f9fda4fe9187ac2a5ccb402b82600a918342700132395fab45fe07ff72804425c0bbfe03fffb609bc635d6949b4e11874d4a62cc43e8e2201b89e65e6b89133dc2d75c29a92750e904e35c89e387f92619452d81e430a330d49b39ac5c023bcb04c300af11544cc2a1de6519c9d8a8daf0d7ea2ebf9baeca94813c125a329fe16dbd26dbc6b0a8ad57a1f039f9563b0e4d030570c6fc07b0010685caa325ad521f6355b55adad2dd1fee2c996892c7be600ac6e95b0dff4239416ef3e093ce3132ce48b0e2becf0348f3200e9735b9b7b3a9729b21bb972146294ed009b2b600ce646395db02718b677ac9b677dde381cf446d44890dade59687f12753f3a0da18f05aa0151716cef721bcd707868bc6a5bffdbd0f0fb74e50ff524cd3086157f64bf8f6549533a904a3dfc864b99e845295791ddd2ed58a2ea142bdcbef31b7e828ae19d59eb60fabbf40bfcbec348d01338f2e80116923030f7dd3a3756cc5c154de244a64c737345d6fdf6b84b36b23c39329494fc5c898f342529aa4b6963f9a5ba59e0c984d21a4e8870f624b8e668330f48c7b83287a74d4a5542d8a7cdb65dc19dff22acedf0af6733bad478e4393a87b6d0f3ade77e889ab92dfcca13a3ac5d44be940460187173395014de1f5f0edbaee67450e60ffc094aaaac9019fe54694e84461fb7a4b6a9c34257975454de4fdfdbc1a8f870ed7b0da2c9964eb5cbc3769baa244c755c4a6ed6ec9305eaa9aca6e645032b31cb2608a3de8e54a61eb0f4de849c9db2e3997d195e308968a21a99497883c6c5b40ff75f61d1561f8656817a5ee99335fddc5aaaa8a0c72f70d56c2175fa0111aa50c009c65e6ed81e8b0f4ee79fd472c535e5f7985cb04116592ad55b5627fbbfc0bb1895e70b041a4ab7c395b64f339338c12dc54b65c33ea5d445cc2370949a9a04fed2c65575b7f240bdc2659ebd0e118912bae013129a31a92ab6f8f132b03b833a0fe513e897810eb80aedd6309142a04a66435e03fdf3caad5d861219e2d6e04eefe5592a7d4ba3cca26f347d6b4b2d6f8159ed7a3e157f200fbe8c384b91af73eb54700af0eb390d84d4092ec4b1656690803c774ba26b5e1af617af1b62ac8d2b29405b996c0e5733ca7064c8b33d024f4313786594517a9ec0c5283815488d2ca5e7f18f46aa4965a5809f8bf730dd732c06918e9b7adac8f0bd3fb0c92cf22aa56d07aa281b516dc53e03eca24cd1b5adee61f3b4431738b84be1c0b3fb38bb3e57893b9da30fd9eb95e4bdeba0fdf882773e573592fbf1e6ef3c8d95871b9c0386bf54dee2758d7870a525f8c3e2e8edd50d936d674697b01961eafb2034d46b301398c83af3db6b310f2cef99552610f36c3d3984408013e7b68a942aee0cb9adc097373ae07227938d9c7425322a07439fa6c396ed61923d8e29db53511925952ea6d1b064c9a2ae6ef0dae76fb722076ea52c2a7af1c95c9feea169bea4fc8dd5772d01386baf3c8222925ad986034d1501bd0df4412a69542a68ba9d1e044a95c1fcb2de0f0076b2a9b55a17fcc20a0cb0430daf63418a296212f2a11a7eb9004b7200d2b57161130fa5248ca036d52b2743fb8dd90ebd258e3108ac7733708d067f8c81c6e47968c2de590123cc7bc20d0ea772a172d58639f46918b88793744dc3d343e6b8b8e14112b45d72f1d10d2429188c9411536eb5db611d1bb397b311b09528d3405726255222123c2fa1483703844eb492fe91d45315034ec41db70396fad4d2785f64e753c4e679e9adf6b713805734b9e1bfa8efe73b1485913f56ad425830659b2dd587fa25b1d3cede16a691648d039227a5a3095b7060d90a4cc9e677278ca02c46a9c681010e542fc5d5e6ac57854a028833eb3018c682c58e72a37d8313cfb0f926b43da890af931df53d04c6f468f01063eca1ec63b924b2b92ea6c5a7e84808df22a21ec7cd14b8d27d1cbf930f478b41ce4b9900e8177679a3c7a2587520634de7c7b09ad9f71e8e040693f3367dbfbc6b2e9cd4c091d1f071b4ec45457bb954ed9e9bcb6cfc79f341a47153acead8cc7ec28043756b687297b1e09425a78e82e5af0e78af3a312fa1c93f2e49565d8f05366942b53dbf066e15bf21552bc6d0d262568f701dd48039f430c4d676dc493004786eadceb9eee07d22c84c8679123f03f376fffbfe32cae90b65e4e6b04f457adc5a41f18b19dd0e3c8c81d362a77fd9236278cef43978694649bf52b6ce2fe21180414bfc47683b6d756ebc2ffd13bf25a33fdcd3d5a9f935e60e060a99ce2d441844fa4ce35e8cde20e6bbf50d2f0da00963d0b14ebbe973f97c8b6a15d81bb8168ccba24ee344171180242e58e208074750a4c9cfb3d62a6310edae80be8d492b187161aa97819ff6bc1a6f9c8e6629219fba386ddc2640fe8100add2e8eb7c28daaa5929ca4b918c8b95a8238219418a6dd45d849a5d1617accc1beb6dffbf580d146cdfe9e1fc7dcb135148d8cafb8f541197e3cdd1f6af994a726ffa3044c7fcd0648e8ff9cd8be02413abeb2971d667fbda6d584f17c23c5e983d66f3188446b06b3664b6a7ddf990931762565a69bfaed6c46997e18f5bf5b6ead7b0d88d2353e14540eb585d1c91178247a2c6fee159a6643304f4f149e3534d83a7a9c78ed6361298a616a5426cbfa68729387b27eaf45d54fddc916d060a446bee618928c02936a65339af0e6963d13bb268f7d7985d14f0d4b91dfb887f48db5362130ded19ce04589f84de763ba0434ed5b8c4423f91aae731f0400a01e012f1a04ed3cb7e84510ffdd4ea13730fbf606205fa09994a7b9f2ad1b4ae3f8dc43f6d252f0dd441881d02429111a018d06d61977ad2f4435218e724212dc5a1a400c736c1e71477be449694e079d75a962c0172b300adfd2fe8b278b28ba7f477988070f15773512d7aba4bf11e1afd9d84e5f9f534082c9770d4ca3fedab2fbfa1126dd5208fae618c71493f6d6a37d1d2e8d6d25ef57da6dfbc464bb9e1bd2885a5589be382aa224fb38db67b3acf1c7dcca88815273cdca6276b7998f95879707904ac5\n  \n    \n      \n      \n        Hey, password is required here.\n      \n    \n  \n\n\n\nimport {initHBE} from \"/js/plugins/hbe.js\";\n  console.log(\"hexo-blog-encrypt: loaded.\");\n    initHBE();\n\n","tags":["记录"]},{"title":"minimind试玩体验","url":"/2025/07/07/minimind%E8%AF%95%E7%8E%A9%E4%BD%93%E9%AA%8C/","content":"用的kaggle\nworking和input目录kaggle的input一般用来存储训练数据，不能修改，一般不将input作为工作目录\n将working作为工作目录，可以对文件进行修改\nhttps://blog.csdn.net/wxyczhyza/article/details/125488592\nhttps://blog.csdn.net/qq_19072921/article/details/134201873?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-0-134201873-blog-125488592.235^v43^pc_blog_bottom_relevance_base5&amp;spm=1001.2101.3001.4242.1&amp;utm_relevant_index=2\n基于这两篇文章进行input数据集修改\n注意下minimind2时，先export HF_ENDPOINT&#x3D;”","categories":["大模型"]},{"title":"Hello World","url":"/2021/09/06/hello-world/","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\nQuick Start安装hexonpm install -g hexo-cli\n\n更新npm install hexo-theme-redefine@latest\n\nCreate a new post$ hexo new &quot;My New Post&quot;\n\nMore info: Writing\nRun server$ hexo server\n\nMore info: Server\nGenerate static files$ hexo generate\n\nMore info: Generating\nDeploy to remote sites$ hexo deploy\n\nMore info: Deployment\nRedefine主题文档快速开始 - Redefine Docs (ohevan.com)\n"},{"title":"mooctest全国大学生软件测试大赛开发者赛道相关知识记录(Junit 4)","url":"/2024/11/20/mooctest%E5%85%A8%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E5%A4%A7%E8%B5%9B%E5%BC%80%E5%8F%91%E8%80%85%E8%B5%9B%E9%81%93%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86%E8%AE%B0%E5%BD%95(Junit4)/","content":"环境要求\nJDK 8 虽然我只有JDK 17，改了下Language Level，保证不会使用新特性。但是还是改用jdk8了  (后面会讲，变异测试需要jdk8)\nJunit 4.12(在pom.xml中已指定好)\n我用的是 IDEA，毕竟2024年mooctest比赛终于可以不用那个难用得要死的eclipse了\n\n异常处理import org.junit.rules.ExpectedException;public class ProductTest &#123;\t@Rule    public ExpectedException thrown = ExpectedException.none();\t\t@Test(timeout=1000)\tpublic void test() &#123;\t\tthrown.expect(NullPointerException.class);\t\tthrown.expectMessage(&quot;qwer&quot;);\t\tthrow new NullPointerException(&quot;1234&quot;);\t&#125;&#125;\n\n注意，一个Test方法只能测试一处异常。如果你想测试一个对象方法里会有的多个异常，还是只能分成多个测试方法分开测。\n!!!!!可以自己实现assertThrows其实有个允许一个Test方法内测试多个异常的函数，但是是Junit5中的。通过参考23年省赛答案，我发现了答案中对assertThrows主动进行了实现。\nprivate void assertThrows(Runnable r, Class&lt;? extends Throwable&gt; exception) &#123;\ttry &#123;\t\tr.run();\t\tfail();\t&#125; catch (Exception e) &#123;\t\tassertTrue(exception.isAssignableFrom(e.getClass()));\t&#125;&#125;// 我还加了个允许使用报错信息进行比较的private void assertThrows(Runnable r, Class&lt;? extends Throwable&gt; exception, String message) &#123;\ttry &#123;\t\tr.run();\t\tfail();\t&#125; catch (Exception e) &#123;\t\tassertTrue(exception.isAssignableFrom(e.getClass()));\t\tassertEquals(e.getMessage(),message);\t&#125;&#125;assertThrows(() -&gt; &#123;\t// 调用被测方法\t...\tmethodToTest();&#125;, IndexOutOfBoundsException.class);\n\n反射读写private字段有些私有字段我们想主动访问而不是通过调用public方法间接访问，就直接用反射直接读写。\nShop shop = new Shop();Field productsField = shop.getClass().getDeclaredField(&quot;products&quot;);productsField.setAccessible(true);// 写productsField.set(shop, new ArrayList&lt;Product&gt;());// 读ArrayList&lt;Product&gt; value = (ArrayList&lt;Product&gt;) productsField.get(shop);\n\n\n反射调用私有方法有些私有方法我们测试不到或者不能直接测试到，就可以通过反射直接调用。\nimport java.lang.reflect.InvocationTargetException;import java.lang.reflect.Method;class Demo&#123;    private String getMessage()&#123;        return &quot;invoke private method&quot;;    &#125;&#125;public class TestDemo &#123;    public static void main(String[] args) throws NoSuchMethodException, InvocationTargetException, IllegalAccessException &#123;        Demo demo = new Demo();        Class&lt;?&gt; clazz = demo.getClass();        Method privateMethod = clazz.getDeclaredMethod(&quot;getMessage&quot;);        privateMethod.setAccessible(true);        String result = (String) privateMethod.invoke(demo);        System.out.println(result); // 输出：invoke private method    &#125;&#125;\nassertEquals和assertSameassertEquals是使用 == 进行比较，assertSame比较两个引用是否指向堆上的同一个对象。\nassertEquals(double)主动提这个是因为IDE会有警告或者报错，要求传入第三个参数，即误差范围。\nvoid assertEquals(double expected, double actual, double delta)\n查看源码可以发现就是差&lt;&#x3D;误差就认为相等。\nMath.abs(d1 - d2) &lt;= delta\n遍历枚举懒得一个一个枚举的测试？直接遍历！\n// 定义public enum ProductEnum &#123;    BOOK(&quot;书籍&quot;),    DRINK(&quot;饮料&quot;),    ELECTRONICS(&quot;电子产品&quot;);\t...&#125;// 遍历for (ProductEnum productEnum : ProductEnum.values()) &#123;\t...&#125;\n@Before和@After有时我们想对于每个测试方法，都做同一个前置或后置操作(比如创建新对象、将变化的值恢复)。Junit 提供了对应的注解。这里主要使用了@After和@Before。还有个@BeforeClass，它只在所有Test方法运行前调用一次，且这个注解所在的方法必须是静态方法(这个好理解吧，就是类初始化时调用一次这样)。@AfterClass在此比赛中没用，故不写了。\nimport org.junit.After;import org.junit.Before;import org.junit.BeforeClass;import org.junit.Test;import static org.junit.Assert.assertEquals;class Demo&#123;    public static int cnt = 0;&#125;public class TestDemo &#123;    @BeforeClass    public static void beforeClass() &#123;        System.out.println(&quot;=== before_class&quot;);    &#125;    @Before    public void before() &#123;        System.out.println(&quot;*** before&quot;);    &#125;    @After    public void after() &#123;        Demo.cnt = 0;        System.out.println(&quot;&gt;&gt;&gt; after&quot;);    &#125;    @Test    public void test1() &#123;        Demo.cnt ++;        assertEquals(Demo.cnt, 1);        System.out.println(&quot;run test1&quot;);    &#125;    @Test    public void test2() &#123;        Demo.cnt ++;        assertEquals(Demo.cnt, 1);        System.out.println(&quot;run test2&quot;);    &#125;    @Test    public void test3() &#123;        Demo.cnt ++;        assertEquals(Demo.cnt, 1);        System.out.println(&quot;run test3&quot;);    &#125;&#125;\n输出为\n=== before_class*** beforerun test1&gt;&gt;&gt; after*** beforerun test2&gt;&gt;&gt; after*** beforerun test3&gt;&gt;&gt; afterProcess finished with exit code 0\n\n\n\n测试控制台输出众所周知测试肯定不能修改待测代码，但是对于只有 sout 的 void 方法，我们肯定也是要测试。我们可以通过输出重定向的方法捕获输出内容到变量中，然后 assert。我的这种写法是在每个Test结束后恢复默认out，在部分需要重定向输出的方法内自行setOut。因为重定向后，就不能把自己的日志打印到终端上了。\nimport org.junit.After;import org.junit.BeforeClass;import org.junit.Test;import java.io.ByteArrayOutputStream;import java.io.PrintStream;import static org.junit.Assert.assertEquals;class Demo&#123;    public void print()&#123;        System.out.println(&quot;Hello World&quot;);    &#125;&#125;public class TestDemo &#123;    static PrintStream console = null;    @BeforeClass    public static void before() &#123;        // 初始先保存默认的out        console = System.out;    &#125;    @After    public void after() &#123;        // 每次测试结束，恢复默认out        System.setOut(console);    &#125;    @Test    public void testResult() &#123;        // 输出重定向        ByteArrayOutputStream newOut = new ByteArrayOutputStream();        System.setOut(new PrintStream(newOut));        Demo demo = new Demo();        // 调用它，让它输出，并重定向到 newOut 中        demo.print();        assertEquals(&quot;Hello World&quot;,newOut.toString().trim());        // 注意如果不reset，输出会不断追加到newOut中        newOut.reset();        demo.print();        assertEquals(&quot;Hello World&quot;,newOut.toString().trim());        newOut.close();    &#125;&#125;\n\n根据操作系统适配换行符与路径分隔符为什么要根据OS适配？具体可以看CSDN的这篇文章：回车换行（CRLF）已过时，应废除！”SQLite 之父的公开呼吁引发热议\nString lineSeparator = System.getProperty(&quot;line.separator&quot;);String fileSeparator = System.getProperty(&quot;file.separator&quot;);\n\n变异测试变异测试的原理就是，把待测代码(在字节码层面改)改一下，如果我们的测试代码的 assert 依然通过(即变异子存活)，那说明代码存在问题。比如我们测试 int subtract(int a,int b)&#123;return a-b;&#125; 这个减法函数，如果我们的 junit 写的是 assertEquals(subtract(0,0), 0)，那么变异子将subtract的减法改成加法，这个 assert 依然通过，说明咱们的测试存在疏漏。\n我的理解是变异测试不是让开发人员自行对代码单元测试的，而是让测试人员完善测试用例的。\n我们使用 pitest 这个工具进行测试。包在 pom.xml 里已经有了。\n我们使用下面的命令启动测试。\nmvn org.pitest:pitest-maven:mutationCoverage\n注意如果版本 &gt;&#x3D; jdk9，会报错Unable to make field private final java.util.Comparator java.util.TreeMap.comparator accessible: module java.base does not &quot;opens java.util&quot; to unnamed module所以就只能老老实实用 jdk8 了……\n按下面这样配一个运行按钮，会方便一点。注意填入的命令是pitest:mutationCoverage运行成功后，查看target/pit-reports/时间/index.html即可\n共享变量被修改导致变异测试失败可能即便测 coverage 已经全部 pass 了，pitest 这里还是有报错All tests did not pass without mutation when calculating line coverage. Mutation testing requires a green suite. See http://pitest.org for more details.\n可能是因为多个方法共享的变量(如静态变量等)被修改导致测试不通过(虽然我也不确定一定是这个问题导致的)。可以看下面的例子，各个Test方法是从上到下执行的，上面方法修改类变量cnt，会影响在下面方法里的测试。\nimport org.junit.Test;import static org.junit.Assert.assertEquals;class Demo&#123;\tpublic static int cnt = 0;&#125;public class ProductTest2 &#123;\t@Test\tpublic void test() &#123;\t\tDemo.cnt ++;\t\tassertEquals(Demo.cnt,1);\t&#125;\t@Test\tpublic void test2() &#123;\t\tDemo.cnt ++;\t\tassertEquals(Demo.cnt,2);\t&#125;&#125;\n\n\n\n变异测试详细学习突变子列表，这个链接介绍了有哪些突变子以及对应做了什么突变。浏览一下可以方便我们看 index.html 里内容的时候知道是哪些变异子活下来了。\n这些是运行 mutation 覆盖率测试时默认激活的 mutator：\nINCREMENTS_MUTATORVOID_METHOD_CALL_MUTATORRETURN_VALS_MUTATORMATH_MUTATORNEGATE_CONDITIONALS_MUTATORINVERT_NEGS_MUTATORCONDITIONALS_BOUNDARY_MUTATOR\n也可以自行配置其他突变子，这会导致测试时间变长，但能发现更多问题。(因为不知道比赛方是怎么配置的，不过这里不用深究，反正没空专门写变异测试)\n&lt;configuration&gt;    &lt;targetClasses&gt;        &lt;param&gt;com.baeldung.testing.mutation.*&lt;/param&gt;    &lt;/targetClasses&gt;    &lt;targetTests&gt;        &lt;param&gt;com.baeldung.mutation.test.*&lt;/param&gt;    &lt;/targetTests&gt;    &lt;mutators&gt;        &lt;mutator&gt;CONSTRUCTOR_CALLS&lt;/mutator&gt;        &lt;mutator&gt;VOID_METHOD_CALLS&lt;/mutator&gt;        &lt;mutator&gt;RETURN_VALS&lt;/mutator&gt;        &lt;mutator&gt;NON_VOID_METHOD_CALLS&lt;/mutator&gt;    &lt;/mutators&gt;&lt;/configuration&gt;\n\n在index.html中，悬停在红色数字上可以看到下面黄色区域的内容，就是对应行的存活变异子。\n下面的例子就是说，第150行有两个变异子存活，即条件边界改变和条件取反。比如一个是变异成if(index &lt; 2)这种，一个是if(index &gt; 0)这种。我们就要针对这些情况再添加相关assert。\n其他注意事项（来自2024省赛说明文件）\n所提交的Java文件名需与代码中的类名保持一致。Java 语法要求代码文件名必须与代码类名一致，否则无法正常执行代码。有部分选手提交的文件名带有数字后缀，如“LibraryTest(1).java”，同样无法执行。\n本届比赛要求选手将所有测试用例写在一个测试类中（最终提交一个 Java 文件）。所提交的测试类不要求必须为题目模板中的测试类，但需符合上述第1条要求。有考生写多个测试类并简单复制到同一类中，导致提交的测试类出现大量语法冲突。\n由于变异测试的特殊性，所提交的所有测试用例均需要正常通过JUnit执行，不可有failure 或 error情况，否则将没有变异测试得分。\n在算分的时候，将使用题目模板项目进行算分，这将导致根据修改过的源代码编写的测试代码可能无法通过执行。\n由于慕测平台长时间不操作会自动退出登录，预选赛中有选手在结束前一分钟内提交答案时，被提醒登录“登录超时”，再次登陆后比赛已结束，导致未能成功提交答案。请各位参赛选手预留出充足的答案提交时间。\n\n做题技巧\n某些情况可以多用循环，增加覆盖率的同时，也更好杀死变异体。\n\n先用 idea 的 diagram 看各个类的依赖关系，先覆盖最上层的类的方法，这样也会覆盖一些底层方法。如果先从底层类开始，会浪费时间。同时最好先提高覆盖率，再去弄变异测试，别花费时间在不提高分数的测试用例的编写上。\n\n尽量避免修改共享变量，如果一定要修改，尽量改后还原(Test方法末尾还原或者在@After内处理)。\n\n注意判题标准。反正24年的是下面这样。所以不要只做覆盖率。然后各个Test方法把名称和注释都弄得可读性搞些。运行效率的话，虽然我上面说了可以用循环，但是感觉只要不写死循环就OK吧。注意是分支覆盖，所以不用浪费时间测试那些没有分支的函数如setter、getter\n\n按以下五个维度进行评分。\n\n（30%）分支覆盖率：代码分支覆盖率。\n（30%）变异杀死率：参阅PIT工具网站指定的常见变异类型。\n（20%）可读性与可维护性：参阅各大企业的测试同样指南进行评分。\n（20%）脚本运行效率：针对该题为每个覆盖率区间给定一个基准时间，分数为(基准时间-运行时间)&#x2F;基准时间。\n\n脚本编写效率：总分&#x3D;上述分数累加，总分相同则按提交时间二次排序。\n\n\n可读性与维护性：可以使用Alibaba Java Coding Guidelines这个插件检查代码，或者直接用 idea 的 problems 面板查看。建议最后留五分钟改改代码可读性。  \n\n打完预选赛，根本做不完分支覆盖，可能是我太菜了。所以变异覆盖率也只能靠做分支覆盖时多加几种边缘值assert顺便提升。真的没空专门弄变异覆盖。\n\n先把两个题目大概看下，可能第二题比第一题还容易。。。(指24年省赛的五星改为四星的第二题😓)\n\n\n闲聊\n青科大、广大、重邮应该是有加分，人嘎嘎多，把省一占满了都。\n这个比赛争议挺大的，主要是软件测试没必要办比赛、认可度低、监管不严、可以用GPT这些。\n个人感觉这个比赛挺抽象的，23年的省赛待测项目里没给test文件夹，一堆人临时学用eclipse建测试文件夹。24年省赛第二题一开始是五星，等我开始做第二题时发现变成了四星，难度比第一题低多了。然后允许用GPT，理论上来说是只不准用向日葵这种软件，反正赛中我看到个女生电脑屏幕界面上微信绿泡泡出现的时长比IDEA的时间久，又或者一个学生没主动写过一行代码，全程用的edge的侧栏copilot，是cv领域大神！真给我整无语了。考场的监管也挺松的，聊天软件不禁用就算了，最重要的是也没有签退机制和提交IP限制，我严重怀疑一些提前出考场的本校学生是回宿舍开黑了😓。\n广东比陕西卷多了，我双75在陕西勉强拿了个省一，放广州顶多省二。又不加分又没报销，懒得去花1k拿个国三了。\n如果能抽出三四天的空闲、代码理解能力强的可以来玩玩，这个比赛也不要怎么培训，全靠个人的经验和技术水平，拿个省一也够了。\n\n赛题列表(欢迎热心同学一起整合历史赛题)2024年全国大学生软件测试大赛开发者赛道省赛题目\n"},{"title":"java线程池学习","url":"/2022/07/15/java%E7%BA%BF%E7%A8%8B%E6%B1%A0%E5%AD%A6%E4%B9%A0/","content":"参考博客：线程池ThreadPoolExecutor——基础分析！线程池之——ThreadPoolExecutor源码深度解析线程池（ThreadPoolExecutor）源码解析拆解ThreadPoolExecutor之execute方法的各个细节？ReentrantLock 锁详解拆解ThreadPoolExecutor之addWorker方法的各个细节？拆解ThreadPoolExecutor之runWorker方法的各个细节？拆解ThreadPoolExecutor之关闭线程池和钩子函数方法的各个细节\n内部结构\n线程池体系的类图\nExecutor系列类实现了主要的方法，即提交、执行、暂停、状态\n\n细说ThreadPoolExecutor主要属性核心线程数 corePoolSize线程池的最小容量。\n最大线程数 maximumPoolSize线程池的最大容量。\nkeepAliveTime如果池当前线程数大于核心线程数的话，空闲线程的存活时间\nthreadFactory创建线程的工厂\nworkQueue阻塞队列，用于存储待执行的任务，相当于一个缓冲常见阻塞队列\n\n\n\n名称\n底层实现\n描述\n\n\n\nArrayBlockingQueue\n数组\n有界\n\n\nLinkedBlockingQueue\n链表\n无界\n\n\nPriorityBlockingQueue\n堆\n无界\n\n\nDelayQueue\nPriorityBlockingQueue\n具体化了一个PriorityBlockingQueue，排序方式为按时间排序\n\n\nSynchronousQueue\n\n只能容纳一个元素。内部有元素时，试图插入第二个元素的线程会阻塞，直到第一个元素被取走；内部为空时，试图取走元素的线程会阻塞，直到有元素被放入\n\n\n拒绝策略\n\n\n\n策略\n是否执行新任务\n其他操作\n\n\n\nAbortPolicy\n拒绝\n抛异常\n\n\nDiscardPolicy\n拒绝\n\n\n\nDiscardOldestPolicy\n执行\n丢弃下一个任务(即队头任务)\n\n\nCallerRunsPolicy\n执行\n\n\n\n按顺序放的源码\n注意这里是用调用线程执行的这个任务\n一些总结1、提交任务经过的流程这个是我看着源码画的\n2、线程池状态\n\n\n\n状态\n描述\n\n\n\nRUNNING\n接受新任务、处理队列中的任务\n\n\nSHUTDOWN\n拒绝新任务、处理队列中的任务\n\n\nSTOP\n拒绝新任务、抛弃队列中的任务、中断正在处理的任务\n\n\nTIDYING\n队列为空、任务都执行完，即将TERMINATED\n\n\nTERMINATED\n终止\n\n\n\n内置线程池通过Excutors类的静态方法获取这些池，源码里说推荐使用这几个，因为它们更方便，而且适配了常见使用场景(但我看到也有观点推荐用ThreadPoolExcutor自定义)。其实就是对线程池参数做了一些限定，形成了具有某种特征的池子\nnewFixedThreadPool核心线程数&#x3D;&#x3D;最大线程数、阻塞队列大小为INT_MAX，keeyAliveTime&#x3D;0描述：无界队列、固定线程数量、限制最大线程数量、适用于负载较重的场景\nnewSingleThreadExecutor比起newFixedThreadPool，不同在于1 &#x3D;&#x3D; 核心线程数 &#x3D;&#x3D; 最大线程数描述：单线程串行，保证任务按顺序执行\nnewCachedThreadPool核心线程数&#x3D;0、最大线程数为INT_MAX、阻塞队列为同步队列、keeyAliveTime&#x3D;60描述：按需创建、队列中只能有一个任务，因此该任务会被马上执行、线程最多空闲60s(自动回收线程)。适用于任务量小、任务执行时间短的场景。\nnewScheduledThreadPool阻塞队列为DelayedWorkQueue描述：支持定时和周期任务\n源码剖析ctl这个东西在代码里频繁出现其实就是就是用一个整数(默认为AtomicInteger)存储了线程池的状态以及线程数，带了位运算的思想。注意只有Running状态，其实就是为了好进行判断，直接runState&lt;0或者ctl&lt;0就可以知道他是否是Running状态\n\nexecute方法上面那个流程图应该大差不差了，这里就不细讲了\naddWorker方法retry机制continue retry表示回到最外层循环体，然后继续向下执行，如下面代码在碰到continue retry后，直接执行i++，判定i&lt;2，成功即进入 j  这个内层循环，否则就结束外层循环break retry表示终止最外层循环，即直接结束这整个循环。因为下面这个例子的retry就是放在最外层循环体之上的，所以continue和break都与最外层有关。实际上他是只与retry下面那一行的循环体有关。\npublic static void main(String[] args) &#123;    //这里的retry可以换做其他单词，并不是固定死了，只是个标记而已，相当于C++的goto的loop    retry:    for (int i = 0; i &lt; 2; i++) &#123;        for (int j = 0; j &lt; 4; j++) &#123;            if (j == 2) &#123;                第一种：continue retry;                第二种：break retry;            &#125;        &#125;    &#125;&#125;\n第一部分：池内线程数加一\n第二部分：创建新线程执行任务上一环节内没有return false，就会来到这一环节\nWoker类部分代码把任务和执行他的线程封装到一起了注意这个类继承了AQS\nprivate final class Worker extends AbstractQueuedSynchronizer implements Runnable&#123;    /** 运行这个woker的线程。*/    final Thread thread;    /** 初始的要执行的方法、可能为null */    Runnable firstTask;    Worker(Runnable firstTask) &#123;        setState(-1); // 直到runWoker()方法前，不让任务中断        this.firstTask = firstTask;        //这里可能导致thread为null        this.thread = getThreadFactory().newThread(this);    &#125;    /** 将运行委托给runWoker()方法  */    public void run() &#123;        runWorker(this);    &#125;&#125;\nWoker容器/**包含池中所有Woker的集合。仅在持有 mainLock 时可以访问。 */private final HashSet&lt;Worker&gt; workers = new HashSet&lt;Worker&gt;();\n过程中用到的🔒ReentrantLock mainLock\n\n过程\nrunWorker()他的主要处理逻辑就是执行传入的task或者通过getTask()方法从阻塞队列中获取的task，然后调用run方法进行执行。很有意思的是里面还夹杂了两个切面方法beforeExecute()和afterExecute()，他们定义为空方法体，可以按照自己的需求重写\ngetTask()这个方法里终于用到传入的keepAliveTime和allowCoreThreadTimeOut。同时有一个标记timed决定这个线程是否会在一段时间后被回收。主要处理逻辑就是：从队列中获取任务，如果timed是true的话，则调用阻塞队列的poll方法阻塞一段时间获取任务，这段时间没任务的话，则超时设置timeOut&#x3D;true，结束生命周期。否则调用take()方法一直阻塞等待任务到来，也就是核心线程为什么能一直存活的原因。\n执行流程总图\n","categories":["源码学习"]},{"title":"解决Hexo标题的冒号问题","url":"/2021/10/11/hexo%E6%A0%87%E9%A2%98%E7%9A%84%E5%86%92%E5%8F%B7%E9%97%AE%E9%A2%98/","content":"因为标题还是属于yml的一部分，所以对于冒号的处理还是有问题网上推荐的使用转义字符的方法没用我找到一篇用了单引号的，可行所以标题这样写就可以了\n","categories":["报错解决","trick"],"tags":["hexo"]},{"title":"pq初了解","url":"/2023/03/03/pq%E5%88%9D%E4%BA%86%E8%A7%A3/","content":"安装docker还是快的\ndocker pull postgresmkdir /myData/postgresqldocker run --name postgres \\    --restart=always \\    -e POSTGRES_PASSWORD=root \\    -p 5432:5432 \\    -v /myData/postgresql:/var/lib/postgresql/data \\    -d postgres# 查看docker ps\n\nPostgreSQL的优点\n完全开源，不像MySQL被收购后，搞社区版和商业版\n高级功能：我看中的点。支持如自定义数据类型、自定义函数、复杂查询和JSON数据类型。\n因为功能的差异和性能特点，PQ更适用于需要高级功能和复杂查询的场景，如大规模企业应用和数据仓库。而MySQL适用于简单查询和快速读写操作的场景，如Web应用程序和小型项目。(那我拿来写oj可能有点牛刀小试了)\n\n复杂查询支持\n窗口函数低版本mysql不支持我还是有点膈应  SELECT name, department, salary, AVG(salary) OVER (\tPARTITION BY department) AS avg_salary FROM employees;\nWITH创建临时表并可复用  WITH temp_table AS (  SELECT id, name, salary FROM employees WHERE department = &#x27;Finance&#x27;)SELECT * FROM temp_table;\n递归查询(mysql不支持)  WITH RECURSIVE employee_tree AS (  SELECT id, name, manager_id, 0 AS level FROM employees WHERE manager_id IS NULL  UNION ALL  SELECT e.id, e.name, e.manager_id, et.level + 1 FROM employees e INNER JOIN employee_tree et ON e.manager_id = et.id)SELECT id, name, level FROM employee_tree;\n\n索引支持\n默认B+树\nhash索引：只支持等值查找，处理大量等值查找时性能优秀\nGIN：倒排索引，适用于包含数组、JSON和其他复杂数据类型的查询。基于倒排索引允许处理多值列。\nGIST：相似度匹配、全文搜索、空间数据。\nBRIN、SP-GIST…..\n\n场景：每个文字都有多个标签\nCREATE TABLE articles (  id SERIAL PRIMARY KEY,  title VARCHAR(100),  tags TEXT[]);INSERT INTO articles (title, tags)VALUES  (&#x27;Getting Started with PostgreSQL&#x27;, ARRAY[&#x27;database&#x27;, &#x27;PostgreSQL&#x27;, &#x27;tutorial&#x27;]),  (&#x27;Introduction to Machine Learning&#x27;, ARRAY[&#x27;machine learning&#x27;, &#x27;data science&#x27;]),  (&#x27;Web Development Best Practices&#x27;, ARRAY[&#x27;web development&#x27;, &#x27;programming&#x27;, &#x27;best practices&#x27;]);\n\n\n查询包含特定标签的文章： SELECT * FROM articles WHERE &#x27;web development&#x27; = ANY(tags);\n查询包含多个标签的文章： SELECT * FROM articles WHERE ARRAY[&#x27;database&#x27;, &#x27;PostgreSQL&#x27;] &lt;@ tags;\n查询具有特定标签的文章数量： SELECT COUNT(*) FROM articles WHERE &#x27;programming&#x27; = ANY(tags);\n\n","categories":["数据库"],"tags":["PosgreSQL"]},{"title":"deepin搭建go开发环境（git、go、neovim、nvchad、nerd)","url":"/2023/05/08/deepin%E6%90%AD%E5%BB%BAnvim%E7%9A%84go%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/","content":"安装deepin虚拟机官网下载地址vmware中记得版本选择是debian 10.x 64位然后就是一些确认操作，然后就可以了\n安装gitapt install geditapt install gitgit config --global user.name &quot;hello&quot;git config --global user.email hello@126.comgit config --listssh-keygen -t rsa cd /root/.sshgedit id_rsa.pub# 下面这个可以解决Failed to connect to github.com port 443: 拒绝连接git config --global url.&quot;https://ghproxy.com/https://github.com&quot;.insteadOf &quot;https://github.com&quot;\n\n\n\n再上传这个id_rsa.pub里的文本(即公钥)输入这行命令以验证是否成功ssh -T git@github.com\n安装golang\n下载下载地址也可wget https://studygolang.com/dl/golang/go1.20.4.linux-amd64.tar.gz\n解压\n配环境变量 配置GOROOT(go核心内容的文件夹，即从官网下的那个)和GOPATH(go mod时存储第三方库的文件夹) vim /etc/profile# 即刚刚解压的压缩包的文件夹export GOROOT=/usr/local/env/go# 你自己指定一个存第三方库的文件夹export GOPATH=/usr/local/env/gopathexport PATH=$PATH:$GOROOT/bin:$GOPATH/bin#保存退出:wq#配置生效source /etc/profile\n 完全使用命令就是 echo &#x27;export GOROOT=/usr/local/env/go&#x27; &gt;&gt; /etc/profileecho &#x27;export GOPATH=/usr/local/env/gopath&#x27; &gt;&gt; /etc/profileecho &#x27;export PATH=$PATH:$GOROOT/bin:$GOPATH/bin&#x27; &gt;&gt; /etc/profilesource /etc/profile\n改下go的配置，即开启module模式和下载的镜像源 go env -w GO111MODULE=ongo env -w GOPROXY=https://mirrors.aliyun.com/goproxy/\n 测试 go versiongo env\n其他 我发现每次开个新shell，都要重新source /etc/profile才能正常使用go version 看博客知道要再配一下 注意每个用户都要配一下这个 echo &#x27;source /etc/profile&#x27; &gt;&gt; ~/.bashrc\n 这样子每次开新shell就会触发这个命令\n\n安装neovim\n参考[经验分享] Deepinv20下编译安装vim9和neovim9，默认的vim和neovim版本太低\n\n一、编译vim9\n先卸载默认的vim8\n sudo apt purge vim vim-*sudo apt autoremove\n安装编译依赖\n sudo apt install lua5.3 liblua5.3-dev ruby2.5-dev python3-pip cmake gettext\n下载源码\n git clone -b v9.0.1504 https://github.com/vim/vim.git ~/Downloads/vim9\n\n\n编译与安装\n cd ~/Downloads/vim9./configure --prefix=/opt/vim \\    --with-features=huge \\    --enable-multibyte \\    --enable-rubyinterp=yes \\    --enable-python3interp=yes \\    --enable-luainterp=yes \\    --enable-gui=gtk2 \\    --enable-cscope \\    --enable-fail-if-missingmake -j6sudo make installsudo ln -s /opt/vim/bin/vim /usr/local/bin/vim\n\n二、编译neovim\n下载源码 git clone -b v0.9.0 https://github.com/neovim/neovim.git ~/Downloads/neovim9\n编译与安装 注意第二行的下载操作，可能会总是拉取不到github的项目，实在不行就进浏览器手动下，然后放在对应的位置，下载网址和放置路径在dos里都有展示 cd ~/Downloads/neovim9make CMAKE_EXTRA_FLAGS=&quot;-DCMAKE_INSTALL_PREFIX=/opt/neovim&quot;sudo make installsudo ln -s /opt/neovim/bin/nvim /usr/local/bin/nvim\n测试输入nvim test.txt\n起别名，使vim命令会打开nvim echo &quot;alias vim=&#x27;nvim&#x27;&quot; &gt;&gt; /etc/profilesource /etc/profile\n treesitter报错可以不用管\n\n\n安装NvChadTurning Neovim into an advanced IDE参考视频针对Golang的NeoVim完美配置\n  git clone https://github.com/NvChad/NvChad.git ~/.config/nvim\n  然后输入nvim    然后输入N  然后等他把相关的插件下完(好像挂着梯子下快一点？)  到这个界面就是下好了  然后输入空格 th来选主题\n\n两个的卸载方法：删除~/.local/state/nvim 和 ~/.local/share/nvim和~/.config/nvim\n\n\n安装go的lspcd /root/.config/nvim/lua/customtouch plugins.lua\n在plugins.lua中写入如下内容\nlocal plugins = &#123;\t&#123;\t\t&quot;williamboman/mason.nvim&quot;,\t\topts = &#123;\t\t\tensure_installed = &#123;\t\t\t\t&quot;gopls&quot;,\t\t\t&#125;,\t\t&#125;,\t&#125;,&#125;return plugins\n再在/root/.config/nvim/lua/custom/chadrc.lua中做如下添加\nM.plugins = &quot;custom.plugins\n然后退出vim，再输入vim，输入命令:MasonInstallAll此时等一小会会出现\n再添加如下\n&#123;    &quot;neovim/nvim-lspconfig&quot;,    config = function()      require &quot;plugins.configs.lspconfig&quot;      require &quot;custom.configs.lspconfig&quot;    end,&#125;,\n\n\n如果使用可视化的编辑器，可能会出现E37: No write since last changeE162: No write since last change for buffer “xxxxx”Press ENTER or type command to continue这时用:set fileencoding&#x3D;utf-8\n\n然后\nmkdir /root/.config/nvim/lua/custom/configstouch configs/lspconfig.lua\n\n在lspconfig.lua中写入\nlocal on_attach = require(&quot;plugins.configs.lspconfig&quot;).on_attachlocal capabilities = require(&quot;plugins.configs.lspconfig&quot;).capabilitieslocal lspconfig = require(&quot;lspconfig&quot;)local util = require &quot;lspconfig/util&quot;lspconfig.gopls.setup &#123;\ton_attach = on_attach,\tcapabilities = capabilities,\tcmd = &#123;&quot;gopls&quot;&#125;,\tfiletypes = &#123;&quot;go&quot;,&quot;gomod&quot;,&quot;gowork&quot;,&quot;gotmpl&quot;&#125;,\troot_dir = util.root_pattern(&quot;go.work&quot;,&quot;go.mod&quot;,&quot;.git&quot;),&#125;\n再加一点设置，使得nvim里面可以自动导go的包、未使用警告等\nsettings = &#123;\t\tgopls = &#123;\t\t\tcompleteUnimported = true,\t\t\tusePlaceholders = true,\t\t\tanalyses = &#123;\t\t\t\tunusedparams = true,\t\t\t&#125;,\t\t&#125;,\t&#125;,\n\n……………………..不想写了，跟着视频配吧\n​\t\n安装Nerd字体ubuntu系统添加新的字体——JetBrains Mono 字体添加实例字体下载网站\n用jetbrains mono即可\n\n\nnvim-tree自带，在normal模式下用ctrl n唤出ctrl h和ctrl l切换左右\n其他输入:Lazy进入包管理界面\n总结&#x2F;root&#x2F;.config&#x2F;nvim&#x2F;lua&#x2F;custom&#x2F;chadrc.lua\n---@type ChadrcConfig  local M = &#123;&#125; M.ui = &#123;theme = &#x27;catppuccin&#x27;&#125; M.plugins = &quot;custom.plugins&quot; M.mappings = require &quot;custom.mappings&quot; return M\n&#x2F;root&#x2F;.config&#x2F;nvim&#x2F;lua&#x2F;custom&#x2F;mappings.lua\nlocal M =&#123;&#125;M.dap = &#123;  plugin = true,  n = &#123;    [&quot;&lt;leader&gt;db&quot;] = &#123;      &quot;&lt;cmd&gt; DapToggleBreakpoint &lt;CR&gt;&quot;,      &quot;Add breakpoint at line&quot;  &#125;,  [&quot;&lt;leader&gt;dus&quot;] = &#123;      function ()        local widgets = require(&quot;dap.ui.widgets&quot;);        local siderbar = widgets.sidebar(widgets.scopes);      end,      &quot;Open debugging sidebar&quot;    &#125;        &#125;&#125;M.dap_go = &#123;  plugin = true,    n = &#123;      [&quot;&lt;leader&gt;dgt&quot;] = &#123;        function()          require(&quot;dap-go&quot;).debug_test()        end,        &quot;Debug go test&quot;    &#125;,    [&quot;&lt;leader&gt;dgl&quot;] = &#123;      function()          require(&quot;dap-go&quot;).debug_test()      end,      &quot;Debug last go test&quot;    &#125;  &#125;&#125;return M\n&#x2F;root&#x2F;.config&#x2F;nvim&#x2F;lua&#x2F;custom&#x2F;plugins.lua\nlocal plugins = &#123;        &#123;                &quot;williamboman/mason.nvim&quot;,                opts = &#123;                        ensure_installed = &#123;                                &quot;gopls&quot;,                        &#125;,                &#125;,        &#125;,        &#123;                &quot;mfussenegger/nvim-dap&quot;,                init = function()                        require(&quot;core.utils&quot;).load_mappings(&quot;dap&quot;)                end        &#125;,        &#123;                &quot;leoluz/nvim-dap-go&quot;,                ft = &quot;go&quot;,                dependencies = &quot;mfussenegger/nvim-dap&quot;,                config = function(_,opts)                        require(&quot;dap-go&quot;).setup(opts)                        require(&quot;core.utils&quot;).load_mappings(&quot;dap_go&quot;)                end        &#125;,          &#123;                &quot;neovim/nvim-lspconfig&quot;,                config = function()                        require &quot;plugins.configs.lspconfig&quot;                        require &quot;custom.configs.lspconfig&quot;                end,        &#125;,        &#123;                &quot;jose-elias-alvarez/null-ls.nvim&quot;,                ft = &quot;go&quot;,                opts = function()                        return require &quot;custom.configs.null-ls&quot;                end,        &#125;,        &#123;                &quot;olexsmir/gopher.nvim&quot;,                ft=&quot;go&quot;,                config = function(_,opts)                        require(&quot;gopher&quot;).setup(opts)                end,                build = function()                        vim.cmd [[silent! GoInstallDeps]]                end,        &#125;,&#125;return plugins\n\n\n&#x2F;root&#x2F;.config&#x2F;nvim&#x2F;lua&#x2F;custom&#x2F;configs&#x2F;lspconfig.lua\nlocal on_attach = require(&quot;plugins.configs.lspconfig&quot;).on_attachlocal capabilities = require(&quot;plugins.configs.lspconfig&quot;).capabilitieslocal lspconfig = require(&quot;lspconfig&quot;)local util = require &quot;lspconfig/util&quot;lspconfig.gopls.setup &#123;        on_attach = on_attach,        capabilities = capabilities,        cmd = &#123;&quot;gopls&quot;&#125;,        filetypes = &#123;&quot;go&quot;,&quot;gomod&quot;,&quot;gowork&quot;,&quot;gotmpl&quot;&#125;,        root_dir = util.root_pattern(&quot;go.work&quot;,&quot;go.mod&quot;,&quot;.git&quot;),        settings = &#123;                gopls = &#123;                        completeUnimported = true,                        usePlaceholders = true,                        analyses = &#123;                                unusedparams = true,                        &#125;,                &#125;,        &#125;,&#125;\n&#x2F;root&#x2F;.config&#x2F;nvim&#x2F;lua&#x2F;custom&#x2F;configs&#x2F;null-ls.lua\nlocal null_ls = require(&quot;null-ls&quot;)local augroup = vim.api.nvim_create_augroup(&quot;LspFormatting&quot;,&#123;&#125;)local opts = &#123;        sources = &#123;                null_ls.builtins.formatting.gofmt,                null_ls.builtins.formatting.goimports_reviser,                null_ls.builtins.formatting.golines,        &#125;,        on_attach = function(client,bufnr)                if client.supports_method(&quot;textDocument/formatting&quot;) then                        vim.api.nvim_clear_autocmds(&#123;                                group = augroup,                                buffer = bufnr,                        &#125;)                        vim.api.nvim_create_autocmd(&quot;BufWritePre&quot;,&#123;                                group = augroup,                                buffer = bufnr,                                callback = function()                                        vim.lsp.buf.format(&#123;bufnr = bufnr&#125;)                                end,                        &#125;)                end        end,&#125;\n\n设置在vim中可以复制到系统剪贴板apt install xclip\n创建init.vim\nvim ~/.config/nvim/init.lua\n然后加入一行\nvim.o.clipboard = &quot;unnamedplus&quot;\n然后发现之后用y复制时，在浏览器里面也可以粘贴这个内容了同时在别的地方ctrl+c复制，在vim里也可以用p粘贴\n","categories":["运维"],"tags":["neovim","go","deeepin"]},{"title":"nixos安装","url":"/2025/07/15/nixos%E5%AE%89%E8%A3%85/","content":"https://www.bilibili.com/video/BV1Eq4y1L73m/?spm_id_from=333.337.search-card.all.click&amp;vd_source=43b6af819307ca6bdad60477a02d8d1c\n"},{"title":"special-experiences","url":"/2025/01/27/special-experiences/","content":"\n\n  93e4d7fc3a7cec0a3f495dfc577cf1bdd74a057d8ab9f540e12d4fb7c8f200424d3bc3b16d554d5bf089cabd090b6efd9254879e30ce199805a99ecc4b9477bd78b4f27a520e9b03733fb752218ec032ee6c58f98ec3ea7609d5efeda404c54dc789cc736921f053aa1ed3a9c0ae6be605ed925911940eedf48807c3fed617c65d664623de4b404445171ef79ccffb238f49d4a8087ee888510b8716de703e372b7ce8ee593e48c315ca35ca84bf320ae185e1b8af6f21884b61f4dfd26f8bb429b818151990a663e12e99431bf9d00791e8e83592fad7d0f5dbd3e69bafaa5fbc307e8f36ef34ceed115528ad7436a476e768c42dc32c9d55f80993cb6d50025fc4851ff8ba62c836d7625d343714aef1de7f2f2e93b68e7ba2d1ec56fc47ebe6c9a23062227195e3b6f8c28c33c271df74497e429c8efa49411d7753ccad80e399e84d20da5c534fff02865e7d4750\n  \n    \n      \n      \n        Hey, password is required here.\n      \n    \n  \n\n\n\nimport {initHBE} from \"/js/plugins/hbe.js\";\n  console.log(\"hexo-blog-encrypt: loaded.\");\n    initHBE();\n\n"},{"title":"ubuntu使用vpn","url":"/2024/12/28/ubuntu%E4%BD%BF%E7%94%A8vpn/","content":"https://github.com/MatsuriDayo/nekoray\n"},{"title":"scrapy个人循序渐进","url":"/2022/08/14/scrapy%E4%B8%AA%E4%BA%BA%E5%BE%AA%E5%BA%8F%E6%B8%90%E8%BF%9B/","content":"\n学习动机\n创建项目\n第一个小demo\n在Linux环境(虚拟机)下使用Docker配置NoSQL和MQ\n获取请求中的数据\n不遵守robots协议\nscrapy整合Playwright\n先写个demo\n接入Scrapy\n\n\n代理池\n规则化爬虫\n真正规则化\n\n\n数据存储\n分布式爬虫\nScrapy-Redis解析\nScpray-Redis的demo\n自定义去重逻辑为布隆过滤器\n\n\n\n\n爬虫管理和部署\n基于Scrapyd(别看，乱写的，直接学Docker的)\nScrapyd -Client\n可视化管理Gerapy\n\n\n基于Docker\n使用Docker\n使用Docker Compose(更方便)\nK8S的使用\n\n\n\n\n\n学习动机我想写一个爬热点新闻的爬虫项目，最好能满足\n\n规则化爬虫爬多个网站\n结合docker和docker-copmpose和k8s进行分布式部署\n具有代理池\n充分使用Scrapy框架\n可以结合一些NoSQL进行存储\n作为一个服务方便调用(Flask)\n\n创建项目我是用conda创建的虚拟环境，这个自己去配去创建环境conda create -n envName python=3.10进入环境conda activate envName安装scrapypip install scrapy创建项目scrapy startproject newsCrawlernewsCrawler是我的项目名跟着他的提示cd newsCrawlerscrapy genspider example example.com这个example是一个你的Spider类，他会作为example.py在spiders文件夹里，这个类设置的爬取的网站是example.com，这个可以自己再改的，所以无脑用就行\n第一个小demo爬取的是百度热搜\n\n定义新闻数据实体，在items.py中 import scrapyclass NewsItem(scrapy.Item):    title = scrapy.Field()    url = scrapy.Field()    time = scrapy.Field()\n修改spiders文件夹内的exampleSpider.py为baiduSpider.py，修改允许爬取的域名和起始URL # 部分代码class BaiduSpider(scrapy.Spider):    name = &#x27;baidu&#x27;    allowed_domains = [&#x27;top.baidu.com&#x27;]    start_urls = [&#x27;https://top.baidu.com/board?tab=realtime&#x27;]\n分析网站结构，编写解析网站元素得到目标数据的爬虫代码 # 这个代码和上面的是一块的，这个parse就是BaiduSpider的类方法    def parse(self, response):        news_list = response.xpath(&#x27;//*[@id=&quot;sanRoot&quot;]/main/div[2]/div/div[2]/div[position()&gt;=1]&#x27;)        for news in news_list:            item = NewsItem()            item[&#x27;url&#x27;] = news.xpath(&#x27;./div[2]/a/@href&#x27;).get()            item[&#x27;title&#x27;] = news.xpath(&#x27;./div[2]/a/div[1]/text()&#x27;).get()            yield item\n在settings.py中配置以UTF-8导出，不然中文会以unicode字符显示。(似乎也可以在Spider中写编码或者用Pipeline中编码并导出，但我就是用的命令导出的，所以没考虑那两个) 这个配置随便找一行放上去即可，居左 # 导出数据时以UTF-8编码导出FEED_EXPORT_ENCODING=&#x27;UTF-8&#x27;\n编写启动类 其实我们这里是用python执行命令行代码，这样会方便很多 创建一个main.py from scrapy.cmdline import executeif __name__ == &#x27;__main__&#x27;:\t# 同在cmd中输入 scrapy crawl baidu -o baidu_news.json\t# 注意第一个baidu是被执行的spider的name\t# 如果不想打印日志，可以再加个&#x27;--nolog&#x27;    execute([&#x27;scrapy&#x27;, &#x27;crawl&#x27;, &#x27;baidu&#x27;,&#x27;-o&#x27;,&#x27;baidu_news.json&#x27;])\n\n在Linux环境(虚拟机)下使用Docker配置NoSQL和MQLinux下Docker安装几种NoSQL和MQ\n获取请求中的数据https://news.qq.com/在控制台中发现数据是从接口中获得的请求网址:https://i.news.qq.com/trpc.qqnews_web.kv_srv.kv_srv_http_proxy/list?sub_srv_id=24hours&amp;srv_id=pc&amp;offset=0&amp;limit=20&amp;strategy=1&amp;ext=&#123;%22pool%22:[%22top%22],%22is_filter%22:7,%22check_type%22:true&#125;请求方法:GET携带数据:貌似没有加密参数，即没有采取反爬，于是不准备模拟浏览器，而是直接爬取请求\nimport jsonfrom urllib.parse import urlencodeimport scrapyfrom scrapy import Requestfrom newsCrawler.items import NewsItemclass TencentSpider(scrapy.Spider):    name = &#x27;tencent&#x27;    allowed_domains = [&#x27;news.qq.com/&#x27;]    base_url = &#x27;https://i.news.qq.com/trpc.qqnews_web.kv_srv.kv_srv_http_proxy/list&#x27;    def start_requests(self):        query = &#123;            &#x27;sub_srv_id&#x27;: &#x27;24hours&#x27;,            &#x27;srv_id&#x27;: &#x27;pc&#x27;,            &#x27;offset&#x27;: 0,            &#x27;limit&#x27;: 20,            &#x27;strategy&#x27;: 1,            &#x27;ext&#x27;: json.dumps(&#123;                &#x27;pool&#x27;: [&#x27;top&#x27;],                &#x27;is_filter&#x27;: 7,                &#x27;check_type&#x27;: True            &#125;)        &#125;        str_query = urlencode(query)        url = self.base_url + &quot;?&quot; + str_query        yield Request(url=url,method=&#x27;GET&#x27;)    def parse(self, response):        json_data = json.loads(response.text)        news_list = json_data.get(&#x27;data&#x27;).get(&#x27;list&#x27;)        for news in news_list:            item = NewsItem()            item[&#x27;title&#x27;] = news.get(&#x27;title&#x27;)            item[&#x27;url&#x27;] = news.get(&#x27;url&#x27;)            yield item\n不遵守robots协议突然看到一个汇总了各个新闻网链接的网站http://www.hao123.com/newswangzhi结果爬不动，发现robots协议是这样的：\nUser-agent: BaiduspiderAllow: /User-agent: Baiduspider-imageAllow: /User-agent: Baiduspider-newsAllow: /User-agent: GooglebotAllow: /...User-agent: *Disallow: /\n意思就是除了上面这些，其他的都不能爬，所以要禁用robots协议在settings.py中将该参数由True修改为False\n# Obey robots.txt rulesROBOTSTXT_OBEY = False\n这个的代码就不放了，没啥含金量\n\nrobots协议是让搜索引擎判断这个页面是否允许被抓取的，所以我们自己的爬虫练习还是可以把他关掉的\n\nscrapy整合Playwrighthttps://news.sina.com.cn/roll/#pageid=153&amp;lid=2509&amp;k=&amp;num=50&amp;page=1这个新浪的滚动网站通过观察发现也是一个用接口获得数据的，其实这个从他每一分钟就异步刷新一次就知道但是下面这三个参数发现是随时间变化的，因为还没到能逆向的程度，所以直接选用模拟浏览器的操作进行爬取，选用的是Playwright\n先写个demo安装Playwright注意第二行是为我们安装浏览器及驱动及配置\npip3 install playwrightplaywright install\n不得不说这个网站也太离谱了，返回结果居然不是一个json，花了半天弄出格式化的json字符串切片下面只是一段测试代码，未接入scrapy\nimport jsonfrom playwright.sync_api import sync_playwrightdef on_response(response):\t# 找到这个接口    if &#x27;/api/roll/get&#x27; in response.url and response.status == 200:        print(f&#x27;Statue &#123;response.status&#125;:&#123;response.url&#125;&#x27;)        # 强行截取格式化的json        json_str = response.text()[46:-14]        # 字符串转json，注意字符串是loads，文件时load        json_data = json.loads(json_str)        news_list = json_data.get(&#x27;result&#x27;).get(&#x27;data&#x27;)        for news in news_list:            url = news.get(&#x27;url&#x27;)            title = news.get(&#x27;title&#x27;)            print(f&#x27;&#123;url&#125;  &#123;title&#125;&#x27;)with sync_playwright() as p:    for browser_type in [p.chromium]:    \t# 以无头模式打开谷歌浏览器        browser = browser_type.launch(headless=True)        page = browser.new_page()        # 绑定监听response事件        page.on(&#x27;response&#x27;,on_response)        page.goto(&#x27;https://news.sina.com.cn/roll/#pageid=153&amp;lid=2509&amp;k=&amp;num=50&amp;page=1&#x27;)        # 等待网络请求结束、空闲下来        page.wait_for_load_state(state=&#x27;networkidle&#x27;)        browser.close()\n接入Scrapy我们直接导入崔庆才大大的Gerapy Playwright的包，这个包整合了Scrapy和Playwright三行代码，轻松实现 Scrapy 对接新兴爬虫神器 Playwright！GIthub项目地址但是会有多个问题\n\nThis package does not work on Windows，所以不能在windows上运行，会报NotImplementedError,我索性在虚拟机上安装了anaconda并运行项目，步骤如下：\n\n安装官网链接参考博客：centos7 安装Anaconda3 亲测成功注意安装过程中这个路径是anaconda的文件夹路径，这里是我自己手动输入的\n导出项目依赖pip install pipreqs pipreqs ./ --encoding utf-8\n把项目发到虚拟机上，使用conda创建虚拟环境Conda 创建和删除虚拟环境 ，进入虚拟环境pip install -r requirements.txt安装依赖，然后在虚拟环境下用命令行运行该Spider，然后进入第二个坑\n\n\nscrapy报错twisted.internet.error.ReactorAlreadyInstalledError: reactor already installed，报错见标题，方法见博客\n\n出现gzip.BadGzipFile: Not a gzipped file (b’&lt;!’) 的解决办法。这个似乎是崔大大没弄好，跟响应头里有gzip有关，观察发现确实这个响应是这样的 \n 仓库Issues里有人给了解决方案：去掉一个中间件，即  然后项目就能起来了\n import scrapyfrom gerapy_playwright import PlaywrightRequestfrom newsCrawler.items import NewsItemclass SinaSpider(scrapy.Spider):    name = &#x27;sina&#x27;    allowed_domains = [&#x27;news.sina.com.cn&#x27;]    base_url = &#x27;https://news.sina.com.cn/roll/#pageid=153&amp;lid=2509&amp;k=&amp;num=50&amp;page=1&#x27;    def start_requests(self):    \t# 大佬的包，解决了爬取页面的问题        yield PlaywrightRequest(            self.base_url,            wait_until=&#x27;domcontentloaded&#x27;,            callback=self.parse,            # 注意这里要设个等待时间，等ajax数据显示在网页上            sleep=0.5        )    def parse(self, response):    \t# 第一层是一些ul        news_1_list = response.xpath(&#x27;/html/body/div[1]/div[1]/div[2]/div[3]/div[2]/div/ul[position()&gt;=1]&#x27;)        for news_1 in news_1_list:        \t# 第二层是一些li            news_2_list = news_1.xpath(&#x27;./li[position()&gt;=1]&#x27;)            print(len(news_2_list))            # 每个li都是一个新闻            for news in news_2_list:                item = NewsItem()                item[&#x27;title&#x27;] = news.xpath(&#x27;./span[2]/a/text()&#x27;).get()                item[&#x27;url&#x27;] = news.xpath(&#x27;./span[2]/a/@href&#x27;).get()                yield item\n\n代理池怎么说呢，崔大大讲的大部分思想都能看懂，但是代码就看不懂了。。。所以直接拿来用了！仓库地址安装并运行过程：（Docker-Compose版）\n\n准备好Docker和Docker-Compose  Linux下Docker安装几种NoSQL和MQ和乱七八糟的\n把项目down下来git clone https://github.com/Python3WebSpider/ProxyPool.gitcd ProxyPool\n使用docker-compose运行docker-compose up -d注意这里可能会重试很多次，但是总还是会成功的，要等久一会，然后就是不断的命令行输出对代理的爬取、判活之类的消息了\n尝试获取IP http://IP:5555/random仓库里也有个用requests获取代理池内代理的example，我都没想过这个。。。第一反应就是Flask，太傻了\n\n规则化爬虫这章的内容是真的多，一看吓死人，再一看稍微好一点主要多了几个东西\n\nItemLoader 这个就是包装了你的自定义Item，同时它的子类可以灵活定义数据存入取出时的逻辑 拿爬宣讲家网举个涉及知识点较少、适合入门的例子： NewsItem是一个Item class NewsItem(scrapy.Item):    title = scrapy.Field()    url = scrapy.Field()    # 新闻媒体    media = scrapy.Field()\n 我们进入详情页，注意是详情页！！！ 观察发现我们需要的内容，即标题和媒体，他们都只出现一次，所以我们定义一下在该页面的读取规则，因为待会用xpath之类的选择器读取的时候不能用extract_first这类的东西了，只能写selector 定义一个为该Item定制的Loader from scrapy.loader import ItemLoaderfrom itemloaders.processors import TakeFirst,Join,Composeclass NewsItemLoader(ItemLoader):    # 默认类中全部变量都只是该页面第一次匹配的结点的数据，且去除左右空格    default_output_processor = Compose(TakeFirst(),str.strip)     # 也可以如下    # title_out = Compose(TakeFirst(),str.strip)    # url_out = Compose(TakeFirst(), str.strip) \n\n首先这里能定义in和out，即数据从页面提取并放入loader和从loader拿出到item中的两个阶段都能进行处理，我这里只处理了out\n然后发现这里似乎是通过后缀来判断的，即是否为_in还是_out\n我的第一行是配置的item中全部变量的规则，我们其实可以在下面对某个变量重新赋予规则，覆盖这个全局规则的\n常用规则是：不进行处理Identity，匹配到的结果的第一个非空值TakeFirst,将结果通过某种分隔符拼接Join，组合多个函数Compose、处理jsonSelectJmes。还有一些东西可以看看关于Scrapy ItemLoader、MapCompose、Compose、input_processor与output_processor的一些理解 以上，进行完了详情页面的解析\n\n\nCrawlSpider 这个类是Spider类的子类，你暂时可以理解他比Spider多了个rules元组，里面放了很多Rule对象，他们包含了在列表页面找到新闻链接和翻页按钮的规则、找到链接后爬取完详情页html后的回调函数等内容。就是说我们现在是在进行新闻列表的解析，即在列表页面获取想要的新闻的链接，因为我们是要通过这些链接获取详情页html的嘛 3.LinkExtractor 上面那个没代码是因为他的Rule对象的配置的规则实际上是配在这个类里的。这个类参数都是一些选择器、域名黑白名单、后缀黑名单等内容 注意一下CrawlSpider也是可以通过genspider进行生成的，他有几个模板，默认模板的其实就是我们之前用的那个。我们这次选择 scrapy genspider -t crawl speaker www.71.cn\n 然后我们再稍微改下speaker.py from scrapy.linkextractors import LinkExtractorfrom scrapy.spiders import CrawlSpider, Rulefrom newsCrawler.items import NewsItemfrom newsCrawler.loaders import NewsItemLoaderclass SpeakerSpider(CrawlSpider):    name = &#x27;speaker&#x27;    allowed_domains = [&#x27;www.71.cn&#x27;]    start_urls = [&#x27;http://www.71.cn/&#x27;]    rules = (        Rule(LinkExtractor(restrict_xpaths=&#x27;/html/body/div[8]/div[1]/div[2]/div[2]/div/ul/li[position()&gt;=1]/a&#x27;,attrs=&#x27;href&#x27;), callback=&#x27;parse_detail&#x27;),        # 因为只是简短demo我就没找有分页的网站了，分页就是如下，只会进行跳转而不会调用回调函数        # Rule(LinkExtractor(restrict_css=&#x27;.next&#x27;))    )    def parse_detail(self, response):        # 包装item        loader = NewsItemLoader(item=NewsItem(),response=response)        loader.add_value(&#x27;url&#x27;,response.url)        loader.add_xpath(&#x27;title&#x27;,&#x27;//*[@id=&quot;main&quot;]/div/div[2]/div[1]/div[1]/h1/text()&#x27;)        loader.add_xpath(&#x27;media&#x27;,&#x27;//*[@id=&quot;main&quot;]/div/div[2]/div[1]/div[1]/div[1]/span[2]/text()&#x27;)        yield loader.load_item()\n 运行可出结果，但是我大意了，有些详情页面结构不一样的，不过无伤大雅\n\n真正规则化为啥上面弄了什么loader、Rule这些东西啊，仔细看下，他们把爬取列表上的链接、爬取结点的选择器、结点的in-out规则都分开了，且都是对象或字符串的形式，而不是用extract_first之类的方法进行操作，我们完全可以把他们放进配置文件里头啊！我们定义一个通用Spider，它会获取要调用哪个配置文件，再使用这些配置进行爬取，这样就可以大大提高项目的可维护性了\n具体代码我就不写了，因为我项目暂时不太大，然后有些地方不是单纯用配置文件抽取变量就能解决的，比如scrapy-playwright那边，所以只留个思想在这吧\n数据存储这个只涉及ItemPipeline我这里也只演示存储进redis\n\n首先是安装redis，这里继续参考Linux下Docker安装几种NoSQL和MQ和乱七八糟的\n安装redis包以便操作redis pip3 install redis\n在settings.py中配置参数 REDIS_HOST = &#x27;192.168.192.129&#x27;REDIS_PORT = 6379REDIS_DB_INDEX = 0REDIS_PASSWORD =&quot;root&quot;ITEM_PIPELINES = &#123;   &#x27;scrapyRedisDemo.pipelines.RedisPipeline&#x27;: 300,&#125;\n编写pipeline from redis.client import StrictRedisfrom redis.connection import ConnectionPoolclass RedisPipeline(object):    def open_spider(self, spider):        # 第一个参数是settings.py里的属性，第二个参数是获取不到值的时候的替代值        host = spider.settings.get(&quot;REDIS_HOST&quot;)        port = spider.settings.get(&quot;REDIS_PORT&quot;)        db_index = spider.settings.get(&quot;REDIS_DB_INDEX&quot;)        db_psd = spider.settings.get(&quot;REDIS_PASSWORD&quot;)        # 连接数据库        pool = ConnectionPool(host=host, port=port, db=db_index, password=db_psd)        self.db_conn = StrictRedis(connection_pool=pool)    def process_item(self, item, spider):        self.db_conn.rpush(&quot;news&quot;, item[&#x27;title&#x27;])        return item    def close_spider(self, spider):        # 关闭连接        self.db_conn.connection_pool.disconnect()\n检验是否放入我是用redisinsight可视化工具查看的，但是好像图里有涉及国家政治方面的内容所以图挂了。不再贴了\n\n分布式爬虫这里使用的是scrapy-redis包。当然也可以用消息队列，但我没用。其实单机scrapy就内置了一个队列存放Request，并由调度器拿取Request，同时他还内置了去重、中断时记录上下文等功能。但是实现分布式的话，肯定不能用内置的这些队列和功能，这些逻辑应该放到分布式中间件上\nScrapy-Redis解析首先内置了三种集合：队列、栈、有序集合然后实现了去重，即将item的hash值作为指纹，同时指纹用set去重存储，每次存入item前先查看是否存入指纹成功，成功则存入item，否则不存入然后也实现了中断时记录上下文\nScpray-Redis的demo爬取的是4399最新小游戏\n#发现一个东西，记录一下# 注意这里的操作，可以提取一个大标签下所有标签内部的文本，在爬内容或者正文时很重要temp = response.xpath(&#x27;........&#x27;)item[&#x27;content&#x27;] = temp.xpath(&#x27;string(.)&#x27;).extract()[0]\n\n# BT.pyfrom scrapy.linkextractors import LinkExtractorfrom scrapy.spiders import CrawlSpider, Rulefrom scrapyRedisDemo.items import FilmItemfrom scrapy.linkextractors import LinkExtractorfrom scrapy.spiders import CrawlSpider, Rulefrom scrapyRedisDemo.items import GameItemclass Spider4399(CrawlSpider):    name = &#x27;4399&#x27;    allowed_domains = [&#x27;www.4399.com&#x27;]    start_urls = [&#x27;https://www.4399.com/flash/&#x27;]    rules = (        Rule(LinkExtractor(restrict_xpaths=&#x27;/html/body/div[8]/ul/li[position()&gt;=1]/a&#x27;,attrs=&#x27;href&#x27;), callback=&#x27;parse_detail&#x27;),    )    def parse_detail(self, response):        item = GameItem()        item[&#x27;title&#x27;] = response.xpath(&#x27;/html/body/div[7]/div[1]/div[1]/div[2]/div[1]/h1/a/text()&#x27;).get()        item[&#x27;content&#x27;] = response.xpath(&#x27;/html/body/div[7]/div[1]/div[1]/div[2]/div[4]/div/font/text()&#x27;).get()        item[&#x27;category&#x27;] = response.xpath(&#x27;/html/body/div[7]/div[1]/div[1]/div[2]/div[2]/a/text()&#x27;).get()        item[&#x27;url&#x27;] = response.url        yield item\n# items.pyimport scrapyclass GameItem(scrapy.Item):    title = scrapy.Field()    content = scrapy.Field()    category = scrapy.Field()    url = scrapy.Field()\n重要的来了！！！！！配置Scrapy-Redissettings.py中添加\n# Redis连接参数REDIS_HOST = &#x27;192.168.192.129&#x27;REDIS_PORT = 6379REDIS_PARAMS = &#123;    &#x27;password&#x27;: &#x27;root&#x27;&#125;# 将调度器的类和去重的类替换为Scrapy-Redis提供的SCHEDULER = &#x27;scrapy_redis.scheduler.Scheduler&#x27;DUPEFILTER_CLASS=&#x27;scrapy_redis.dupefilter.RFPDupeFilter&#x27;# 调度队列(三选一，默认为优先队列)SCHEDULER_QUEUE_CLASS = &#x27;scrapy_redis.queue.PriorityQueue&#x27;# SCHEDULER_QUEUE_CLASS = &#x27;scrapy_redis.queue.FifoQueue&#x27;# SCHEDULER_QUEUE_CLASS = &#x27;scrapy_redis.queue.LifoQueue&#x27;# 这里配置不持久化，即爬取完后不保存爬取队列和去重指纹集合，方便调试一些SCHEDULER_PERSIST = False# 配置itempipeline(将数据存入redis，很耗内存)ITEM_PIPELINES = &#123;&#x27;scrapy_redis.pipelines.RedisPipeline&#x27;:300&#125;\n自定义去重逻辑为布隆过滤器这里就不详细讲布隆过滤器了，但还是简单提一句：知道位图bitmap不？比如五个人，每个人有及格和不及格两种情况，就可以用一个五位二进制数，如01100表示第二个和第三个人及格了，但是每多一个人就要多加一位，相对费内存，在数据量大时不太好于是有一种方法：指定多个哈希函数，对要存入的数进行哈希，然后把每个哈希值对应的位的值变为1，这样容易冲突、误判，但是确实降低了内存消耗，而且原则是能查到的可能是误判，但是查不到的一定不存在直接用了崔大大的包了\npip install scrapy-redis-bloomfilter \n然后在settings.py中增加或修改如下配置\nDUPEFILTER_CLASS = &#x27;scrapy_redis_bloomfilter.dupefilter.RFPDupeFilter&#x27;BLOOMFILTER_BIT = 20\n此时发现redis中的指纹集合的后缀就是bloomfilter了\n爬虫管理和部署多机同时更新改动肯定是很麻烦的事，所以我们需要一个管理平台\n基于Scrapyd(别看，乱写的，直接学Docker的)提供了管理各Scrapy项目的命令\nScrapyd -Clientpip3 install scrapyd-cient\n相比于单纯的Scrapyd提供了一系列更方便的API然后我们就要对项目进行一些配置的修改了对于项目里的scrapy.cfg，修改url为被部署的主机的url，让scrapyd能访问到，同时为该主机起个别名spyder-2\n[deploy:spyder-1]url = http://192.168.192.129:6800/\n在项目里执行scrapyd-deploy vm-1 部署\n可视化管理Gerapy看到Gerapy我就知道崔大大又来推广自己的项目了(笑这是一个基于Scrapyd、Django、Vue.js的分布式爬虫管理框架，提供图形化管理服务\n\n安装pip3 install gerapy\n初始化 \t# 在当前目录生成gerapy文件夹\tgerapy init\t# 初始化数据库\tgerapy migrate\t# 生成管理员账号\tgerapy initadmin\t# 默认在8000端口上启动服务\tgerapy runserver3. 在服务器上进行访问，不知道为什么我不能远程访问这个网页。。。\t`http://localhost:8000`4. 登录 账号密码都是`admin`5. 添加主机的Scrapyd运行地址和端口，并在gerapy/project目录下存放Scrapy项目，Gerapy支持项目可视化编辑、可视化部署、启停、日志等服务。。。。。。。。。。。。。。。。。。。。。我反正没搞懂咋弄的，直接学Docker+K8S的算了，通用一些。。。。。。。。。。。。。。。。。。。。。## 基于Docker### 使用Docker1. 在项目根目录导出项目依赖\t```shell\tpip install pipreqs\tpipreqs ./ --encoding utf-8\n在项目根目录编写Dockerfile文件 # 使用了Docker基础镜像之python3.10FROM python:3.10# 指定工作目录WORKDIR /spyder# 把依赖文件复制到工作目录下，即/spyderCOPY requirements.txt .# 安装包RUN pip install -r requirements.txt# 这里是故意把整个项目的复制放到后面的，具体原因太长了我就不写了COPY . .# 容器启动时执行的命令CMD [&quot;scrapy&quot;,&quot;crawl&quot;,&quot;4399&quot;]\n修改配置项，让settings.py中的配置是从环境变量中获得 # REDIS_URL = &#x27;redis://user:pass@hostname:9001&#x27;REDIS_URL = os.getenv(&#x27;REDIS_URL&#x27;)\n进入项目根目录打包镜像，注意最右边是个点，表示当前目录。注意项目名必须全小写，不然报错invalid reference format: repository name must be lowercase docker build -t 项目名 .\n 用docker images查看镜像是否创建成功\n指定环境变量 在部署的服务器上找个位置创建一个.env文件,针对你settings.py中的环境变量编写，比如我的就是 REDIS_URL=&#x27;redis://:root@host.docker.internal:6379&#x27;\n 注意不要有空格出现\n在.env的目录下运行 docker run --env-file .env 镜像名\n推送至docker hub 在官网注册再登录，注意username是跟你以后仓库地址有关的，比如仓库名叫demo，username叫lyy，那么仓库地址就是lyy&#x2F;demo 用docker login命令也可以登录 给本地镜像打标签 docker tag 镜像名:版本 想放的仓库地址:版本\n 推送镜像到Docker Hub docker push 想放的仓库地址:版本\n以后运行这个镜像 只需要 创建一个 .env 然后 docker run --env-file .env 镜像名\n\n使用Docker Compose(更方便)这是一个用yaml配置服务的工具，比Docker命令方便多了\n\n编写docker-compose.yaml version: &quot;3&quot;services:  redis:    # 使用已有的镜像进行构建    image: redis:alpine    container_name: redis    ports:      - &quot;6379&quot;  scrapyRedisDemo:    build: &quot;.&quot;    image: &quot;truedude/scrapyredisdemo&quot;    environment:      REDIS_URL: &#x27;redis://:root@192.168.192.129:6379&#x27;    # 等redis起了才起这个容器    depends_on:      - redis\n打包为镜像 docker-compose build\n运行镜像 docker-compose up\n推送镜像 docker-compose push\n\nK8S的使用TODO\n","categories":["爬虫","笔记"]},{"title":"Tools for better thinking","url":"/2023/01/10/thinking/","content":"\n内容来自untools官网，感兴趣的可以去翻译一下，我只做下总结\n\n\n理解系统\nConcept map\nConnection circles\nIceberg Model\nBalancing feedback loop\nReinforcing feedback loop\n\n\n做出决策\nCynefin framework\nSix Thinking Hats\nSecond-order thinking\nEisenhower Matrix\nLadder of inference\nDecision matrix\nConfidence determines speed vs. quality\nHard choice model\n\n\n解决问题\nIshikawa Diagram \nConflict Resolution Diagram \nProductive Thinking Model \nAbstraction laddering \nInversion \nIssue tress \nFirst principles\n\n\n沟通\nMinto Pyramid \nSituation-Behavior-Impact\n\n\n\n利于思考的工具下面是一系列帮助解决问题、做出决策、理解系统的思维工具和框架(译者：下面是我用Mermaid画的图)\ngraph LR\nAll --> A[理解系统]\nA --> A1{概念图}\nA --> A2{关系环}\nA --> A3{冰山模型}\nA --> A4{平衡反馈回路}\nA --> A5{强化反馈回路}\nAll --> B[做出决策]\nB --> B1{Cynefin框架}\nB --> B2{六顶思维帽}\nB --> B3{二阶思维}\nB --> B4{艾森豪威尔矩阵}\nB --> B5{推理阶梯}\nB --> B6{决策矩阵}\nB --> B7{信心决定速度还是质量}\nB --> B8{艰难抉择模型}\nAll --> C[解决问题]\nC --> C1[鱼骨图]\nC --> C2[冲突解决图]\nC --> C3[生产性思维模型]\nC --> C4[抽象阶梯]\nC --> C5[反演]\nC --> C6[问题树]\nC --> C7[第一原则]\nAll --> D[沟通]\nD --> D1[明托金字塔]\nD --> D2[情况-行为-影响]\n理解系统概念图\n将对概念的理解可视化。\n\n\n制作的前提是要对相关知识有一定的了解，否则图不准确。\n\n制定焦点问题，并从不同角度看待事物。\n\n用一个列表记录关键实体，比如时间、地点、人物、组织、行动、过程、活动、方法等，通常15~25个，也可以更多，并且还要对这些实体排序以求概念图有更好的层次结构。\n\n绘图时用线连接实体，使用动词或短语表示关系。\n\n不断更新该概念图，并在迭代的过程中发现自己的认知差距并通过学习以填补差距。\n  Example：\n\n首先，焦点问题：How do sharing permissions work in this product?\n焦点问题转为实体列表：\t\t\t\n使用流程图等工具可视化实体间关系  \n\n\n\n关系环\n 了解系统内存在的关系并识别出反馈回路\n\n\n找到关键元素，“关键”的标准是 \n\n他们的改变对系统影响很大\n在系统中会增加和减少\n能用名词描述\n\n\n寻找因果关系，以及每个关系造成的影响(涉及元素的增加和减少)，这些关系可以基于数据也可以基于假设\n\n寻找关系形成的闭环，这些就是反馈回路\n  Example\n\n场景：很多客户抱怨我们的产品bug太多并且响应时间太慢(慢会导致用户创建更多support tickets)，同时我们也在新增功能来让用户满意。\n首先确定关键元素：不开心的用户、bug、响应时间、support ticket、新功能  \n列出关系并画在图上，本例子中，不满足的用户会创建更多的support tickets并因此增加响应时间，响应时间增加又会增加不满意的客户；推出新功能会减少不满意的客户但也会带来更多的bug，这些bug又会增加不满意的客户。  \n\n\n\n从中能找到一个正反馈回路。接下来的目标就是消除这些正反馈回路了\n冰山模型\n分析问题要透过现象看本质\n\n\n不能只通过当前发生的事件定位问题，真正的原因往往在更深层。\n\n冰山模型包括四个层次：事件、模式、结构、心智模型。模式是事件随事件变化的趋势，是理解系统结构的线索。结构是系统内部的关系和反馈回路。人们潜在的心智模型导致了这种系统结构。\n\n事件和模式显示是外在表现，结构和心智模型是发生的原因、本质。所以在冰山上探索的越深，越能做出大的影响\n\n一些帮助分析各层次的问题：  事件：现在发生了什么？  模式：随着时间的推移发生了什么？趋势是什么？  结构：是什么影响了这些模式？模式之间的联系在哪里？  心智模型：什么样的价值观、信念或假设塑造了这个系统？  (注意上面这些问题往往很复杂，是需要研究和挖掘的)\n  Example\n\n事件：您的产品团队刚刚发布的功能有几个bug\n模式：回顾过去，每次发布新功能时都会带有几个bug\n结构：调查之后发现团队在发布功能之前没有测试的计划，QA(质量保证)也只在发布后进行；团队的deadline很紧迫。\n心智模型：进一步调查发现团队更重视按时交付而不是产品质量；产品经理强加了紧迫的ddl，团队成员不能推迟交付。\n问题的原因就找到了，这样就能通过一次事件解决一个公司中存在的问题，利于公司未来的发展。\n\n\n\n平衡反馈回路\n使系统自我调节\n\n\n用一个反方向的变化来抵消另一个方向的变化，并试图以此稳定一个系统，往往与强化反馈回路(下面会有)一起出现以产生指数级的变化\n\n重要部分：\n\n目标或期望水平\n实际水平\n两者之间的差距  期望水平发现差距后触发纠正措施，使某物的实际水平接近所需水平。  关键在找到目标或期望水平，这个可能不是很明确或马上找得到的。  \n\n  Example  恒温器在发现室温(实际水平)低于或高于阈值(期望)时，通过加热或冷却以稳定房间内温度。\n\n\n强化反馈回路\n正反馈循环\n\n\n就是正反馈循环，某次循环的输出成为下次循环的输入，同时有一个外部变量影响整个循环。例如利滚利，有账户余额和利息收入，外部变量为利率。\n系统中通常同时存在强化反馈回路和平衡反馈回路，一个以指数级的方式增加收益，一个维持系统稳定性。\n\n做出决策Cynefin框架 \n不同问题不同处理，确定问题的类型，并选取正确的解决方式\n\n\nCynefin发音为 &#x2F;kənɛvɪn&#x2F;\n不同情况需要不同的处理方式\n该框架用来确定在哪个情况，并根据其特征选择适当的操作。确定了五个领域来进行分类：清晰、complicated、complex、混乱、无序  \n清晰：问题很明确、解决方法也很明确，不需要太多专业知识。正确方法就是了解情况(感知)-&gt;分类-&gt;应用最佳实践解决方案。\ncomplicated：问题明确，但是解决方案有多个。最好方法是感知-&gt;分析-&gt;应用方案。这里的分析是需要有专业知识的专业进行评估，调查可能的解决方案并选择。\ncomplex：不知道要解决什么问题，无法通过分析来理解，因为了解不够。正确做法是先做实验来了解问题，感受正在处理的事并做出适当的响应，目标是充分理解并将问题或情况转移到更容易处理的complicated领域。\n混乱：事情不受控制，因果关系不清楚。此时要采取行动稳定、遏制局势，才能在相对有序的complex领域来分析问题。当然这种领域下也有尝试新颖解决方案的机会，因为此时人们对这些方案也更开放、包容。\n无序：甚至不知道自己的立场。此时应该快速确定正确的领域，将问题或情况分解并分配给合适的领域。\n\n\n一组可用的问题：\n什么原因造成这种情况的？\n情况是否得到控制？\n对它了解多少？\n解决它需要专业知识吗？\n\n\n\n六顶思维帽子\n从不同角度思考问题\n\n\n每个帽子代表一种镜头、视角、思维方式，尝试戴上不同的帽子来审视决策。\n\n团队合作时可以分配帽子来获得相对平衡的讨论。\n\n🟡黄帽代表积极性，看这个决策的好处和带来的机遇。\n\n🟢绿帽代表创造力。解放您的思想以提出有创意的选择和解决方案。可以使用高效思维模型(下面有)或第一原则(下面有)等工具。\n\n🔴红帽代表感性。看自己和其他人仅通过直觉时，对决策的反应情况。\n\n⚪️白帽代表理性。分析可用数据和趋势来评判决策。\n\n⚫️黑帽代表不利因素。想想潜在的负面结果、最坏的情况、不起作用的因素。可以使用反演(下面有)。\n\n🔵蓝帽子代表流程控制。比如在没有进展的情况下，通过“换帽子”来推动团队前进。\n  Example(这个会议内容是有争议的，比如可能有人厌恶被🔵打断)  您正在会议上决定是否在产品中引入新产品以应对销量下滑\n\n🟡新产品可能迎合很大的市场份额，是获得大量收入的好机会\n⚫️如果新产品蚕食我们的现有产品怎么办？如果人们不满足产品质量而不购买怎么办？\n⚪️当前掌握的数据显示了有一些未满足的需求。同时现有产品的销量下降预示着整个市场正在转向不同的解决方案。\n再次🟡，通过数据支持发现市场上未满足的需求，这代表一个坚实的机会。\n如何确保产品有足够的价值？🟢想出新产品原型并与其他人讨论。\n创作性的讨论已经进行了一段时间了，🔵协调员建议先别做出引入新产品这个决策，除非新产品被所有人证明有价值\n🔴统计每个人对这个决策的看法，人们一致认为是个高风险的决策，最好先降低风险再进行决策。这减少了所有人的焦虑情绪。\n\n  该网站作者所参考的书籍，分数不是很高而且评论区也有不满的观点\n\n\n二阶思考\n思考决策的长远影响\n\n\n有些决策一开始是正确的，但随着时间的推移会变得不合理。二阶思考可以帮助检查决策的长期影响\n\n决策的直接影响是第一阶思考，对每个影响问自己“然后呢？”，这个然后可以是10分钟、10月、10年  \n  Example\n\n决策：在城外买房子\n直接影响：拥有一个花园，家人有更多空间，但是离工作地点的路程多了一个小时\n二阶影响\n拥有花园-&gt;能自己种农产品-&gt;有新鲜的蔬菜\n家人更多空间-&gt;更多需要打扫的房间-&gt;房间凌乱带来更多压力\n工作通勤增加一小时-&gt;需要买辆车-&gt;每天多花两个小时在车里\n\n\n以上是一小部分的二阶思考，可以体现出更长期的后果，基于此可以进行更明智的决策。、\n\n\n\n艾森豪威尔矩阵\n按重要性和紧迫性对您的行动和任务进行优先排序\n\n\n\n\n\n紧迫\n不紧迫\n\n\n\n重要\n马上做\n安排时间做\n\n\n不重要\n委托\n不做\n\n\n\n该矩阵为2x2，四个象限分别为：\n\n重要紧急-&gt;马上做：需要尽快完成的任务，是现在不采取行动会产生负面后果的事\n重要但不紧急-&gt;安排时间做：这个事项通常是深入的工作发生的地方。通常是有利于项目或长期目标的事项。\n紧急但不重要-&gt;委托：尽量委托给其他人；如果实在无人委托就安排时间做，但是在这之前还是先完成重要但不紧急的工作。通常是有ddl但是不重要的管理任务。\n不紧急不重要-&gt;不做：不值得花时间，根本不应该做。\n\n\n紧急任务通常有明确的截止时间或要求立即做出反应，重要任务往往与长期目标保持一致并推动项目向前发展。确定紧迫性和重要性始终取决于您的环境以及您识别真正紧迫和真正重要的事情的能力。\n  Example\n\n\n\n\n紧迫\n不紧迫\n\n\n\n重要\n完成一份临期报告将草案发给客户修复Bug\n设计一个新功能写一篇博客健身\n\n\n不重要\n安排面试购买门票回复电子邮件\n参加没有议程的会议检查社交媒体消息\n\n\n\n\n推理阶梯\n通过一步步的推导得到结论而不是不管隐情、直接从事件外表得到结论\n\n\n梯子上有七个步骤，从下往上分别是：\n\n可用数据：可观察到的现实\n所选数据：从可用数据中挑选出的重点关注的内容。\n释义：解释所选数据以理解它\n假设：根据解释做出个人假设\n结论：从假设中得到结论\n信念：从得出的结论发展出信念\n动作：基于信念采取行动\n\n\n在进行决策时，停下来质疑自己的推理，步骤如下：\n\n首先确定当前处于阶梯的哪一步\n然后沿着阶梯向下走，每一步使用以下的指导问题：\n动作：为什么我认为这是正确的行动？有哪些替代选择？\n信念：我对此持有什么信念？它们基于什么结论？\n假设：为什么我得出这个结论？我的假设是什么？\n释义：我是否客观地看待这些数据？它们还有什么其他含义？\n所选数据：我忽略或没有注意什么？还有我没考虑的其他可用数据吗？\n到达底部后再次努力向上，这次会更清醒、更慎重\n\n\n\n  Example\n\n我在管理一个开发团队，一个组员总是不能按时完成任务，这导致几个项目进度被推迟了。我断定他不适合这个工作并决定解雇他。但此时我准备使用推理阶梯来做出更好的决定。\n为什么解雇他是正确的决定？因为我清楚他不适合这份工作。\n这种信念基于什么结论？他不是一个好的开发人员\n我的假设是什么?我认为他最近的表现代表了他的工作素质\n我为什么要这样假设？因为不能按时完成意味着他没有效率\n我正在查看的数据还有什么其他含义？不能按时完成可能意味着ddl设置不合理，或者他花费了额外的时间来提高代码质量\n我还有没考虑的可用数据吗？我还没有当面询问他的情况，如果我这样做，可能可以找到真正原因\n通过上面的思考可能就避免了解雇一个正在解决个人问题或注重代码质量或迫于不合理的ddl的开发人员。避免了错误和过早的决定。\n\n\n\n决策矩阵\n存在多个决策和影响因素时，使用表格进行打分，用分数辅助决策\n\n\n多个决策涉及多个因素时，不太好做出决定。此时可以使用决策矩阵\n\n决策矩阵包括决策和因素，通过对他们的交叉点打分并计算总分，辅助做出决策\n\n创建矩阵的步骤为：\n\n列出决策选项 \t\n列出要考虑的因素\n根据事实对每个因素的决策选项进行评分\n为每个因素赋以权重\n权重乘分数并相加计算总分\n选择得分最高的选项\n\n  Example\n\n您领导了一个设计团队，正在决定使用的设计工具，选择了Figma、Sketch、Framer。接着您确定预算为首要因素，同时与团队讨论后同意将最为重要的功能，即原型制作和协作功能作为影响因素\n绘制了如下表格\n\n\n因素\n成本\n原型制作\n协作\n分数\n\n\n\n权重\n\n\n\n\n\n\nSketch\n\n\n\n\n\n\nFigma\n\n\n\n\n\n\nFramer\n\n\n\n\n\n\n\n成本上Figma和Sketch都是12 $，Sketch为9 $；原型制作上Framer最为强大，Figma比Sketch稍微好一点；协作上经过团队评估后，认为Figma最适合。打分如下\n\n\n因素\n成本\n原型制作\n协作\n分数\n\n\n\n权重\n\n\n\n\n\n\nSketch\n4\n2\n3\n\n\n\nFigma\n3\n3\n5\n\n\n\nFramer\n3\n5\n3\n\n\n\n\n一开始就确定了预算最为重要；之后经过团队讨论认为协作比原型制作更重要，于是添加权重并计算后如下\n\n\n因素\n成本\n原型制作\n协作\n分数\n\n\n\n权重\n5\n4\n3\n\n\n\nSketch\n4\n2\n3\n37\n\n\nFigma\n3\n3\n5\n42\n\n\nFramer\n3\n5\n3\n44\n\n\n\nFramer分数最高，于是选择Framer\n\n\n\n信心决定“速度”还是“质量”\n评估问题的重要性和团队的能力后再确定要速度还是要质量\n\n\n在产品开发中往往要在速度和质量之间做出抉择\n此时需要评判自身对问题的重要性和解决能力的自信\n\n\n\n解决能力高\n解决能力低\n\n\n\n重要性高\n又快又好，干就完了\n质量\n\n\n重要性低\n速度\n再做权衡\n\n\n\n\n艰难抉择模型\n\n\n\n该模型可以帮助您确定您的决策是什么类型的，这将影响您对决策的推行\n\n考虑两个因素：\n\n决策的影响有多大？\n比较各个决策选项有多容易？\n\n  基于这两个因素产生了下面这个2*2的矩阵\n\n\n\n\n决策影响较小\n决策影响较大\n\n\n\n比较多个决策选项是很难的\n苹果&#x2F;橙子的选择需要基于你到底觉得哪个重要来改善选项\n大选择决策前获得信心\n\n\n比较多个决策选项是很容易的\n无脑的使用直觉，快速决定\n艰难的抉择使用决策矩阵(上面有)\n\n\n\n\n解决问题鱼骨图\n分解问题+列举原因\n\n\n原名石川图(我才知道这个图是日文名字)，也叫因果图\n其实就是多维度分解问题+列举可能原因Example\n您是一个产品经理，正在解决一个新用户越来越少的问题\n您将问题分解为页面问题、外部竞争、市场，并各自列举出了一些可能的原因\n画图如下\n\n冲突解决图\n逐步发掘冲突双方的共同目的，以此团结双方，继而寻求双赢方案。\n\n\n这张图分为三部分：\n\n双方的直接需求和建议(通常是互斥的，即冲突的原因)。问：对方想干嘛？我想干嘛？ \n双方的潜在需求。问：双方的提议能满足什么需求？\n需求背后的共同目标(解决冲突的关键)。问：满足双方的需求后，会得到什么？  \n\n  Example\n\n场景：您与同事讨论重新设计产品网站。您反对，但同事想推动。\n双方的建议：不重新设计和重新设计\n背后的需求：您反对是因为想尽量减少人力资源浪费，同时重新设计也有很大的风险。同事想推进是想提高网站转化率。\n共同目标：你们都想实现公司的财务目标。  \n基于这个共同目标，您提出一个双赢的解决方案，比如运行一个小型的有针对性的实验，这样就不必占用大量资源，同时提高转化率。\n\n\n\n生产性思维模型\n一套循序渐进的思维过程\n\n\n当问题已经定义好并正在寻找创造性的解决方案时，使用这个工具。\n\n这个工具是应用更有条理和批判性的思维。\n\n六个步骤：\n\n发生什么了？\n怎样才算成功\n问题是什么\n生成答案\n指定解决方案\n对齐资源  \n\n\n发生什么了？这一步是帮助更好的理解问题。下列是一些指导性的问题：\n\n究竟是什么问题？\n这个问题会带来什么影响？\n我目前掌握了什么信息？\n哪些人参与其中？\n问题解决后的未来愿景是什么？\n\n  请记录上面提问的答案\n\n怎样才算成功？这一步帮助定义未来愿景中的成功。使用DRIVE框架如下\n\n您希望解决方案能做什么？\n有什么限制？它不能做什么？(这里可以采用反演)\n我没可以投入哪些资源?\n解决方案应该有什么价值？\n重要成果应该是哪些？\n\n  随意、循环的回答这些问题知道对“成功”有了清晰的认识\n\n问题是什么？提出类似以下的问题：\n\n我们可能实现…吗？\n我们怎么实现…？\n\n\n生成答案。对之前提出的问题提出尽可能多的答案，集思广益，只收集而不要去评判。\n\n指定解决方案。从上一步中获取问题列表，并根据成功标准评估每个想法&#x2F;解决方案，这里可以采用决策矩阵。\n\n资源对齐。写下实现目标需要的行动、资源、人员，越详尽越好，以便生成清晰的计划，然后就可以开始执行解决方案了。\n  Example\n\n发生什么了？您要解决的问题是赢得一个潜在客户，经调查发现该用户要求苛刻但是能带来大量收入，失去该收入会带来重大负面影响，您的团队已经与他保持联系，并且知道他很重视易用性。您的愿景是该客户在岗位上每天使用您的产品并带来收入。\n\n定义成功。\n\n解决方案需要做什么？向用户展示您产品的价值以及您会如何照顾他们。\n限制是什么？解决方案必须表明我们满足了需求并且产品易用。\n我们可以投入哪些资源？可以分配两个星期的两名销售人员和一个星期的设计师和工程师。\n解决方案的价值？令人信服、透明、经过深思熟虑。\n重要结果是哪些？客户同意签订合同。\n\n\n定义相关问题。\n\n我们如何展现出满足了他们的需求？\n如何证明易用性？\n\n  这里给出了一些可用方案：\n\n展示包含产品和公司的亮点的PPT\n为客户提供个性化的交互演示\n让用户亲身参观、体验产品\n\n\n选择最有希望的解决方案。使用决策矩阵后证明最好的解决方案是让用户亲自体验产品\n\n调配资源。派出一个由两名销售人员和一名工程师组成的小团队前往客户那里一天。销售副总裁将负责协调此事。工程经理将负责为试用准备正确版本的产品。\n\n最有希望的、明确的行动计划产生了。\n\n\n\n\n抽象阶梯\n\n\n\n看的不是很懂。。好像就是交替、渐进地问How、Why\n\n反演\n反向思考\n\n\n从避免负面影响的方法推出产生正面影响的方法\n\n问题树\n结构化问题和解决方案并分而治之\n\n\n创建一个问题的问题树时问“为什么”， 解决方案树问’怎么了’ \n创建的原则是互斥、详尽\n\nExample您正在开发一种产品，您的客户很少使用您的一个功能。\ngraph LR\nA[某功能不被使用] -->  B(客户不知道这个功能)\nA --> B1(客户知道但是仍然不用)\nB --> C(这个功能在产品中不可见)\nB1 --> C1(客户没有学习这个功能)\nC --> D(客户还没试用这个功能)\nC --> D1(客户试用了但是不准备继续用)\nD --> E(客户不相信这个功能是有用的)\nD1 --> E1(功能不可用)\nD1 --> E2(功能有Bug)\nD1 --> E3(功能不满足用户的需求)\n第一原则\n不断分解问题直至无法分解，接着对每个元问题做出解答，即分而治之\n\n\n可以不断提出以下问题：\n\n你说的…是什么意思？\n我们可以假设什么？\n你凭什么认为这是真的？\n那会造成什么影响？\n有替代方案吗？是什么？\n这个问题的意义在哪？\n\n  如果提出的问题的范围太大，可以继续分解，就继续使用上面的提问方式提出子问题  \n\n\n沟通明托金字塔\n展现的内容先吸引眼球-再大致概括-再详细论证\n\n\n没人愿意花时间阅读长篇大论，需要更清晰高效的内容\n\n明托金字塔自上而下为结论、关键论点、详细论据  大概就是结论吸引眼球、论点起概括作用、论据让人信服  \n  Example\n\n您刚完成了一项研究并准备与同事分享结果、提出建议\n一篇以明托金字塔为结构的信件内容如下(懒得翻译了，应该看得懂吧…)  \n\n\n\n情况-表现-影响\n在对他人行为不满并要做出质问时，不要直接主观的给出评价，可以按情况-表现-影响三段式(其实不止)做出表述，这可以引出一段相对健康和客观的讨论\n\n\n将您表述划为三段：\n\n情况，具体的时间、地点、人物\n行为：对方做了什么(或没做什么)\n影响：这个行为对其他人或团队造成的影响\n意图(作者后加的)：追问行为背后的意图，因为可能有一个您不知道或与您的假设不同的合理意图\n鼓励反思(也是后加的)：鼓励对方反思您说的话，反思未来应采取的行动\n\n  Example\n\n情况：“在昨天的产品审查会议上，当你提供你团队的最新信息时”\n行为：“你没有分享任何关于我们的客户是如何使用我们新功能的最新了解”\n影响：“没有你的报告，我们会做出错误的决策”\n意图：“所以你为什么没有分享任何东西？”\n\n\n\n","categories":["软实力","软件工程"]},{"title":"《没有理想的人不伤心》","url":"/2025/05/12/%E3%80%8A%E6%B2%A1%E6%9C%89%E7%90%86%E6%83%B3%E7%9A%84%E4%BA%BA%E4%B8%8D%E4%BC%A4%E5%BF%83%E3%80%8B/","content":"网易云 - 没有理想的人不伤心\n没有理想的人不伤心 - 新裤子我最爱去的唱片店昨天是她的最后一天曾经让我陶醉的碎片全都散落在街边我最爱去的书店她也没撑过这个夏天回忆文字流淌着怀念可是已没什么好怀念可是你曾经的那些梦都已变得模糊看不见那些为了理想的战斗也不过为了钱可是我最恨的那个人他始终没死在我面前还没年轻就变得苍老这一生无解没有我的空间没有我的空间没有我的空间没有我的空间你曾热爱的那个人这一生也不会再见面你等在这文化的废墟上已没人觉得你狂野那些让人敬仰的神殿只在无知的人心中灵验我住在属于我的猪圈这一夜无眠我不要在失败孤独中死去我不要一直活在地下里物质的骗局匆匆的蚂蚁没有文化的人不伤心我不要在失败孤独中死去我不要一直活在地下里物质的骗局匆匆的蚂蚁没有文化的人不伤心他不伤心我最爱去的唱片店昨天是她的最后一天曾经让我陶醉的碎片全都散落在街边我最爱去的书店她也没撑过这个夏天回忆文字流淌着怀念已不能怀念我不要在失败孤独中死去我不要一直活在地下里物质的骗局匆匆的蚂蚁没有文化的人不伤心我不要在失败孤独中死去我不要一直活在地下里物质的骗局匆匆的蚂蚁没有文化的人不伤心他不伤心我不要在失败孤独中死去我不要一直活在地下里物质的骗局匆匆的蚂蚁没有文化的人不伤心我不要在失败孤独中死去我不要一直活在地下里物质的骗局匆匆的蚂蚁没有文化的人不伤心他不会伤心他不会伤心他不会伤心他不会伤心他也会伤心他也会伤心他也会伤心伤心\n"},{"title":"《漫步人生路》","url":"/2024/12/04/%E3%80%8A%E6%BC%AB%E6%AD%A5%E4%BA%BA%E7%94%9F%E8%B7%AF%E3%80%8B/","content":"【TNO】漫步人生路 - 1995群星live加长版\n\n在你身邊 路雖遠 未疲倦\nzoi nei san bin lou sui yvn mei pei gvn\n伴你漫行 一段接一段\nbun nei man hang ya dvn zi ya dvn\n越過高峰 另一峰 卻又見\nyv guo gou fong ling ya fong koe yao gin\n目標推遠 讓理想 永遠在前面\nmu biu tui yvn yoeng lei soeng wing yvn zoi cin min\n路縱崎區 亦不怕受磨練\nlou zong kei kui yi ba pa sao mo lin\n願一生中 苦痛快樂 也體驗\nyvn ya sang zong fu tong fai lao ya tei yim\n愉快悲哀 在身邊 轉又轉\nyv fai bei oi zoi san bin zvn yao zvn\n風中賞雪 霧裏賞花 快樂回旋\nfong zong soeng sv mou lui soeng fa fai lao wui svn\n毋庸計較 快欣賞身邊 美麗每一天\nmou yong gei gao fai yan soeng san bin mei lei mui ya tin\n還願確信 美景良辰在腳邊\nwan yvn kao sun mei ging loeng san zoi goe bin\n願將歡笑聲 蓋掩苦痛那一面\nyvn zoeng fun siu sing goi yim fu tong na ya min\n悲也好 喜也好 每天找到新發現\nbei ya hou hei ya hou mui tin zao dou san fa yin\n讓疾風 吹呀吹 盡管給我倆考驗\nyoeng za fong cui a cui zun gun ka o loeng hao yim\n小雨點 放心灑 早已決心向著前\nsiu yv dim fong sam sa zou yi kv sam hoeng zoe cin\n\n"},{"title":"个人编程心得记录","url":"/2024/03/26/%E4%B8%AA%E4%BA%BA%E7%BC%96%E7%A8%8B%E5%BF%83%E5%BE%97%E8%AE%B0%E5%BD%95/","content":"\n各种语言各有各的妙处，不求都学精，但融会贯通总有好处。比如不能因为学了java就什么语言都用面向对象和class\nreact native开发需要手动下包，不然太慢了\nc的fork和pthread_create分别是创建进程和创建线程，需要资源隔离的话应该是要创建线程\nshell是门解释型语言，开发难度较高(对我来说语法太繁琐且容错低了)，linux上开发大脚本可能还是c靠谱一些\nprotobuf只是一个将数据编码为二进制的协议算法，rpc只是基于tcp上实现好了的一个数据通信方式，没什么高级的\n\n"},{"title":"一文搞定高性能API设计","url":"/2023/08/16/%E4%B8%80%E6%96%87%E6%90%9E%E5%AE%9A%E9%AB%98%E6%80%A7%E8%83%BDAPI%E8%AE%BE%E8%AE%A1/","content":"\n这篇来自一文搞定高性能API设计_CSDN资讯的博客-CSDN博客，我眼前一亮，有很完备的归纳总结，于是转载到自己的博客网站上(csdn说未经允许，禁止转载，我先偷偷转再说)\n\n这篇文章分享了设计高性能 API 的重要性，和如何设计高性能API，包括 API 设计原则，构建 API 时需考虑拓展性和效率，选择适合的架构，进行数据验证和清理、利用缓存技术、异步处理，还包括优化 API 通信的最佳实践，防止滥用和保护 API 资源的策略、设置速率限制和限制阈值的注意事项，性能调优和不断优化等。\n原文链接：https://dzone.com/articles/designing-high-performance-apis\n本文将深入分析 API 设计的关键原则，目的是最大化 API 的性能和可扩展性。遵循这些原则，你将能够构建能提供卓越用户体验、处理增长的工作负荷，并推动系统成功的 API。\n\n高性能 API 设计的重要性在当今数字环境中，高性能 API 发挥着至关重要的作用。它们在提升用户体验、确保可扩展性、优化成本效益、保持竞争力、提高开发效率以及推动商业成功方面至关重要。用户期望快速、灵敏地应用体验，而高性能的API能够确保及时传输数据，保证流畅的体验。优秀的API设计能够有效地扩展，满足不断增长的需求，并节省额外的资源成本。在竞争激烈的市场环境中，高性能的API成为企业的竞争优势，同时让开发人员更专注于功能构建，而不是性能问题排查。因此，设计高性能的API应成为开发人员、技术经理和企业主的优先事项，以满足用户期望，促进成功，并推动业务增长。\nAPI 性能的关键因素概述高性能 API 的速度、可扩展性和可靠性受到几个主要因素的影响，包括延迟、缓存、资源利用和网络效率。通过降低延迟来确保 API 快速响应，可通过技术如缓存、负载均衡和减少网络往返来实现。可扩展性是指 API 在应对增加的流量和工作负载时，不损害性能，技术包括水平扩展和数据库查询优化。缓存策略通过将频繁访问的数据存储在内存中来提升性能。资源利用的优化涉及到 CPU、内存和网络带宽，例如负载均衡和连接池的使用。网络效率可通过减少往返、数据压缩和批处理或异步操作来提升。综合考虑这些因素，开发人员能够构建速度出色、可扩展且可靠的高性能 API。\nAPI 设计原则解析设计高性能 API 必须遵循一些优化效率的基本原则。\n以下是一些提升性能的关键 API 设计准则：\n\n以减小开销和有效载荷大小为目标，优先考虑轻量级设计，降低网络延迟，提高响应速度。例如，可以通过使用字典和哈希表等有效的数据结构来优化数据操作，从而提高 API 性能。\n\n仔细规划 API 端点以与预期的使用模式一致，从而减少无用的 API 调用，提高数据检索和处理效率。针对大型数据集实施分页，小块形式检索数据，防止过载并加快响应速度。\n\n允许选择性字段过滤，让客户端在 API 响应中指定所需字段。这样可以减少不必要的数据传输，提高网络效率并降低响应时间。\n\n选择合适的响应格式，例如 JSON，以确保数据传输更紧凑、高效，从而提升网络性能。\n\n考虑 API 设计的版本控制和向后兼容性，确保在不影响现有客户端的前提下实现无缝更新。恰当的版本控制可确保平稳过渡到更新的 API 版本，并保持兼容性。综合这些设计因素，开发人员能够构建出高效、响应迅速并且提供优秀用户体验的高性能 API。\n\n\n\n针对可扩展性和效率构建API设计API时，要关注的核心目标是可扩展性与效率，这有助于确保优异的性能，并为未来的增长提供充分的适应性。通过遵循一些具体的设计原则，开发人员可打造出既能有效扩展又能高效执行的API。以下是构建可扩展和高效API的几个关键要素：\n\n无状态设计：通过让每个API请求包括全部必要的处理信息，可以实现无状态架构。这样不仅简化了服务器上会话状态的维护，还使得系统更灵活地支持可扩展性，并提升了性能。\n\n资源导向设计： 采用以资源为核心的设计策略，可以将API端点看作是不同的资源，这样做提供了一种一致而直观的架构，有助于数据访问和操作的优化。\n\n异步操作的使用：针对长时间运行或计算密集型任务，可以采用异步处理。通过将此类操作分离到后台进程或队列中，API 可以保持响应，避免延迟，并提升整体效率。\n\n水平扩展： API 支持水平扩展的设计，可部署更多的API实例以应对增加的流量。借助负载均衡器均匀分配请求到这些实例，确保资源得到高效利用。\n\n有策略地实现缓存： 通过缓存机制存储常访问的数据，减少重复计算的需求。API能在不同层次（如应用程序、数据库或边缘）有计划地缓存数据，从而更快响应，大幅缩短响应时间，并增强可扩展性。\n\n数据库的高效使用： 通过适当的索引、精确的查询设计和缓存机制来优化数据库查询，从而避免不必要或高成本的操作，如全表扫描或复杂连接，以防止对API性能的不利影响。\n\nAPI速率限制： 引入速率限制机制，控制特定时间段内对API的请求次数。速率限制有助于防止滥用，保护服务器资源，确保公平使用，从而提升整体的可扩展性和效率。通过融合上述设计原则，开发人员能够构建出具有可扩展性、高效能，并能够适应不断增长需求的API。针对可扩展性和效率来构建API，是确保强健和卓越性能系统的基础。\n\n\n\n选择合适的架构模式在设计API时，选择正确的架构模式能够支持系统的可扩展性、可靠性和可维护性。以下是一些关键的架构模式：\n\nRESTful 架构：通过 REST 实现，强调可扩展性、简易性和客户端与服务器的松散耦合。\n\n微服务架构：将应用拆解为可独立扩展的小服务，促进可扩展性、灵活性和故障隔离。\n\n事件驱动架构：基于事件和消息触发，实现系统的松散耦合和可扩展性，适合实时处理和组件通信。\n\nGraphQL：作为RESTful的替代，通过精确请求所需数据和灵活的查询语言来提高性能。\n\n无服务器架构：消除服务器管理环节。通过基于执行次数付费和特定事件触发功能，提供成本效益、可扩展性，并降低运营压力。精心选择架构模式有助于搭建符合需求的解决方案，奠定未来可扩展性和可维护性的基础。\n\n\n\n高效数据处理对 API 性能而言，高效的数据处理至关重要。设计数据模型时，需注重提升检索、存储和处理效率的优化措施。\n以下是针对最优性能设计数据模型时的核心考虑因素：\n\n通过数据规范化可以减少冗余，确保数据的完整性。如果要提高性能，可以取消数据规范化以减少连接。在频繁查询的字段上应用适当的索引有助于提高数据检索速度。同时，还可以选择高效的数据类型，从而降低存储和处理的需求及开销。\n\n采用延迟加载来在必要时才获取相关数据，或使用预先加载减少后续查询。尽量进行批量操作以降低数据库的往返次数并提升效率。\n\n通过采用预先加载或分页技术来避免 N+1 查询问题。综合这些考虑因素，开发人员可优化数据处理，进而加速检索、缩减处理时间，提高 API 的扩展能力和响应性。\n\n\n\n实现数据有效验证和净化维护数据的完整性、安全性和 API 性能要求执行严格的数据验证和净化流程。主要措施包括：\n\n输入验证：验证所有传入数据的格式、长度和约束条件，使用正则表达式、白名单等技术防止恶意数据。\n\n净化：移除或转义有害字符和脚本，采用 HTML 实体编码等方式防范跨站脚本攻击。\n\n数据类型验证：检查和处理数据类型，避免不兼容类型可能导致的错误或性能问题。\n\n数据长度和大小检查：限制数据的长度和大小，验证输入大小并设置合适的限制以保证性能。\n\n错误处理：建立全面的错误处理机制，准确传达错误信息，帮助开发者快速定位和解决问题。\n\n安全性考虑：确保与安全最佳实践一致，采取合适措施解决常见安全漏洞，如 SQL 注入和跨站请求伪造等。\n\n\n\n最小化不必要的数据传输和有效载荷大小为了实现 API 的高效性能，减少不必要的数据传输和优化有效载荷大小是至关重要的。以下是实现这一目标的主要方法：\n\n允许客户端选择仅检索所需字段，减小数据传输和响应有效载荷大小。\n\n使用分页技术分批检索数据，提高大型数据集的响应速度。\n\n使用压缩技术如 GZIP 或 Brotli 来减小 API 响应的有效载荷大小，提高数据传输速度。\n\n设置数据过滤，让客户端仅检索相关信息，减少不必要的数据传输。\n\n通过缓存控制头部，允许客户端缓存 API 响应，减少重复数据传输。\n\n考虑使用二进制协议，因为通常比文本格式如 JSON 有更小的有效载荷大小。采纳这些方法可以优化数据传输，减小有效载荷大小，提高 API 总体性能。高效的数据处理可以加快响应时间，降低带宽使用，并提升用户体验。以上措施将有助于提升 API 的性能和可用性。\n\n\n\n利用缓存技术缓存技术在优化API性能方面非常关键。通过将经常访问的数据存储在内存中，它可以实现快速响应并减少延迟。开发者理解缓存及其作用很重要。缓存数据避免了每次请求都从原始源获取数据，显著缩短了响应时间，尤其适用于频繁访问或较少变动的数据。战略性使用缓存技术带来多重优势：\n\n降低延迟：快速响应用户，提升体验，避免耗时操作。\n\n提高可扩展性：减轻后端压力，支持更大流量。\n\n降低数据库负载：减少数据库查询频率，提高整体效率。\n\n增强可用性：即使原始数据源不可用，通过缓存数据保证服务连续。为发挥缓存优势，开发者需考虑过期时间、失效机制，选择适合不同数据类型的缓存策略。合理使用缓存技术能显著提升API性能、可扩展性，增强用户体验。\n\n\n缓存功能在企业级集成平台中，缓存功能起着关键角色，它可以高效地管理企业的动态或静态数据。\n\n缓存类型及用途缓存是优化API性能的强大技术。了解不同缓存类型的用途和优势，帮助开发者选择最适合其API的方案。以下是三种常见的缓存类型：\n\n内存缓存：将数据存储在服务器或应用内存中，适用于频繁访问且需要快速检索的数据，如数据库查询结果、常访问的 API 响应等。\n\n分布式缓存：将数据缓存在多个服务器或节点之间，实现高可用性和可扩展性。特别适用于多实例共享数据或处理大规模流量的系统，提高性能并减轻后端负担。\n\n客户端缓存：将数据存储在用户端，如浏览器或本地存储中。适用于静态资源、特定用户的API响应或不频繁更改的数据的缓存，减少网络请求、提高响应时间，并优化离线浏览体验。选择合适的缓存类型涉及数据性质、使用模式、可扩展性需求和性能提升等因素。内存缓存用于快速检索，分布式缓存提供可扩展性和容错能力，客户端缓存增强用户体验并减轻服务器压力，正确选择缓存类型可以显著减少响应时间，提升系统性能。\n\n\n\n缓存的实现与失效策略要实现高效的缓存，必须精心构思缓存策略与失效机制。下面列举了一些关键策略，可确保缓存的有效实现和正确的失效处理：\n\nCache-Aside 策略：此策略首先尝试从缓存中获取数据，如果缓存未命中，则从数据源获取。未命中时，将从数据源获取的数据存储在缓存中以备后用。Cache-Aside 策略灵活，并允许开发者对数据进行缓存并控制缓存时长。\n\n写入式策略：在数据更改时，写入式策略同时更新缓存和数据源，确保数据的一致性。任何修改都会同时影响缓存和底层存储。虽然这会产生更多的写操作，但能确保缓存始终保持最新。\n\n生存时间（TTL）过期：通过设置缓存数据的生存时间（TTL），可以指定数据在缓存中的有效时长，过期后将触发从数据源刷新，从而确保缓存数据保持最新，并降低了提供过时信息的风险。\n\n缓存失效：当缓存数据变陈旧或过时，可选择更新或删除它们。缓存失效技术包括：\n\n手动失效：在数据更改时，开发者显式地使缓存失效，通过直接从缓存中删除受影响数据或选择性地使用缓存标签或键使相关数据失效。\n\n基于时间的失效：除了依赖TTL过期，还可以设置特定的间隔以定期刷新缓存。这确保缓存定期更新，减少提供过时数据的风险。\n\n基于事件的失效：可以依据特定事件或触发器使缓存失效。例如，当相关数据实体更改时，发出事件以使实体的缓存失效，确保缓存与数据源同步。缓存策略和失效机制的选取需考虑数据波动性、更新频率和数据依赖性等因素。选择合适的策略可确保缓存准确、最新，并满足性能提升的需求。\n\n\n\n\n\n异步处理异步处理在 API 设计中起到关键作用，提升性能、可扩展性和响应能力。以下是将异步处理集成到 API 设计中的主要优点：\n\n增强响应能力：并行处理请求，减少响应时间，改进系统交互体验。\n\n提升可扩展性：有效处理大量并发请求，支持流量高峰和用户基数增加。\n\n优化性能：提高资源使用效率，增强系统整体性能，减少潜在瓶颈。\n\n增强容错能力：强化容错机制，从故障中恢复而不影响整个系统。\n\n优化长时间执行的任务：异步处理长时间任务，保证客户端及时响应，提升用户体验。融合异步处理至 API 设计全面提升响应能力、可扩展性、性能、容错能力和长时间任务的支持。使API更高效处理并发请求，资源利用更合理，为用户提供无缝体验。\n\n\n\n实现异步操作的方法异步操作在 API 设计中是非常关键的部分，它允许以高效和非阻塞的方式处理任务。以下是用于实现异步操作的几种主要技术：\n\n回调（Callbacks）：将特定的函数或处理程序作为参数传递给异步操作。操作完成后，将以该结果来调用对应的回调。这允许 API 在等待过程中处理其他事务。\n\nPromise（Promises）：Promise 提供了一种更加直观的处理异步操作的结构，它代表了异步操作的最终状态，并允许使用 ‘.then()’ 和 ‘.catch()’ 等方法连接操作，简化错误处理和提升代码可读性。\n\n异步&#x2F;等待（Async&#x2F;await）：异步&#x2F;等待是一种现代语法，用于简化 Promise 的操作。通过 ‘async’ 和 ‘await’ 关键字，它提供了类似于同步的编程体验，但仍保持异步操作的优势。\n\n消息队列（Message Queues）：通过消息队列，开发人员可以将异步任务放置在队列中进行后台处理，实现任务与 API 的解耦，从而有效地进行并行处理和任务扩展。\n\n响应式流（Reactive Streams）：这是一种异步处理 API 的规范，通过背压（back-pressure）机制。它特别适用于处理大数据量或慢消费的下游系统，以防止系统压力过大。异步操作的实现技术选项需视编程语言、框架和 API 的具体需求而定。有效利用上述技术，开发人员不仅能有效地处理异步任务，还能提高性能，使 API 体验更流畅。\n\n\n在不阻塞 API 的情况下处理长时间运行的任务采用后台进程、异步任务执行和事件驱动架构等技术，可以在不阻塞 API 的情况下处理长时间运行的任务。此外，还需跟踪进度、实现超时和错误处理，保证任务的有效处理和API的响应能力。\n数据库查询优化数据库查询的优化能显著提升 API 性能、扩展性和可靠性。精心优化查询可降低响应时间、减少网络带宽消耗，确保用户体验一致性，从而促进整个系统的成功。\n索引与查询优化方法要提高数据库查询性能，需要掌握索引和查询优化技巧。通过索引创建、查询结构改进、连接操作优化等方式可以显著提速数据检索过程，增强可扩展性，提升用户体验。\n大型数据集分页与结果集优化针对大型数据集的查询优化，通常采用分页和结果集优化技术。分页、字段筛选、过滤、排序等方法可提高查询效率，确保数据管理的高效性，优化用户体验。\n减缓网络往返次数网络延迟对API性能有直接影响。可以通过批处理、异步处理、数据压缩等方式降低网络往返次数，减轻延迟，使API响应更迅速。深入理解并降低网络延迟对于优化API性能具有重要意义。\n\n减少网络往返次数的技术手段优化 API 性能和降低延迟的关键在于减少网络往返次数。以下是两种行之有效的方法：\n\n批处理技术：将众多 API 请求合并成一个单一请求，降低往返次数，提升性能表现。通过批量处理创建、更新或删除多个资源，您能够降低建立多个连接和传输单个请求的成本。\n\n数据传输压缩：在网络传输前对数据进行压缩，降低网络往返次数。服务器端数据压缩及客户端解压缩可明显缩小传输数据的体积，从而更快地响应 API。使用压缩算法（如GZIP或Brotli）实现压缩体积与解压速度之间的有效平衡。采用批处理与数据传输压缩等技术，开发人员能有效降低网络往返次数，最小化延迟，并进一步提升 API 性能。这些技术优化了网络资源利用，增强了响应速度，为用户带来更流畅的体验。\n\n\n\nAPI 通信优化的主要最佳方案优化 API 通信在减少网络往返次数与提升性能方面具有重要作用。以下是五个主要最佳实践：\n\n选择高效的数据传输格式：如 JSON 或 Protocol Buffers 等轻量且高效的格式有助于最小化数据体积，提高响应速度。\n\n采用压缩技术：利用 GZIP 或 Brotli 等压缩技术可以减小网络传输的数据量，从而加速 API 的响应。\n\n启用缓存机制：缓存经常访问的数据，减轻重复网络请求和往返次数的负担。\n\n优先执行异步操作：把耗时的任务转移到后台运行，使 API 能继续处理请求，不会阻塞或影响响应速度。\n\n优化网络请求：通过批处理技术将相关操作合并为一个请求，减少通信中的往返次数。\n\n\n遵循这些最佳实践，开发人员可全方位优化 API 通信，减少网络往返次数，提升 API 的整体性能。这些策略不仅能加速响应时间，而且还可提升用户体验和网络使用效率。\n\n速率限制与节流的实现速率限制与节流是关键技术，用于控制 API 请求的速度，防止滥用或超载。这确保了公平高效的 API 使用，同时维持系统的稳定性和性能。\n速率限制通过在特定时间窗口内限制 API 请求次数，避免资源过度使用。合适的限制还能防止滥用，维护服务质量。\n节流调整 API 请求的速度或频率，平衡系统负载，预防流量激增导致的性能问题。\n这两种技术使用请求配额、时间限制、令牌系统等控制机制来限制 API 使用。战略实施这些控制手段保证公平、可靠的 API 体验，降低安全风险，保持 API 基础架构的稳定高效运行。\n\n防滥用与保护 API 资源的策略为了预防 API 滥用并保护其资源，实施速率限制和节流时，请参照以下策略：\n\n合理设定限制：在特定时间段内为 API 请求制定合适的限制次数，找到满足用户需求与保护资源免受滥用或超载之间的平衡点。\n\n采用配额和时间窗口：设定如每分钟或每小时允许的请求数量配额，实现 API 使用的公平分配。可以考虑滑动时间窗口来防止请求突然超过限制。\n\n执行基于令牌的控制：要求客户端认证并获取令牌或 API 密钥，利用这些令牌监控并强制执行定义的限制。\n\n提供精细的速率限制：考虑在用户、IP 地址、API 密钥或端点等各层面实施限制，实现细粒度控制。这样做可以确保不同层面上的公平和滥用防护。\n\n优雅的错误反馈：当超过速率限制时，应向客户端提供明确的错误响应，包括限制状态、剩余配额和限制重置的具体信息，以便客户端调整使用情况。\n\n监视和分析使用情况：持续监控 API 使用并分析模式，识别潜在滥用或异常，利用分析和监控工具深入了解流量模式，并侦测任何异常或潜在安全威胁。\n\n实现差异化限速：根据不同类型的 API 端点或操作，制定不同的速率限制。针对某些耗资源的端点可能需要更严格的限制，而其他端点可能可以限制宽松一些。\n\n\n关于合适速率限制与节流阈值的设定思考在确定速率限制与节流阈值时，有几个方面需要关注。首先，需要在限制和便利性之间平衡，优化用户体验，确保对合法用户的限制既不过于严格也不复杂。其次，要对你的 API 资源（如服务器和数据库）的容量进行评估，以便在不消耗全部资源的前提下，确定最佳性能的适当限制。第三，需要将速率限制与商业需求相对应，并考虑不同的服务层或级别。接着，通过分析不同 API 操作的资源消耗情况，设定相应的速率限制。在高峰时要考虑突发请求，并设立适当限制以处理这些情况。还需为超出限制的场景提供明确的错误响应和重试机制。通过持续监测使用、性能和用户反馈，根据需要调整限制和节流阈值。综合这些因素，你将能够确立合适的速率限制和节流阈值，保护 API 资源，并提供流畅的用户体验。\nAPI测试与性能优化策略性能与可扩展性的测试对保证 API 的最佳表现至关重要。通过模拟真实场景和负载条件，使用合适的工具，能够识别瓶颈和验证可扩展性。同时，这也有助于优化响应时间，确保可靠性，进行基准性能测试，并增强用户体验。\nAPI 负载测试和压力测试技巧以下是针对评估 API 性能和弹性的一些有效技巧：\n\n负载测试：通过模拟预期用户负载，来评估 API 在常规操作下的性能。可以利用负载测试工具生成并发请求，同时测量响应时间、吞吐量和资源消耗。然后，通过改变负载来确定 API 在不降低性能的情况下的最大容量。\n\n压力测试：压力测试旨在将 API 推至其极限，以确定弱点并评估其弹性。可以逐渐增加负载，观察 API 在极端条件下的表现。这有助于识别潜在的瓶颈和性能问题。\n\n性能监控：监控重要性能指标，如响应时间、错误率、CPU和内存用量、数据库查询等，以识别性能瓶颈或提升区域。\n\n测试数据管理：为你的 API 准备逼真和多样化的测试数据，确保负载和压力测试能够准确模拟现实情境。\n\n测试环境优化：请确保测试场景与生产环境高度一致，这样测试结果会更贴近实际表现。\n\n基于场景的测试：设计涉及各种用例和复杂工作流的测试场景，包括高峰负载、大数据量和特定用户交互的模拟。\n\n测试结果分析：详细分析负载和压力测试的结果，识别并优化性能瓶颈或任何潜在问题。应用这些负载测试和压力测试的技巧，你能深入了解 API 的性能表现，识别和改进潜在的问题区域，确保 API 能够适应不同程度的工作负载。\n\n\n\n性能调优方法与高性能 API 设计原则性能调优是提升 API 性能的关键任务。方法包括深入分析性能瓶颈、优化关键区域、精简代码和算法、优化数据库查询、审查基础设施和执行负载与性能测试。持续监控性能指标，并基于实时数据进行优化迭代，是确保 API 高性能的关键。\n\n持续监控与优化的重要性持续的性能监控和优化对于维护高性能 API 至关重要。通过持续分析性能数据并采取优化措施，您可以及时发现并解决隐藏的性能问题，保证系统的可扩展性，并提供最佳的用户体验。\n\n高性能 API 对用户体验与商业成功的影响高性能的 API 对于提升用户体验和实现商业成功具有深远的影响。精心设计和优化的 API 不仅能够提供快速且可靠的服务，还能增强用户满意度、参与度和保留率。高性能 API 还有助于整体系统效率的提升和可扩展性的增强，有效应对不断增长的流量和工作负载。这将进一步增强客户忠诚度，提升品牌声誉，并开拓新的收入渠道。投资高性能 API 是战略性选择，有助于在激烈的市场竞争中取得成功。\n————————————————版权声明：本文为CSDN博主「CSDN资讯」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。原文链接：https://blog.csdn.net/csdnnews/article/details/132309879\n","categories":["设计"]},{"title":"以撒的结合攻略","url":"/2025/01/19/%E4%BB%A5%E6%92%92%E7%9A%84%E7%BB%93%E5%90%88%E6%94%BB%E7%95%A5/","content":"控制台https://www.gamersky.com/handbook/202104/1375715.shtml现在开控制台不会禁止成就解锁了。\n解锁boss流程怎么丢物品某些特殊地形怎么走\n某些道具和饰品的搭配一些跑图的流程怎么最大化贪婪模式技巧","categories":["游戏"],"tags":["游戏"]},{"title":"书籍读后感","url":"/2024/12/03/%E4%B9%A6%E7%B1%8D%E8%AF%BB%E5%90%8E%E6%84%9F/","content":"共产党宣言娱乐至死我们时代的神经症人格二次成长"},{"title":"分布式相关知识入门学习(待续)","url":"/2022/11/15/%E5%88%86%E5%B8%83%E5%BC%8F%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/","content":"\n本文是我在结合MIT6.824课程和网上诸多博客、课程的内容进行的总结参考博客太多，就不写引用了\n\n几个概念\n集群(部署方式)：在多台不同的服务器中部署相同应用或服务模块，构成一个集群，通过负载均衡器对外提供服务。负载均衡可以分摊运行压力\n\n分布式(部署方式)：拆分一个大系统，将拆分出的多个子系统部署在不同服务器，各系统可通过网络通信进行协作  常见的拆分方式：\n\n水平拆分：将项目按层次拆分，如拆分为数据层、业务层、界面层等\n垂直拆分：将项目按业务模块拆分，比如电商系统拆分为订单模块、用户模块、秒杀模块并分开部署\n\n  关于微服务与集群的结合：\n\n分布式的每一个划分出来的业务模块都可以做集群，而因为分布式的特点，偏底层服务模块的垮掉会影响上层服务模块，所以为了保证系统的可用性会结合分布式与集群，先分布式再微服务(注意分布式中每一个结点都可以建立集群，但集群不一定是分布式)\n\n\nSOA(面向服务的架构)(架构设计方式)  相对于面向对象、层次结构这些设计方式，SOA将系统看做由多个服务组成，服务相互依赖、调用、协作最终提供功能\n\nESB  说到SOA就不能忽略ESB(企业服务总线)，他就像一个翻译官、信使等角色，将多个可能异构的服务串起来，形成一个大的系统，也是企业中集成各系统的一个常用手段。  \n\n\n微服务(架构设计方式)：是SOA的进阶，因为微服务在将系统按服务划分的同时，它的“微”表现在尽可能微小化服务，小到一个服务只对应一个单一的功能，只做一件事，做到了模块的不可再拆分，类似于“原子性”。所以微服务算是分布式的垂直拆分的进一步拆分。但是微服务不一定要将应用分散在多个服务器上，只是更加强调单一职责和独立性。\n\n主从架构这种架构把服务器分为了主机与从机，通过角色的分配进行了任务的分配，基于该架构有读写分离、双机互备之类的影响系统可靠性、可用性、性能的方案但是在实现主从机数据的同步以及主从切换上较为复杂，维护成本也相对较高\n\n\n负载均衡字面意思，把请求根据选定的算法，让下游接收到的请求是均匀分布的可以按照软硬件、实现技术等来分类软件中常见的就是Nginx和Haproxy吧\n\n负载均衡算法：\n\n静态(固定概率)：轮询(基于取模，按编号大小依次分配)、加权、随机、加权随机、源地址hash、目标地址hash、一致性hash等\n动态(根据服务器实时情况)：最小连接数、加权最小连接数、最小时延等\n\n\n在分布式系统中的负载均衡解决方案大概有以下几种：  首先项目层次为：\n\n客户端层：比如用户浏览器、APP 端\n反向代理层：技术选型 Nignx 等\nWeb 层：前后端分离场景下， Web 端可以用 NodeJS 、Vue 、React\n业务服务层：用 Java 、Go，一般互联网公司，技术方案选型就是 SC 或者 Spring Boot + Dubbo 服务化\n数据存储层：DB 选型 MySQL ，Cache 选型 Redis ，搜索引擎选型 ES 等\n\n  那么就有\n\n客户端层 -&gt; 反向代理层 的负载均衡。通过 DNS 轮询\n\n反向代理层 -&gt; Web 层 的负载均衡。通过 Nginx 的负载均衡模块\n\nWeb 层 -&gt; 业务服务层 的负载均衡。通过服务治理框架的负载均衡模块，比如Dubbo\n\n业务服务层 -&gt; 数据存储层 负载均衡。通过数据的水平分布，数据均匀了，理论上请求也会均匀。比如分库分表、通过买家ID分片等\n\n\n\n\n一致性hashhash算法在负载均衡中用的很多，因为它很简单，而且能保证同一个data能访问到同一个服务器但是它不利于弹性伸缩比如有三台服务器部署了redis，原先是使用hash(data)%3找到对应的服务器，但是突然网站被引流了，为了应付新增压力要增加服务器，那么负载均衡算法就变成了hash(data)%4，原先的数据会无法获取(比如4%3==2,4%4==0)，甚至有可能导致缓存穿透，同时为了恢复正常业务就要想办法进行数据迁移，这个迁移要利用新的负载均衡公式，计算原先的服务器现在被分配到到哪个位置，然后再进行迁移，这是一个很麻烦的事情。所以大牛想出一个法子，建立一个环，令环周长(也是取模数)为2 ^ 32，我就设mod_num&#x3D;2 ^ 32吧。首先各服务器在环上的位置是通过取ip或者其他东西的hahs值再%mod_num。对于数据的存取，在获得key=hash(data)%mod_num后，根据key在圆环上的位置，顺时针遇到第一个服务器，把这个服务器作为这个数据绑定的存取服务器。如果在下图的A-&gt;C这个圆弧插入一台服务器D，对于除了C-&gt;D的其他范围都没影响，而C-&gt;D这段的读数据请求会落到D服务器而不是原先的A服务器，但也算起到很大效果了但是对于这种情况我们需要继续采取措施，因为可能会出现下图的情况，即服务器的位置很接近，此时大部分请求都会落在A服务器上，负载均衡效果不佳对于这种情况大牛引入了虚拟节点即在环上，对于每个服务器建立了多个索引，除了落在A位置表示A服务器外，落在A1、A2……都能表示访问A服务器，这样就能解决服务器分布不均的问题\n分布式系统特性\n分布性。分布式把系统拆分了，各个部分部署在不同的服务器上，而各个部分可以通过网络通信进行协作，所以这些服务器在空间上也是可以随意分布的。\n对等性分布式系统中的各个计算机没有主从之分，组成分布式系统的所有节点都是对等的。\n并发性同一个分布式系统的多个结点可能会并发地操作一些共享的资源，如数据库、分布式缓存等\n自治性分布式系统中的各个结点都包含自己的处理机和内存，各自具有独立处理数据的功能。\n资源共享一旦授权，可以访问环境中的任何资源。\n\n分布式系统优缺点\n优点：\n\n提升服务可用性 &#x2F; 稳定性\n提升系统并发能力\n提升系统容错能力\n低延迟\n\n\n缺点：\n\n依赖网络，会因为网络问题导致系统数据丢失或不一致性；\n系统复杂化，系统监控维护，版本迭代发布变得相对复杂，成本高；\n一致性，可用性，分区容错性无法同时满足。\n\n\n\n幂等性幂等性是系统的接口对外一种承诺，保证一次和多次请求某一个资源应该具有同样的副作用。比如同一个用户因为网有点卡，一直看不到“支付成功”的提示，焦急中点了很多次“确认付款”按钮，系统应该保证只扣一次钱。声明为幂等的接口会认为外部调用失败是常态, 并且失败之后必然会有重试。常见实现方案：1、对每个请求生成唯一ID，对同一ID的多个请求只执行最先到达的2、对每个数据生成唯一ID，针对于插入有唯一标识属性的实体对象的场景，且可以利用唯一索引实现查重，比如利用订单号。3、利用数据的状态字段，比如订单的状态已经在“已支付”了，就要拒绝执行“支付”的请求。4、乐观锁，针对更新场景，比如设置一个version版本字段，初始时version为0，执行update后version改为1，接下来第二次update就会失败\n# 使用了乐观锁的sql# 注意没有使用status进行过滤，没有利用状态字段UPDATE ORDER SET status=#&#123;status&#125;,version=version+1 WHERE id=#&#123;id&#125; AND version=#&#123;version&#125;\n\n正式开始分布式具体理论和技术\nCAP理论\n\nC 一致性(Consisitency)：客户端的每次读操作，不管访问哪个结点，要么读到的都是同一份最新的数据，要么读取失败。(强调数据一致性)\nA  可用性(Availability)：系统收到请求后一定能给出响应。(强调服务可用性)\nP  分区容错性(Partition Tolerance)：当节点间通信出现任意数量的消息丢失或高延迟的时候，系统可以继续提供服务。(下图)\n\n\nCAP三选二CAP虽然都是好的特点，但实际上我们只能三选二，而且必须保证分区容错性1、首先对于“必须保证分区容错性”。“分区”就是指能相互通信的一些节点服务器所组成的一个逻辑网络。因为多节点间的通信交互就是分布式的特点，而节点间的分区故障是不能保证绝不发生的，所以只要是分布式系统就必须保证分区容错性,否则会出现整个系统不能用的情况。2、如果实现了一致性，如果节点间数据同步出现异常，基于一致性的定义，用户此时操作数据会返回操作失败，系统不满足可用性3、如果实现了可用性，那么即使节点间数据同步出现异常，基于可用性的定义，还是得返回自己这个节点还未更新的旧数据给用户，系统不满足一致性。\n但是理论上，在不存在因网络问题导致一个大分区变成多个小分区的情况下，能保证CAP同时满足。但是这个网络、服务器都是不可靠的，所以一般还是说CP或者AP，当数据一致性很影响系统或业务运行时，优先选择CP。\n总之CAP理论可以作为项目设计的指南针，我们可以从CAP三个维度出发，对项目需求进行分析，进而做出合理的选型，这对项目的设计、开发、维护、重构都是很有帮助的。\n一致性模型这是较完整的一致性模型图但是我们一般还是谈及下面这些\n\n强一致性(线性一致性)：从更新操作完成后的瞬间开始，任何后续读操作都能获得最新的值。也可以理解为在任意时刻，所有节点中的数据是一样的。开销很大而且很难实现。\n\n最终一致性在经过一段时间的同步后，所有结点中的数据才达到一致。尽管不同的进程读同一数据可能会读到不同的结果，但是最终所有的更新会被按时间顺序同步到所有节点。\n\n因果一致性要求有因果关系的操作顺序得到保证，非因果关系的操作顺序则无所谓。\n\n会话一致性在操作顺序得到保证的前提下，保证用户在同一个会话里读取数据时保证数据是最新的，如分布式系统Session一致性解决方案。\n\n单调读一致性用户读取某个数据值后，其后续操作不会读取到该数据更早版本的值。需要确保用户只能从有最新数据的节点读取数据。\n\n单调写一致性用户先写一次(w1),再写一次(w2)，在所有节点看来，都是先执行w1再执行w2\n\n读你的写一致性(read your writes)  保证用户总能马上看到自己提交的更新，但是不保证其他用户能马上看到这个更新。一个简单的方法就是对自己的数据只在主库读写，对别人的数据只在从库读写；其余的还有时间戳等方法。  借鉴了这篇博客，感觉内容挺好\n\n分布式系统中的一致性模型\n\n\n\n分布式事务ACID(酸😂)ACID实现的是强一致性，根据CAP理论会损失可用性\n两阶段提交协议(2PC)实现强一致性结点分为两个角色，协调者和参与者协调者作为中介，统筹控制相关参与者的数据一致化，并且协调者具有超时机制，而参与者没有我自己画了个流程图，内容基本覆盖了2PC的过程，但是对于协调器出故障的情况只在二阶段给出了，而且异常结束也没给解决方案。下图是别人博客里的一张好图，我就拿来用了\n\n分布式事务:XA,2PC,3PC,TCC\n\n\n第一阶段简单而言，就是协调者把事务内容分发，让各个参与者开始并锁住资源、执行事务(只剩下提交没完成)第二阶段就是对第一阶段各参与者执行事务的情况进行处理，如果没全部执行成功就全部回滚事务(原子性)，否则就全部提交事务。假如第二阶段失败，可采取的手段有：重试操作、记录日志后台定时任务补偿操作或通知人工补偿操作。\n缺点：    - 同步阻塞：在事务执行过程中，如果参与者占用了公共资源，会导致其他节点访问该公共资源的操作处于阻塞状态，降低了系统性能。    - 单点问题：若协调器出现问题会导致事务无法进行或事务一直处于阻塞。    - 数据不一致：当第二阶段是Commit请求时，如果因为局部网络异常或协调者中途崩溃导致只有部分参与者收到Commit请求，会导致收到了请求的和没收到请求的节点出现数据不一致的情况。    - 太过保守：任何一个结点的失败都会导致整个事务的失败。    - 无法解决的问题：如果协调者在发出Commit消息后宕机，而受到这条消息的参与者也宕机了，那么即使通过选举产生了新的协调者，这条事务的状态也是不确定的，没人知道事务是否已经被提交。\n三阶段提交协议(3PC)实现强一致性在2PC的基础上，给参与者也加上了超时机制，并将2PC的第一阶段分为两个阶段。第一阶段CanCommit只需要参与者查看自身情况，不需要开始事务占用资源；参与者在第三阶段接收超时则自行提交事务，因为前面两阶段已经走完，认为各个参与者都是会提交事务的，只是自己没收到DoCommit消息而已。优点：通过给参与者超时机制，减少事务阻塞时间。缺点：超时机制也导致可能出现数据不一致问题；阶段增加导致需要使用更多消息进行写上，增加系统负载和响应延迟；同时在实现上比2PC要复杂，所以在实际应用上不是很广泛。\n(下面这张图画的简略了，有空我再重新补一下)下面这张也是刚刚那个博客里的图\nTCC(Try-Confirm-Cancel)实现强一致性 实际上，2PC和3PC都是针对数据库实现的，实现的是跨库事务的一致性。\n然而，我们除了跨库操作要保持一致性之外，有些业务还要保证跨服务的一致性。TCC分为Try、Confirm、Cancel三种操作，共两个阶段Try对业务系统做检测，并冻结资源Confirm对事务做提交，默认Try成功则Confirm一定成功Cancel是当Try出错时，回滚业务，释放预留资源\n在阶段2，调用方发生宕机，或者某个服务超时了，此时需要不断重试！不管是Confirm失败了，还是Cancel失败了，都不断重试。这就要求Confirm和Cancel都必须是幂等操作。注意，这里的重试是由TCC的框架来执行的，而不是让业务方自己去做。\nTCC一般和2PC进行比较，因为他俩的过程其实差不多，但是TCC是业务层面上的分布式事务，而2PC是资源上的分布式事务。TCC的锁其实不算锁，更多的是封锁了对该字段的读或写操作(不可能一个人下订单导致其他人不能下订单吧)，保证的是最终一致性，且锁的粒度更小，更灵活，减轻了数据库的压力，系统性能更好，但是实现起来较复杂，对代码的入侵性也很强，需要开发冻结、确认、撤销三套API进行操作，建议使用开源框架。而且在需要分布式事务能力时吗，优先考虑现成的事务型数据库(比如实现了XA的MySQL)，当现有的事务型数据库不能满足业务需求时，在考虑基于TCC实现分布式事务。\nBASE理论(碱😂)Basically Available (基本可用)、Soft state (软状态)、Eventually consistent (最终一致性 )，核心是基本可用和最终一致性。软状态只是说明系统允许数据有一个过渡状态，即各节点间会有短暂的数据不一致现象。Base理论是AP的扩展，是对互联网大规模分布式系统的实践总结，强调可用性。因为这类系统对可用性的需求更大，一些数据也不需要那么强的一致性。\n基本可用基本可用可以理解为系统出现故障时允许损失部分功能的可用，保证核心功能的可用，是一种妥协。常见方案有流量削峰(如果能控制数据，就可以做到比如错开几场秒杀活动的时间；如果不能控制数据，就将数据保存到队列)、延迟响应(请求都缓存进队列，减缓请求到业务层的速度，这也导致了响应时间的拉长)、体验降级(展示时使用缩略图等)、过载保护(存放请求的队列满了就拒绝请求进入)等等\n最终一致最终一致就是数据不会马上同步到所有节点，需要经过一段延迟才会达到数据一致的状态。举个例子，像今年情人节在QQ上零点发说说时，只能看到自己的说说，看不到别人的，但是上午就能看到其他人的说说了，这种措施影响不大，反正最后别人能看到你零点发了秀恩爱消息并且给你点赞就行了，但是提高了系统的可用性。几乎所有的互联网系统采用的都是最终一致性。但是在数据敏感的业务上还是需要考虑事务和强一致性，比如支付系统和金融系统。\n实现最终一致性的常用方式\n读时修复：写数据时不关注是否成功，只是在客户端想读数据时，先在多个节点间获取多个该数据，再根据一定的规则决定要返回的值，可以再以这个值修复刚才不是这个值的节点。(性能不好)\n写时修复：多个节点进行写入时，哪个节点写失败了，就在那个节点上把原本要写的数据缓存起来，系统不断通过重试进行修复。(不需要比较数据一致性，因为存在重试机制，默认其他节点都写入成功了，所以性能损耗比较低)\n异步修复：定时对账检测副本数据的一致性，不一致则修复。(性能不好)\n\n一些实现最终一致性的具体方式(不全)基于消息实现最终一致性 事务消息方案：RocketMQ 本地消息方案：首先消息队列如Kafka等，是用来实现跨服务通信的。 然后消息发送方(服务A，设为余额服务)的数据库需新增一张消息表，消息接收方(服务B，设为库存服务)的数据库需新增一张判重表(保证幂等性，因为是允许超时重试发消息这个操作的，会导致重复消息)。此时支付开始，余额服务把修改余额记录和插入新消息记录放在同一个事务里，保证原子性；接着后台异步任务将消息表的新记录发给MQ；服务B作为消费者拉取得到消息，用这个消息里先在判重表内查重，重复则不执行，否则插入该消息并修改对应库存记录(注意判重、插入、修改也是在同一事务内的)，执行完返回ACK给MQ，如果超时没发回ACK，MQ会再次推送，防止服务B宕机重启导致消息丢失的问题。\n基于补偿实现最终一致性 saga模式(TODO)\n分布式协议和算法拜占庭将军问题TODO\nPaxosTODO\nRaft(只说明不增删节点的情况，因为还没学那么深)参考了的文章\n\nraft算法详解极客时间 分布式协议与算法实战MIT6.824 国人翻译课件Raft协议详解Raft梳理\n\n\n推荐两个网站Raft动画讲解可交互的Raft\n\nRaft是工程上使用较为广泛的强一致性、去中心化、高可用的分布式协议。遵从此协议的分布式集群会对某个事情达成一致的看法，即使是在部分节点故障、网络延时、网络分割的情况下。\n角色定义Raft算法中定义了三种角色，即\n\nleader(领导者):负责与客户端的通信，接收到客户端的命令后将其转发给follower，管理日志复制，不断发送心跳给follower。\nfollower(追随者)：执行leader传来的命令\ncandidate(候选者)：是一个中间状态，当follower长时间没收到 leader的消息就会成为candidate，开始一次选举，抢夺成为leader的资格，抢夺成功的candidate成为leader，抢夺失败的重新变成follower\n\n选举Raft作为一个“一切以领导者为准”的算法，领导者的选举是一件大事。同一时间领导者只能存在一个是必须实现的机制。下面我由浅到深的举例子，尽量说清楚要做出哪些努力。\n初始情况此时服务器集群刚刚启动，所有结点都是follower，任期号全是0。我们先要推选出一名leader。首先提出一个机制：当超时时间结束时，follower会变为candidate，并将自己的任期+1，并开始使用自己的选票数属性，先给自己投一票，然后发请求给其他节点，邀请他们为自己投一票；受到邀请的节点重置自己的超时时间，然后因为发来的任期是1，比自己的任期0要大，所以更新自己的任期为1，并给A投出一票(返回一个投票消息给A)。\n如下图，节点A最先超时，那么节点A在150ms后变为candidate，任期编号+1后变为1，邀请其他节点为自己投票。此时还未超时的节点B和C收到了来自A的投票邀请，更新自己的任期为1，重置自己的超时时间，给A投出一票，同时。在选举超时时间为0之前(选举也是有超时时间的)，因为选票数&gt;节点数的一半(每个节点都会记录总节点数的)，所以节点A会成为领导者。先别急着看leader上任后的操作，先想想如果节点A和节点B的超时时间相同，它们同时超时并发起选举，会发生什么事？我再告诉你选举中的一个机制：candidate邀请其他节点投票时，会把自己+1后的那个任期编号发过去，其他节点收到这个任期编号时，如果这个任期比自己的任期要大，说明自己应该推举他，同时更新自己的任期编号为这个投票邀请的任期；如果其他节点在投票邀请发来之前变成了candidate，他的任期+1了，那等到投票邀请发来，发现和自己任期一样，那肯定不给竞争对手投票，所以不投；如果某个follower已经给某个candidate投票了，那么它任期也更新了，其他的相同任期的投票邀请过来就直接拒绝掉了，不会重复投票。**(总结就是如果发来的消息的任期比自己的大，就更新自己的任期；而且其实如果发来的消息的任期比自己任期要小的话，会直接拒绝这个消息)** 很明显这个机制对于上面那张图的节点个数情况，如果我还假设A、B同时超时，即两个candidate、一个follower的情况，是能防止出现票数相同的情况的，因为如果A和B同时超时，C也只能投给A或B，不能都投。所以我再给个例子，如下图。对于这种偶数个节点，是完全可能出现选票相同的情况的。对于这种情况，Raft是会进行重新选举的。但应该有更明智的方案去减少这种情况的发生，而不是每次都进行重新选举这种降低可用性的兜底策略。所以对于每个节点的超时时间，在Raft中是随机生成的，这种方法很大程度上减少了多个candidate同时超时的情况。那么先超时的就能当上follower了。即使运气不好随机到多个结点同时超时，那我就重新选举嘛。好了，选举还未超时，节点A发现自己票数比总节点数的一半还大，于是自封为“leader”，但还得告知其他节点，不然他们又要开始选举了。所以节点A周期性发送心跳，告诉结点B和C“节点A是领导者，任期是1”。节点B和C收到心跳，重置自己的超时时间，继续作为follower。领导者开始接收客户端发来的命令，并在心跳消息中将新的日志(后面再讲)连带发给follower。\n异常情况(暂不考虑日志) - follower宕机follower作为一个被动的角色，他的宕机不会对集群的运作有太大的影响。但是当他重启恢复后，他要跟上集群的步伐啊，别人都任期是5了，他还在2，那真是”不知有汉，无论魏晋”了。所以不论发来的是leader的心跳还是candidate的投票邀请，他都会用请求里附带的任期更新自己的任期。(其实和前面讲的更新任期的策略是一致的)\n异常情况(暂不考虑日志) - leader或candidate宕机leader挂了，其他节点重新选举新leader呗；candidate挂了不用重新选举。不过当它恢复过来后，收到发来的消息后发现自己任期居然比其他人还低，那它就乖乖变成follower了，并用发来的消息更新自己的任期。\n异常情况(暂不考虑日志) - follower&#x2F;candidate一直收不到leader的 心跳该follower因为网络故障等问题一直接收不到心跳，这种情况follower先转化为candidate，然后，如果不进行特殊处理，它会一直增加自己的任期，当网络恢复后，这个candidate可能比leader的任期还大，直接把一个正常的leader逼回follower，这会影响集群的稳定性。所以在工程实现上会在candidate请求其他节点投票之前，增加一个preVote预投票阶段，在这个阶段，candidate不增加自身term，只广播投票请求，只有拿到多数投票才进入正式请求投票阶段\n日志日志复制操作的时序我这里给个场景，假设设这个Raft的上层是一个KV数据库，此时外部应用程序访问数据库应用程序  要PUT1、leader接收该PUT操作2、leader发送一个添加日志(AppendEntries)的RPC给其他follower，然后写入一个状态为uncommited的PUT操作的日志，等待follower们的响应3、follower收到日志后，也在本地写入一个uncommited的该日志，返回给leader响应。4、leader收到过半节点的正确响应后，会执行这个请求，即提交给应用程序，让数据库真正执行PUT操作，并且将得到的结果返回给客户端，同时把这个日志改为commited。然后因为follower还要知道leader已经commit了，自己才能commit，所以leader还要再下次心跳中附加一个信息，通知follower们从这个日志里取出操作让他们的上层数据库执行，把他们的这条日志状态改为commit。\n日志的作用从日志复制操作可以发现，首先日志是不断append的，所以日志表示了leader选择的顺序。同时，因为节点收到日志和实际执行操作是有时间差的，日志相当于这个操作的临时载体。而且，如果leader发送给follower的操作因为网络原因在中途丢失，leader可以重传这个日志。还有，它可以帮助重启的服务器恢复状态，即作为持久化的手段。\n实现日志一致TODO\n其他的异常情况leader性能远超follower(选自MIT6.824)follower在执行leader传来的操作前会确认并将操作堆积在日志中，如果一直这么下去，follower的执行将无限落后于日志的堆积，最后耗尽内存。Raft没有处理这种情况。所以在实际系统中需要额外增加一种消息，即由follower发给leader，告知它follower们执行到哪一步了，并以此控制leader的速度不至于太快。\n脑裂为什么我在那个大标题“Raft”上要加个”只说明不删减节点”，因为网上流传的知识，大部分都不涉及这部分知识，6.824课程对这块也只是提到“Raft的作者提出了方法来处理这种场景，但是比较复杂。”而且都说了是分布式协议这种理论知识了，实践什么的看后续的改进吧。（有点问题，先别看）那么说脑裂这个事。什么是脑裂？举例子，一个集群ABC，客户端发“SET a&#x3D;1234”的请求给A，A就同步给集群其他人，之后客户端们不管读集群里谁的数据，都能获得”a&#x3D;1234”。但是如果A和BC断开通信了，那么A一个分区，BC一个分区，客户端先对A说”SET a&#x3D;1234”，A无法将该写请求同步到BC上；这时又来一个客户端对B说”SET a&#x3D;5678”，这个写请求也只能同步到C上，到不了A那。那么这个集群里就出现了数据不一致现象了。对于此，如果Raft不采用动态扩容的话，因为“投票必须过半”这个机制，我们可以事先只部署奇数个节点，那么总有一方节点数少于一半，一方节点数多于一半。如果原先的leader处于多于一半的那方，客户端继续与这个leader通信，而少于一半的那方不与leader通信，相当于不与客户端通信，对外界而言此时的集群只有leader这边的分区，数据一致性继续保持；如果原先的leader不在多于一半的那方，那么 \n一些杂的话有些知识点找学长问了下，确实为了保持内容贴合Raft的理论知识，我加了很多限制条件，但实际分布式项目中哪来这么多限制条件，总要在理论上进行改造、扩展甚至违背理论，就比如反范式这种。所以理论可以了解，但是不能奉为教条。\nGossipTODO\nZabTODO\n分布式缓存TODO\n分布式数据库TODO\n分布式计算TODO\n分布式文件系统TODO\n"},{"title":"公众号计划","url":"/2025/01/13/%E5%85%AC%E4%BC%97%E5%8F%B7%E8%AE%A1%E5%88%92/","content":"\n\n  6edf3bd72f4d04bda0c1eace78efc8e891fcbd15b5840afb6712b748091669bf3a88ca6adfbf690fba8b1ce7d849630b89da934e2167338f38e3a511247f229d372f5b8875ceaac898301e4c43b6495c8bc0d1f4fa977d2f6692b7277468ff1bc048dd952899085202f6af8e49f8b313bac6c637db6a62efbe275bdabb79e88f0297bc00cbbf8f0d55eeca6eaef5a0604123e3291d0919fc16faea150c301f1489c2916916a645162b01bed4aa9503ad5118ea8b90cecfce6d104ef2d50b0f130452144d245e285d0f3bc9afcb4fa1716159ba5000859c386b22ba278a12bab1d94bdffdc85e994a75da56e30f027d3ed83abfdfa1856477930a0078feb2a80029b1b7db8e970d9f8b8d132040d73e84e386c090646d5532e0f14c4a03ea5031de4b0e2b556ae70c686c024bf135970a3f60795e350f7685b766d91d2af74b20b8ccebced1b76c61f85b2fdd97d4d0832ef13a6537f2796a6ed77ee83d82035979556fff775e8156afa6a4cd707b5ccf26996643fb5cff59eee64779c032dc686044cafa421c50b4daf4b9c8ffb28f0860f6279bb22edced048b66be8f6e454bd26a08a7efef875559f1b967f75f6398f0b9aa095dd964ec970d97f0cdb57e899bcc64486da57bb31f9b4c6d784117e6f8fd25e31159371da75d1648e9e5720fec4f7983376f5bcea9974829bd2665baca9a60d5e59b992006f204dfdc0bf4d59e74ef4d475cc2cf623dbc55b30d6702e24ee1405bcd485e62f49307ed94c926cb2b5e479f1025c08b3ad8105ca1e60e1d03466c71480c98b54e04bbb7c5531aa3e8f9da41d81884382fc6a2cd9acea4db11e2b9f0484fcb4d9696f0d7e0ef4ba26db3a6f206a393b234dc00f21e7670370bb8193cfe2b416a116945ce8a4f91d53e80898d30f2e0cddf90bd1bbac0d82a97fa7e86550bcbd47d643e7135f9c9fb32bac4cb51888715e32f293744d976762f220eea8d55b1c3f931c907c36fde7578505aa552286f0a052450b3e304b9e2ce39cc7de52d8baf1184b9d19bbe36629a04136d5726baf1c00906e5b7a5dc73ed1ea2de224fe216863effaf5bf175022df947204b21740f9b34dfcf56d302187d2204ae4cc3ad6b9df4217f9fb220b70ff047fb599c2aa76d447438f79de7ae743354bb3938e0c58e2980b19102ce5efced22c3b2c34a91889e2858ee51cc698a11750f3eeda326a5556306c94c490c8e568345c1cf5686980ce12ace5e3a00d4898a013ec7cafee7111d1e246b141c85ab404b33985aa483b560528d2aed85b08c9aa1e1cf6b98c12827826b243b4441bddd0ca203367fe66b5f86e5fd5445c27292f8405dfd015ef6b3417d3446694aa8abebbb55a9301cb5f521112f89\n  \n    \n      \n      \n        Hey, password is required here.\n      \n    \n  \n\n\n\nimport {initHBE} from \"/js/plugins/hbe.js\";\n  console.log(\"hexo-blog-encrypt: loaded.\");\n    initHBE();\n\n"},{"title":"华山一日游","url":"/2025/01/10/%E5%8D%8E%E5%B1%B1%E4%B8%80%E6%97%A5%E6%B8%B8/","content":"接下来的几年就离开西安去广研院了，趁着还能留几天，把著名的华山爬了。\n9号考完最后一门，在这之前已经在小红书查完攻略，麻溜地把票买了。虽然研究生不享受学生票优惠，但是淡季门票也可以省一点钱，325元的西上北下套餐，还行。由于冬天夜爬太折磨人了，所以我还是选择白天爬山。至于结伴出行？我不想把脑子用于为旅行同伴着想，因此还是一如既往的独行。\n除了门票，自然还要准备爬山所需。一个是保暖，虽然小红书上一些女生说穿的冲锋衣、羽绒服，但我上身穿了一个羽绒马甲、卫衣和薄外套，下身穿了休闲长裤和两条秋裤，感觉还挺好(不过我体质也比较好就是了)。不过口罩和手套是必须带的，山上有几块地方风特别特别大，脸和耳朵刮的生疼，戴口罩挡脸，帽子我是用的外套或者卫衣上的，所以没专门带。手套肯定必须要带，很多地方要抓锁链不然不安全，而锁链又冰凉，抓久了手都冻僵了。\n然后是吃的，山上的水都是10块以上，更别说热食了。由于我一个人爬，比较随意，带了3根士力架和2根火腿肠，然后两瓶小怡宝，装在我的斜挎包里刚刚好。\n从太白南路地铁站出发，到西安北也要50分钟。在要坐1个多小时、10多块钱的绿皮和半个小时、50多块钱的高铁，我选择坐高铁，可以多睡半个小时，到达时间还差不多。\n6点半从宿舍的床上起来，匆忙洗漱，把东西都拿好，已经6点45了，需要赶8点20的高铁，还挺急的，提前买的泡面都没在宿舍吃，赶紧骑单车去地铁站。结果骑到一半发现太冷了，在市区都这么冷，何况山上？又回头去多穿了条秋裤(这就是为啥我穿了两条秋裤😂)。\n到高铁站已经是8点了，我寻思如果换另一趟8点半的(没提前买，因为肯定有票)，还能吃上口泡面，于是买了个7块钱的老坛酸菜(真贵)，刚泡好，解个手，回来就看见8点半这个开始检票了😅比预想的检票还早了5分钟，只好拿起泡面检票上车，哈哈哈。不过一上车，五六口就解决了，亏我还拿了一路。\n到达华阴北站，本来想找所谓的“免费公交”，不过这地方又冷又肉眼可见的贫瘠，不知道什么时候等的到，在路边上了个3块钱的私人小巴士，倒也还行。从华山北到游客中心是一条主干道，不用拐来拐去，倒也还行。\n\n到达游客中心之后，便是进去检票、坐摆渡车上山。摆渡车在一些正在开发的烂路上走，十分颠簸，但由于起太早了，我好几次眼一闭就睡着了，甚至开始做梦了，不过也会立马惊醒，想到这是难得的旅游经历，不能被睡觉耽误了。大概3、40分钟之后到达山脚下，便可以开始爬山了。哦我是西上北下，所以坐的是去西峰的摆渡车。\n剩下的就是爬山了，往几个峰顶爬，拍个照留个纪念，如果累了饿了就来口士力架或者火腿，倒也舒坦。哦可惜我的手套不翼而飞了，可能在收起来的时候没放好，掉地上然后被风吹跑了，我在嫌疑最大的地方来回找了几遍都没找到，不过还好丢的是右手手套，是我的惯用手，不妨碍我抓铁链啥的。然后就是在一些类似观景台的无遮挡或者凸出的位置拍照，不得不说不愧是淡季，虽然有雪但不是很多，没有那种深厚雪白的感觉；也不像秋天有漫山红叶，更没有春夏的郁郁葱葱，总得来说就是山景很干。\n最印象深刻的还是鹞子翻身。一路有铁索，我们需要把身上的挂钩挂在铁索上以防掉落。走的路都是垂直于山崖的，但是有一些槽能放一只或两只前脚掌，如果从上往下爬，看不到下一个放脚的槽，脚在空中摸索，光靠另一个脚掌支撑，还挺吓人的。所以工作人员也跟我们强调了两个挂钩同时只能解一个，不能两个都解。而且由于我手套丢了一只，干脆不带手套下去。结果摸铁索摸得我手冻得没知觉了，而且手背经常和山壁摩擦，好几条白印子。然后就是鹞子翻身只有一条上下的路，但允许在有人没回来之前就下人，所以我和几个人在返回中途，由于有人要下来，被迫等了30多分钟才开始上去，我还没戴手套，太折磨了。上去就比较舒服了，看得到下一步踩哪，来回大概50分钟，还是比较舒服的，不过时间和长空栈道冲突了，但我也没预约(鹞子翻身也没预约，但人少所以直接让下了)，所以就没去了(还好没去，不然赶不上下山索道了)。有一说一这三十块钱还是挺值的。\n由于北下，一直在下楼梯，楼梯还是细的那种，放脚要外八字才堪堪，很多地方我都是摸着锁链或者珠子才下来。那个柱子手感还不错，感觉是故意设计的，刚好让手包住且没有硌手的感觉。一路下来感觉膝盖都受伤而不是单纯的磨损了。最后到游客中心的广场，才想起来有人接，没人送，只有10块钱的出租车司机。上车之后还是走这条直道回西安北站，这时才在车上观察附近，感觉挺破落的，不过可能也因为这边比较偏。\n最后坐了个7点多发车的高铁回西安，在小寨找了个韩式石锅拌饭，贼难吃。从小寨一路骑车回宿舍，在一阵阵哀嚎中洗澡、洗衣、晾衣、上床，算是一日游结束了。晚上的打卡步数有3w多，也挺惊喜的。\n\n第二天起来，下半身没有不痛的地方，还骑车出去吃午饭。哈哈，年轻就是好！\n附上一些图。\n\n","tags":["旅游记录"]},{"title":"学习资料记录","url":"/2023/01/01/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99%E8%AE%B0%E5%BD%95/","content":"\n我们在学习Spark的时候，到底在学习什么？\n\n【Linux进程间通信】二、pipe管道\n\n\n-linux系统(进程间通信)06_IPC概念,pipe管道，fifo通信，mmap 共享映射区\n"},{"title":"可白嫖的serverless服务","url":"/2025/02/08/%E5%8F%AF%E7%99%BD%E5%AB%96%E7%9A%84serverless%E6%9C%8D%E5%8A%A1/","content":"关系型数据库NoSQL数据库代码托管对象存储KV服务评论区LLM","categories":["工具"]},{"title":"学在西电录播课使用python下载，通过解析m3u8协议、多线程下载ts视频块以及ffmpeg合并","url":"/2024/12/05/%E5%AD%A6%E5%9C%A8%E8%A5%BF%E7%94%B5%E5%BD%95%E6%92%AD%E8%AF%BE%E4%BD%BF%E7%94%A8python%E4%B8%8B%E8%BD%BD%EF%BC%8C%E9%80%9A%E8%BF%87%E8%A7%A3%E6%9E%90m3u8%E5%8D%8F%E8%AE%AE%E3%80%81%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8B%E8%BD%BDts%E8%A7%86%E9%A2%91%E5%9D%97%E4%BB%A5%E5%8F%8Affmpeg%E5%90%88%E5%B9%B6/","content":"\n本文涵盖的内容仅供个人学习使用，如果侵犯学校权利，麻烦联系我删除。\n\n初衷研究生必修选逃， 期末复习怕漏过重点题目，但是看学在西电的录播回放课一卡一卡的，于是想在空余时间一个个下载下来，然后到时候就突击复习。 \n环境因为懒得用二进制安装ffmpeg，所以用的Ubuntu22.04\nsudo apt install ffmpegffmpeg -version# 要有python3，安装步骤略过...# pip依赖pip install aiohttppip install tqdmpip install m3u8\n预备知识关于网站部分，本文写于2024-12-05，不保证后面会不会改\n学在西电就是在学习通上再加了一层，加了点新东西。录播在这个地方看。(本文默认已经登录成功)下面的图就是录播播放界面，由于有学生姓名和学号的水印，我打码了。左边是拍老师和黑板的录像，右边是展示ppt的录像。为了捕获请求，我们先打开开发者面板的网络面板，点击下面的某堂课跳转，然后在页面刷新后获取到加载时的请求，通过关键词过滤m3u8，得到重要的三个请求。注意这里有两个playback.m3u8，通过上面图中那个另外的请求playVideo?info=...的响应，我们可以看到pptVideo和teacherTrack这两个路径，分别对应ppt和老师黑板的m3u8文件的url。\n&#123;    &quot;type&quot;: &quot;2&quot;,    &quot;videoPath&quot;: &#123;        &quot;pptVideo&quot;: &quot;....m3u8&quot;,        &quot;teacherTrack&quot;: &quot;....m3u8&quot;,        &quot;studentFull&quot;: &quot;....m3u8&quot;    &#125;,    &quot;liveId&quot;: ...,    &quot;isshowpl&quot;: 0&#125;\n在学在西电里，视频文件是被切分为许多个几秒的视频块(ts文件，是Transport Stream不是Typescript)，通过一个m3u8协议文件保存对应视频的各个小视频块的文件名、序列号、持续时间等信息。m3u8文件内容如下，还好学在西电这里没有做加密，没有#EXT-X-KEY:METHOD=AES-128,URI...这么一行，所以我们可以用这些ts文件名直接下载(当然前面还要有http之类的前缀)。最后，使用伟大牛逼的 ffmpeg 可以将这些ts文件合并为 mp4 文件。\n具体代码1. 下载各ts基于m3u8库解析m3u8文件，aiohttp做协程下载，tqdm做进度条方便查看，最后记得threading加锁。考虑到偶尔的下载异常，加了个2次重试。url按照下图获取\n实测5分钟左右下完。\nimport shutilimport threadingimport m3u8import osimport loggingimport reimport asyncioimport aiohttpfrom tqdm import tqdmpbar:tqdm = Nonepbar_lock = threading.Lock()async def download_segment(session, ts_url, true_url, output_dir, cnt):    global pbar    filename = os.path.join(output_dir, true_url)    try:    \t# 实际在这里下载        async with session.get(ts_url) as resp:            resp.raise_for_status()            with open(filename, &#x27;wb&#x27;) as f:                async for chunk in resp.content.iter_chunked(1024):                    if chunk:                        f.write(chunk)            logging.info(f&quot;下载完成: &#123;true_url&#125;&quot;)            with pbar_lock:                pbar.update(1)    except Exception as e:        logging.error(f&quot;第&#123;cnt&#125;次下载失败: &#123;true_url&#125;, 错误信息: &#123;e&#125;&quot;)        # 3次重试机会        if cnt == 3:            logging.error(f&quot;重试次数达到上限，跳过下载: &#123;true_url&#125;&quot;)            # 把需要手动下的单独保存            with open(f&#x27;&#123;output_dir&#125;.err&#x27;, &#x27;a&#x27;, encoding=&#x27;utf-8&#x27;) as file:                file.write(ts_url + &#x27;\\n&#x27;)            # 并且这个下了一半的ts文件需要删掉，防止弄混            if os.path.exists(filename):                os.remove(filename)            with pbar_lock:                pbar.update(1)        else:        \t# 重试一下，且计数器+1            await download_segment(session, ts_url, true_url, output_dir, cnt+1)async def download_m3u8(m3u8_url, output_dir):    global pbar    # 日志    logging_file = f&#x27;&#123;output_dir&#125;-download.log&#x27;    err_file = f&#x27;&#123;output_dir&#125;.err&#x27;    if os.path.exists(logging_file):        os.remove(logging_file)    if os.path.exists(err_file):        os.remove(err_file)    if os.path.exists(output_dir):        shutil.rmtree(output_dir)    logging.basicConfig(filename=logging_file, level=logging.INFO, format=&#x27;%(asctime)s - %(levelname)s - %(message)s&#x27;)    # 创建输出目录    os.mkdir(output_dir)    # 下载并解析 m3u8 文件    logging.info(f&quot;开始解析 m3u8 文件: &#123;m3u8_url&#125;&quot;)    m3u8_obj = m3u8.load(m3u8_url)    # 提取 base URL    base_url = re.split(r&quot;[a-zA-Z0-9-_\\.]+\\.m3u8&quot;, m3u8_url)[0]    logging.info(f&quot;提取到的base URL: &#123;base_url&#125;&quot;)     # 创建 aiohttp session    async with aiohttp.ClientSession() as session:        # 异步下载所有 ts 片段        tasks = []        pbar = tqdm(total=len(m3u8_obj.segments))        logging.info(f&quot;segment 个数: &#123;len(m3u8_obj.segments)&#125;&quot;)        for _, segment in enumerate(m3u8_obj.segments):        \t# 真正ts的下载url是要拼起来的            ts_url = base_url + segment.uri            task = asyncio.create_task(download_segment(session, ts_url, segment.uri, output_dir, 1))            tasks.append(task)        await asyncio.gather(*tasks)    # 任务完成后关闭进度条    pbar.close()    logging.info(f&quot;下载完成&quot;)    m3u8_url = &quot;http://.../playback.m3u8&quot;output_dir = &quot;4-2-1-ppt&quot;asyncio.run(download_m3u8(m3u8_url, output_dir))\n执行后会生成一个download.log，不过这个文件没啥用。主要还是ts文件夹，上述例子就会产生一个名为4-2-1-ppt的文件夹。\n2. 合并为mp4基于命令: ffmpeg -f concat -safe 0 -i ts_list.txt -c copy video.mp4。注意这个-i，如果只有少量文件，可以-i &quot;concat:1.ts|2.ts|3.ts|4.ts|.5.ts|&quot; ，但对于我们这种，就只能让他读取一个文件名列表文件，注意这个文件每行都是file+文件路径。我代码里首先获取了ts文件夹里的所有ts文件名，但是因为多线程所以乱序，要先排个序才能让ffmpeg按顺序拼接。\n实测1分钟左右合并完成。\n如果看不懂代码，可以逐步运行查看效果。\nimport osdef main(dir_name):    filename = f&#x27;&#123;dir_name&#125;_ts_list.txt&#x27;    if os.path.exists(filename):\t    os.remove(filename)    f = open(filename, &#x27;a&#x27;, encoding=&#x27;utf-8&#x27;)    names = []    with os.scandir(dir_name) as entries:\t    for entry in entries:\t\t    # 检查是否为文件\t\t    if entry.is_file():\t\t\t    names.append(entry.name)    # 注意要先排序，按顺序写入文件名    names.sort(key=lambda x: int(x.split(&#x27;_&#x27;)[0]))    for name in names:\t    f.write(f&quot;file  &#123;os.path.join(dir_name,name)&#125;\\n&quot;)\t        f.close()    mp4_name = f&quot;&#123;dir_name&#125;.mp4&quot;    if os.path.exists(mp4_name):\t    os.remove(mp4_name)    cmd = rf&#x27;ffmpeg -f concat -safe 0 -i ./&#123;filename&#125; -c copy &#123;mp4_name&#125;&#x27;    os.system(cmd)main(&quot;./4-2-1-ppt&quot;)\n\n其他：处理少数下载失败的ts其实就是比较m3u8里的所有ts文件名和本地已下载成功的ts文件，看哪些还没写，保存到&#123;output_dir&#125;-url.txt下，通过点击链接手动下载并保存到ts文件夹中。\n注意由于下载链接已经包含鉴权信息，所以这个链接给谁都可以直接用，无需特定的会话。\nimport m3u8import osimport redef record(url,output_dir):    with open(f&#x27;&#123;output_dir&#125;-url.txt&#x27;, &#x27;a&#x27;, encoding=&#x27;utf-8&#x27;) as file:        file.write(url + &#x27;\\n&#x27;)def find_err(m3u8_url, output_dir):    m3u8_obj = m3u8.load(m3u8_url)    # 提取 base URL    base_url = re.split(r&quot;[a-zA-Z0-9-_\\.]+\\.m3u8&quot;, m3u8_url)[0]    # 已下载的    done = set()    with os.scandir(output_dir) as entries:        for entry in entries:            if entry.is_file():                done.add(entry.name)    all = set()    for _, segment in enumerate(m3u8_obj.segments):        all.add(segment.uri)    not_done = all - done    tmp = list(not_done)    tmp.sort()    for i in tmp:        record(base_url+i,output_dir)    m3u8_url = &quot;http://.../playback.m3u8&quot;output_dir = &quot;4-2-1-ppt&quot;find_err(m3u8_url, output_dir)\n\n\n其他\n其实也可以直接用ffmpeg一次完成: ffmpeg -i http://.../playback.m3u8 -c copy 2-4-1.mp4，只是似乎是串行依次下载ts，速度不快。\n我也有搜到用IDM下载或者potplayer播放，学长&#x2F;弟&#x2F;姐&#x2F;妹可以自行尝试。\n学在西电课程回放稳定播放方法\n手把手教你用IDM下载学在西电课程回放视频\n\n\n关于ppt视频的忽略音频流，ffmpeg可以设置参数，我没看这个\n关于字幕生成，免费方案是B站必剪支持15分钟内视频的字幕生成，可以在必剪里裁剪和生成，但是有点麻烦而且效果很差。其他方案请自行研究。\n似乎也有直接可用的m3u8播放器，请自行研究。如 nilaoda&#x2F;N_m3u8DL-CLI。\n\n"},{"title":"人生计划与习惯培养","url":"/2024/10/09/%E5%9F%B9%E5%85%BB%E5%A5%BD%E4%B9%A0%E6%83%AF/","content":"\n\n  59caac7809943a14ad708e50cc02dd4d40c6d05a8dc08382b7dad3f29d2c75514ce92f970f577220087672570b49571b\n  \n    \n      \n      \n        Hey, password is required here.\n      \n    \n  \n\n\n\nimport {initHBE} from \"/js/plugins/hbe.js\";\n  console.log(\"hexo-blog-encrypt: loaded.\");\n    initHBE();\n\n"},{"title":"录视频计划","url":"/2025/01/20/%E5%BD%95%E8%A7%86%E9%A2%91%E8%AE%A1%E5%88%92/","content":"\n\n  4ad784c72ab9bfe30baca69b2ac5e898c4a89f4360991d13b98735647e6e3f2f75a18bcfb4ac0eee170841b87d8a5d19025a107e8527275083c21a1e098d682c9aa65fdc74b6a56662a8f8261b3fd5bd2e22056c8db116f9dba23b7222b30683\n  \n    \n      \n      \n        Hey, password is required here.\n      \n    \n  \n\n\n\nimport {initHBE} from \"/js/plugins/hbe.js\";\n  console.log(\"hexo-blog-encrypt: loaded.\");\n    initHBE();\n\n"},{"title":"哥哥带我游玩广州","url":"/2025/03/12/%E5%93%A5%E5%93%A5%E5%B8%A6%E6%88%91%E6%B8%B8%E7%8E%A9%E5%B9%BF%E5%B7%9E/","content":"来广研也快一个月了，只去过一次市里，还是为了和孤身在广州的舅舅见个面吃一顿晚饭。本来还苦于科研没有进展，哥哥突然问我有没有空陪他在广州玩，在亲情+玩心&gt;对科研的热情后，很快就同意了。\n可惜研一下学期还有课，周三晚上的课找人代上了，周四早上两节课，其中一节还是体育课，只能回学校了。于是哥哥也安排了3月10日～12日三天的游玩，他周一早上从长沙出发，中午12点到。我则从黄浦区出发，也要两个小时才到民宿。\n第一天我大概八点出发，一路上坐地铁，看游玩攻略，也是十点才到民宿附近的长寿路地铁站。在哥哥来之前逛了逛，如果说西安话我大概还能听懂，那一路上的粤语我是真听不懂一点，长寿路还都是老年人，听不到几句普通话，不过还挺有意思的。在小红书上大概看了下，主要是白切鸡、鱼皮、冰室、烧腊这些。正好长寿路这就有被推荐的文记一心鸡和陈添记鱼皮。但关于鱼皮又看到说什么女儿继承家业味道变了之类的，可能味道还是可以但由于长寿路这块老广比较嘴刁导致一些差评，对我还是有一些影响的，所以只买了一心鸡，一斤60块，给我的是69，也不便宜了，小红书上也说都是70块左右。\n哥哥来了，本来我对这家民宿就有点膈应，环境不太好，还很隐蔽，仅仅是离地铁站不到100米。但哥哥来后，为了问房号需要联系店主，居然打不通电话。所以直接退房走人了。多加了几十块钱去了也没多远的另一家酒店，环境倒是好了不少。哥哥和前台小姐姐的博弈还挺有意思的，本来前台挂的牌子是230一晚上，哥哥拿出携程的203给前台看，最后砍到200块双人床每晚了。哥哥说也不是贪这几块钱，主要是不能被宰。而且他不用携程买是因为用了券下次就用不了了，这样还能省一次券，真是计划通！还是得学啊！\n简单冲洗一下便要去吃午饭了，拿着白切鸡点了煲仔饭，和一位阿婆同桌。阿婆还挺和蔼的，和我们聊我们的鸡，说自己也会做，又省钱又好吃，还跟我们讲这家店的饭菜她觉得不错之类的。至于白切鸡，一些咸味，因为是冰凉的，吃起来很爽口，皮也是blingbling的果冻感觉，肉也算紧实。yysy不是太重口味，但我也觉得可以。\n吃完便带我逛。哥哥说他上次来广州也是小学的时候了，这边也算是有他的一些回忆吧。首先就到了沙面岛。这里挺多旧址，都是一些领事馆、教堂之类性质的外国人的建筑，所以结构和配色会很特别，所以很出片，一堆人拍照打卡。也给了我一些视觉的享受吧，能在国内线下看到这些异域风情的建筑。\n之后继续走，到北京路看了看，其实也就是特别热闹的商业街。不过广州还有个名字叫”北京”的路，还让我挺意外的。路过一个普觉楼，在市区，马路边上还有这么大个中式风格的楼，还挺壮观的。\n晚上便是去珠江新城接伯伯，一起到员村吃了个湘菜的晚饭，还得是城中村的饭菜物美价廉。吃完在天河公园走了走，还是广州好，到处都有水，不像西安。而且散步的时候也听哥哥他们父子俩聊这块的变化，毕竟一个小学时候来过，一个来了广州十几年但没怎么到处玩过。还是感觉到他们透露出来的对时光飞逝和发展变革的感叹。\n回到酒店，哥哥给了我个意外惊喜：他把他闲置的macbook pro给我了，让我多熟悉熟悉，以后进入公司能早点上手。我刚把我工位上的ubuntu配好，自己还有一台还够用的拯救者y7000p，感觉不太需要新电脑了。在再三发自内心的推辞下，还是被哥哥的劝说说服了。所以就是，科研需要ubuntu，打游戏需要拯救者的win11，然后我开发就用mac。三台电脑，大概就这么规划，还是感觉有点繁琐，后面再调整吧。\n哥哥已经把mac重置了，我把我的账号登录进去，试着用了下。屏幕很好，键盘敲起来也很爽，触控板有点花里胡哨需要熟练，生产力的提高也需要对快捷键的熟练，而且比如剪切、多窗口等功能需要熟悉，command和control和option的作用要再学。还有很多如截屏、vpn、剪贴板、扩展分屏等工具要装。唉，好大的学习成本，希望真能带给我生产力的提升。\n噢还有mac没有usba口，我的鼠标是接不上了，难绷，这下只能只用触控板和快捷键了。不过还是准备弄个拓展坞，作图还是需要鼠标的。\n反正初印象就是苹果在教我做事，我有点不爽。\n第二天作为两个不到30的青年，早起是不可能的，睡到十点半，出门尝了推荐的源记肠粉。甜酱油确实给肠粉增味了不少，肠粉皮也感觉挺薄的，反正挺好吃的，不过也不便宜。老板也像牛展一样很拽的样子，拿着本子晃啊晃，问我吃啥，喝不喝粥，拿着笔边听边写，还是有点压迫感的。吃完便坐车去了白云山，5块钱的门票还是很不错的，在一定上限制了人数。进门就看见有小学生春游，在草坪上洋溢着活泼可爱，真好啊。之后便是爬山和爬山，哥哥是真的能走，步伐快还走得久，我光跟上就很费力了。汗水打湿了一遍又一遍，只剩下一些照片才有游玩的印象了。唉，我只想游玩，哥哥想带我锻炼！\n\n走到四点钟下来，哥哥想吃高蛋白补充消耗，于是我俩去了附近的一家潮汕牛肉，230块两人吃撑了，吃的是真的爽，肉新鲜还分量大。但晚上又要和伯伯吃饭，于是和他一起找了个煲仔饭店，我和哥哥两人吃一份。吃完从珠江新城过江走到广州塔下，接着继续走到琶州岛和磨碟沙，看了看一些类似酒吧的娱乐场所，哥哥还是觉得这里的氛围不如长沙。磨碟沙有很多公司，比如京东、阿里巴巴、TCL等。如果能在珠江边办公，还挺爽的。\n\nccb领域大神!\n回酒店，浑身酸痛，躺了两小时，哥哥说要吃夜宵，于是到上下九吃了木星烧烤，中规中矩吧。\n第三天由于前晚聊了不少，而且爬山需要恢复，于是起晚了，十二点起床，随便找了家鱼蛋粉，感觉鱼皮泡汤还是挺好吃的。然后就带我到体育中心对面的商场逛了一下，就是天河城和其他几个。吃了翠华的饭，感觉还行，小贵，不过柠檬红茶确实让我很惊艳，第一次真的喝到红茶味这么浓的。看了很多奢侈品，还有不少漂亮且气质好的女性，还得是这种商场才会有一堆这种人。还去了苹果直营店，第一次看到线下店人爆满，中国人和外国人都在研究和试用，感觉充满了科技和money的气息。一趟玩下来还是长了不少见识，虽然那些没听过名字的奢侈品牌没有记住，但还是有看过的记忆了。\n\n晚上和伯伯在车陂南的一个湘菜馆吃完饭，便是分别了。哥哥和伯伯一起，我要回学校。愉快的时光总是这么短暂！感谢哥哥作为半个本地人带我玩了一些重要的部分，真玩爽了。哥哥对我是真好，以后我也要多帮衬帮衬！\n"},{"title":"对程序员来说，技术能力和业务逻辑哪个更重要","url":"/2023/10/08/%E5%AF%B9%E7%A8%8B%E5%BA%8F%E5%91%98%E6%9D%A5%E8%AF%B4%EF%BC%8C%E6%8A%80%E6%9C%AF%E8%83%BD%E5%8A%9B%E5%92%8C%E4%B8%9A%E5%8A%A1%E9%80%BB%E8%BE%91%E5%93%AA%E4%B8%AA%E6%9B%B4%E9%87%8D%E8%A6%81%EF%BC%9F/","content":"\n转载自对程序员来说，技术能力和业务逻辑哪个更重要\n\n\n一、前言大家好，我是苍何。话说，小明和小华都是程序员，小明今年刚毕业在一家小金融公司实习，小华是工作了 8 年的 Java 开发，他们两最近都面临同样的问题「技术能力和业务逻辑哪个更重要？」，于是他们都向大师求道。\n程序员小明：“大师，我们公司的技术太 low 了，我感觉学不到东西，技术能力和业务逻辑哪个更重要？”程序员小华：“大师，我感觉学不动了，年龄大了加班也加不动，35 岁危机快来了，技术能力和业务逻辑哪个更重要？”大师：“提早理清业务和技术的重要性，早做规划！”程序员小明&#x2F;小华：“大师，此话怎讲？”大师：“说来话长…，你还是直接去看苍何文章吧…”\n在 IT 圈子有一个有趣的现象，一面是供给市场的饱和，一面又是需求市场的一岗难求。仿佛对于 5 年以内的程序员，市场总是供大于求，找工作不大容易，今年的互联网更是成了小金融圈子，拼学历拼背景，而对于 5 年以上或 10 年以上的业务专家的需求，需求企业又是在猎头和招聘平台间不断抢人，不是技术不足就是经验不够。 不知道大家是否有想过，为什么会出现这样的情况？\n经常看到大家关于技术能力和业务逻辑哪个更重要的问题争论不休，如果你对此话题感兴趣，不妨继续往下看看。\n\n文章大约 6000 字，预计阅读需要 15 分钟，如果想看结论可直接看第四部分。\n\n二、技术能力的重要性2.1、技术能力的定义我们在谈技术和业务谁更重要之前，先理清一点是不管怎么说，技术能力是我们作为程序员这个职业的根基，基础扎实是积累经验和进一步成长的基石。技术能力确保我们有能力构建、优化和维护软件，使其具有高性能、高可用性和可扩展性。\n\n编程技能包括编程语言、算法、数据结构以及编写高质量、可维护代码的能力。编程技能是技术能力的核心，涵盖了各种编程语言和开发范畴。具备了编程技能才能有的放矢，能看得懂代码，理解编程原理是程序员的核心技能。\n\n开发工具和框架涵盖了使用开发工具、集成开发环境（IDE）、版本控制系统、测试框架以及各种开发框架和库的能力。这有助于提高开发效率和质量。通过高效的工具进行高效编码，并将编写好的应用程序进行部署发布也是核心掌握的技能。\n\n系统架构包括对操作系统、网络原理、数据库设计和系统架构的理解。这方面的知识使得我们能够构建稳健、可扩展的应用程序和系统。这是技术能力的进阶部分，需要对系统做全盘的技术了解以及需要掌握设计模式。\n\n问题解决和学习能力技术能力的第四大体现就是问题解决和学习能力，能不能通过上面说的三大能力，即编程技能，开发工具和框架、系统架构去实际解决业务的问题也是技术能力的体现之一，另外新技术迭代很快，学习能力也是技术能力的体现之一，有些人学习能力强，一项新的技术花费的学习时间甚至比别人更短，掌握也更高效，这就是学习能力的体现。\n\n\n2.2、技术强的优势\n李白的 “兴酣落笔摇五岳，诗成笑傲凌沧州” 正表明技术强走遍天南地北都不怕，于我们程序员来说，也有一定的适用性。技术强不仅受人尊重而且往往能独当一面，成为某个系统的 owner，独立负责某系统，往往也能得到领导公司的喜欢，在公司内部的晋升很多都是技术实力表现非凡并做出突出贡献者。\n技术强还有个最大的优势就是能让我们顺利的通过面试，有竞争力，拿到高薪的工作。比如同等学历背景下，如果 A 的技术实力远超 B，考虑岗位需求，大部分会选择 A，即使 A 要价高于 B，对企业来说，与其多招几个要价低但技术一般的人，倒不如招一个技术强的实力派，往往能达到「一个诸葛亮，胜过三个臭皮匠」的效果。\n另外一点可以靠技术能力吃技术的红利，什么意思呢？我们知道现在是知识付费时代，想通过免费能获取到优质的知识是比较难的，很多技术大佬都开了公众号以及知识星球，并做成了类似于《掘金小册》这样的付费产品，通过卖技术形成产品的前提是要有好的技术，这也造就了很多的「财富自由」。\n2.3、如何从写业务代码中跳出来，有效提升个人技术能力？平常业务开发的绝大多数时候，我们做的都是 CRUD 的工作，久而久之，发现吃老本行技术也能足够支撑，不愿意去投入学习，导致技术能力永远停留在开始的水平，等换工作或者运气不好被裁准备简历面试的时候，才发现，自己好像除了 CRUD 也没其他好讲的了。这种情况该如何破局呢？我认为可以从以下几个方面从写业务代码中跳出来，有效提升个人技术能力。\n2.3.1、持续学习新技术计算机技术日新月异，保持持续学习才能不被时代抛弃。印象比较深刻的是，以前比较火的 java SSH 框架风靡一时，很多企业都在使用，后面由于漏洞以及模块化 SQL 的兴起，又开始流行 SSM 框架，随着发展 SpringBoot、SpringCloud 又成为了主流，JDK21 都发布了，而你连 Java8 的 Stream 还没玩明白，这就是落后于时代，落后于技术，是很危险的。\n很多人说，平时工作忙，加班多，CRUD 就已经耗费了绝大部分精力，想说「时间挤挤总是有的」，但还是想举个一位阿里朋友的例子，平常工作基本都需要加班，晚上回家还得带娃，但依旧挤出时间来学习，写了书、每周至少 2 篇高质量文章的输出。所以，没时间不是接口，从内心愿意去学习并规划好时间，持续学习。\n2.3.2、开展个人项目并参与开源社区开发自己的个人项目或者参与到开源项目的共建上。开发一个自己的个人项目可以把学到的新的或者你认为比较有创新的技术框架、设计模式运用到你自己项目中，可以的话发布到开源社区，让全世界的开发者来检验你的项目，是提升技术能力的一个重要手段。\n我们平时工作中的业务代码可能没法使用到新学的技术或者因为企业追求稳定的原因并不能应用，那我们自己开源的项目完全可以，而且开源项目也可反映我们的技术能力和水平，在找工作面试也有一定帮助。\n除了自己整开源项目，也可参与到熟知的开源项目中来。有个学弟在大学期间就参与到著名的开源项目的建设中，贡献了一些不错的 Feature 后，成为了 MVP ，校招找工作具有极大的优势，最终也轻松收获多个大厂 Offer。\n2.3.3、参加技术研讨会周末把用来打游戏的时间多去参加一些技术沙龙、研讨会，能够掌握最新技术的发展动向，并有机会结识大佬。每年许多大厂和社区论坛都会举办很多的线下会议，比如今年阿里举办的「云原生会议」，如果离你所在的城市不远，可以去听一听，对技术的提高和敏锐是有很大帮助的。\n2.3.4、尝试输出你学习到的知识不是你的，只有真正会用的知识才属于你。学以致用另一种比较好的方式是，把你对技术的理解，形成自己的文章或架构图，并整理尝试输出到互联网，接受批评和指正。就拿 java 领域来说，我们可以看到很多的技术博文，很多你可能看了觉得也就那样，自己也能写甚至能写的比他好，但相信我，你一旦尝试去输出，就会发现优秀的文章绝不是一朝一夕形成的，一定有个过程，从量变到质变的过程。\n多输出，加强对技术的理解，对技术的提高会有意想不到的帮助。\n三、业务逻辑的重要性我花了大量的篇幅讲述技术的重要性并对如何从写业务代码中跳出来，有效提升个人技术能力做了一些个人建议，并不是想说技术一定比业务更重要， 在权衡哪个更重要前，我们需要理清两者之间各自的定义及优势。\n3.1、业务逻辑的定义业务泛指一切组织或公司所从事的各种商业活动和运营工作，通常是和行业领域有强相关性。通常我们将业务分为经营性业务和非经营性业务，经营性业务通常是指和公司运营盈利所挂钩的业务，如抖音这个产品里面的抖音电商就属于经营性业务，公司需要靠这个来盈利；非经营性业务指和公司运营盈利无关的业务，如企业内部系统，仅仅需要满足内部的使用，即使不盈利也要展开的业务。\n另外我们也可以把业务按照行业的属性来划分，如房地产业务、经融业务、互联网业务。不管如何对业务进行划分，我们能知道业务是种类繁多的，而且大部分业务都有自己特殊性，从一个业务转到另一个业务，是需要一定的学习成本的，这也是通常人们所说的「隔行如隔山」。\n3.2、业务逻辑强的优势业务逻辑强，也即在一个行业领域有丰富的经验。优势很明显，在一个行业领域的经验越足，在该行业领域的不可替代性越强，越容易成为业务专家。我们知道对于有些业务没有沉淀个几年，是不能说了解该业务。最具代表性的是阿里的 「5 年陈」文化，我们在阿里的时候，入职阿里一年的叫“一年香”，入职 5 年的叫“5 年陈”，当入职满了5年的时候，会收到一枚刻有工号和花名的戒指，同时 5 年才是马云所认可的阿里人。所谓被认可，其实除了文化价值观认可外，最重要的还是认可你对阿里公司及业务在 5 年时间里有了认知，从了解到熟悉的 5 年，是阿里人的荣耀。\n为什么我们经常在很多招聘的 JD 上看到岗位描述时候会带上「有 xxx 经验者优先」，特别是招聘的职级越高，这种现象越明显。\n\n\n可以看到招聘上对于 1-3 年的开发并未要求有业务经验，而对于 10 年以上招聘要求中就列明了「有相关经验者优先」。业务能力强在某一领域更有权威性，经常我们出去开会，看到演讲的嘉宾张口闭口都是，我在这个行业干了 10 年 ，意思是恕我直言，在座的各位，你们没人比我更了解这个行业，开始听我吹逼吧…\n不过想想也是，一个人在一个行业深耕了 10 年，确实对该行业熟知。那对技术人来说，熟悉业务有什么优势呢？\n更好的问题理解和解决能力熟悉业务流程，对开发和系统设计有很大的帮助，我们的很多系统为什么觉得不好用，最大的原因还是没有深入到业务场景中去。比如，让一个在地产领域工作的开发去研发医疗程序，在系统设计的时候，会自然而然的用房地产程序设计的思想应用到医疗行业，会发现根本不适用，虽然功能看似暂时可用，但长期一定会出现架构和稳定等各种问题，业务理解的深浅，直接影响系统可用和稳定。\n更高的创新能力创新一定是能在一个领域有非常深的认知后才去做创新，比如设计一个高可用的创新型电池系统，如果你连电池最基本的 SOC、SOC 以及充放电特性都不清楚，上来就直接搞一个可无限充电可折叠的电池系统，那就贻笑大方了。\n更好的沟通和合作我们经常听到客户反馈，和我们的有些开发沟通起来比较费劲，抛去个别同事性格因素外，还有一点比较重要的是，客户关心的还是聚焦在具体的业务上，而开发更关注与技术，在探讨同一个问题的时候，就会出现「公说公有理婆说婆有理」的尴尬画面。掌握业务，能更好的和客户沟通。\n更多的职业发展机会我们经常看到很多程序员转行做了产品经理、项目经理、市场、客户服务，甚至有些出来自己经营公司，这都需要归功于对业务的深入理解，能为我们更多的职业发展机会，面对 35 岁危机的时候，也能在职场中占据一席之地。\n3.3、如何避免过度关注技术，而忽视业务理解？技术能力很重要，但过度关注技术而忽视对业务的积累，会降低我们的职场竞争力。我们经常会陷入另外一个误区，认为只要我技术足够强，就能走遍天南海北，就能一直能找到好工作。在工作前几年这条规则适用，但越往后，特别是到了 35+ 的年龄，加班加不动，技术学不动的时候，我们缺少业务沉淀，是很危险的事情。\n特别是对于刚毕业的同学来说，去了一家公司发现技术落后，于是想换工作，想找个高并发的项目，换来换去发现，为什么现实中和我想象中差距这么大？不是现在都人手微服务分布式了吗？我这样怎么提升？\n没有业务的技术不是好技术任何一门技术一定是服务于业务的，如果没有业务场景的技术，那这个技术是个空的技术，技术的诞生本来就是用来解决实际问题的，要用好的技术来服务于业务，在我们过度关注技术精进时，静下心来，把手头的业务逻辑梳理清楚，想清楚哪些可用技术优化的点，而非单纯的考虑技术先进性而不考虑适应性。就比如，不是每个系统上来就得分布式微服务的，一个简单的内部系统，QPS 不到 40，你说整个微服务上去有什么用？\n平常工作多画业务流程图我们接手一个项目业务时，最先做的不是上来就去撸代码，而是要根据 BRD、PRD 去梳理业务流程，争取用我们自己的逻辑画出业务流程图，并和 PD 业务方做 check，之后对着代码逻辑再次梳理一遍业务流程图，加深对业务的理解。\n多参与业务讨论和方案设计经常很多开发参加 BRD 或 PRD 评审时，总觉得这是业务方和产品对齐的事情，和开发没关系，不会到时候问产品就行了。大家有没有想过，为什么我们需要开发这个功能，这个产品或功能能实际为用户带来什么价值，我们的工作一定是要有价值的才不会觉得卷和累，所以多参与业务的讨论和方案设计，站在开发的角度去理解业务和产品。\n去关注行业知识和行业峰会每年我领导都会去参加行业的峰会，在峰会上，像个学生似的学习最新的行业知识，所以现在他是行业技术专家，在公司没人比他更了解业务。在行业峰会上，这些最前沿的业务知识，行业动态能够最先知道，每一个行业都有一些论坛和社群，比如公众号，我们可以多关注一些行业的。\n四、业务和技术如何权衡？既然业务和技术都如此重要，那到底该如何权衡呢。\n4.1、初期以技术提升为主在我们刚开始工作 1-3 年，我觉得还是以技术提升为主。因为学校学的知识和企业实际项目会有一定不同，将学习知识落地项目的过程是需要技术的提升的，除了平时的项目开发，需要打牢技术基础。\n**所谓：“基础不牢，地动山摇。” **初期需要打牢基础，越往后越发现，很多新的框架技术的底层一定来源于专业基础，比如计算机原理及网络，操作系统、数据结构和算法。包括经典的中间件，如果能掌握他们的设计思想，如 Redis、Hbase、EleasticSearch、RocketMQ 等，也会对技术能力提升有个质的飞跃。我建议新技术以视频切入后，往深的理解，需反复阅读经典图书，比如《Redis 深度历险》、《深入理解 Kafka 核心设计与实践原理》、《ElasticSearch 实战》、《深入理解 Java 虚拟机》等等。\n4.2、中期注重技术和业务积累在工作 3-5 年阶段，除了技术的积累，还需要做业务的沉淀。这个时候找工作往往是不关注行业的，但在 CRUD 的同时，需要积累业务知识，换工作也尽量往相同或相似领域倾斜，比如在电商领域就不要一下子 360°大转弯换到房地产领域去了。\n这个时候还不需要做细分领域的切入，做大致行业的协同即可。技术上需要开始形成产品化，将积累的技术知识通过传授分享形成自己的技术产品，多参与开源建设，多在技术社区活跃，多链接一些技术大牛。\n4.3、后期注重业务深耕和沉淀\n在工作 5 年之后，我们积累了一定的技术能力和项目经验，这个时候需要更关注业务。我们在换工作的时候，可选择性就不很多了，最好是切合该领域的选择跳槽。在某一个细分领域去沉淀，打造该领域下的 IP，做业务专家。这个时候不管是做了架构师，还是做了技术管理，亦或是还在一线奋斗，最重要的是要从代码中抽离出来，形成自己的业务闭环。需要把积累的业务知识通过互联网分享出来，多参加行业论坛和会议，并能作为嘉宾发言，多分享行业认知，积累行业人脉和资源。\n只有当业务知识积累到一定程度，才有可能突破职业瓶颈，过了四十岁写不动代码了，我们至少不用仅在送外卖和摆地摊之间做选择，大不了我们可以做项目管理、做市场、做产品经理，给自己未来多一份选择，从现在开始做起、\n五、总结经常有人告诉你技术更重要或业务更重要，我觉得都是片面的，对于不同阶段，两者的侧重点各不同，在工作起步阶段，我们应更关注技术的提升，越往后，越需要多关注业务。我们需要在职场中形成技术和业务的双护城河，在不同的阶段坚持做正确的事。\n","categories":["个人成长"]},{"title":"工具记录","url":"/2025/02/08/%E5%B7%A5%E5%85%B7%E8%AE%B0%E5%BD%95/","content":"视频制作\n录屏: OBS\n\n字幕生成: Buzz\n\n字幕合成: Arctime Pro\n\nAI配音生成: CosyVoice2，F5-TTS，Fish Speech 1.5，GPT-Sovits V2 选一个\n\n日语Voice: Voicevox\n\n视频压缩: 小丸工具箱\n\n剪辑工具: 本来是PR，现在用必剪？\n\nTODO:OBS替换为Vtuber模型\n\n\n小红书\n小红书笔记生成器\n\n歌曲生成\n歌词生成：大模型\n歌词音源：看下网上免费的中日vocaloid\nAI扒谱：TODO\n查看内容：\n查看声音：\n合成\nOpenUtau\nDiffSinger\n\n\n\n交易1234\n编程\n大项目代码 diff: bcompare\n压力测试: jmeter\n接口测试: apifox\n内网穿透\nnatapp\nngrok\ncpolar\nsakura frp\n花生壳\n\n\n数据库管理：\n目前是navicat: navicat\n准备新电脑用: dbeaver\n\n\n\nagent\n大模型内容生成: 暂定为DeepSeek R1\n\n信息搜集\npublic-apis\n\n电脑硬件\n一站式硬件检测: 图吧工具箱\n硬盘空间占用可视化: Spacesniffer\n\n\n\n模型其他\n密码管理：bitwarden\nGif录制：gifcam\nvpn: v2rayN\n笔记软件：\nobsidian\n飞书\n\n\n截屏：Snipaste\n文件查询+OCR：utools\n论文阅读：zotero\n远程控制：todesk\n本地PDF编辑工具: Stirling-PDF\n简历制作:\n木及简历\nLapisCV\n\n\nMarkdown转PPT: marp\n\nfor fun\n激活Linux)\n\n\n网络\n抓包：easytshark\n\n","categories":["工具"],"tags":["工具"]},{"title":"操作系统导论笔记","url":"/2023/07/25/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AF%BC%E8%AE%BA%E7%AC%94%E8%AE%B0/","content":"自制思维导图\n\n","categories":["读书笔记"],"tags":["操作系统"]},{"title":"数据结构与算法之美笔记之位图、布隆过滤器","url":"/2022/02/19/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E%E7%AC%94%E8%AE%B0%E4%B9%8B%E4%BD%8D%E5%9B%BE%E3%80%81%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8/","content":"位图(BitMap)我们有1千万个整数，整数的范围在1到1亿之间。如何快速查找某个整数是否在这1千万个整数中呢？答：除了散列表，我们还可以申请一个大小为1亿的布尔数组，$arr[i]&#x3D;true$表示$i$在这1千万个整数内，但是因为很多语言中的布尔类型是$1Byte$的，空间还是很大。实际上，为了表示$true$和$false$，我们可以用$1bit$就行了\n如下图就表示用了$1Byte$的$8bit$去作为下标存值，存的是1、4、6三个值\nJava中一个int类型占用4个字节32位，假如说现在有一亿的数据量，使用普通的存储模式需要:100000000*4&#x2F;1024&#x2F;1024 约为381.5M的存储；使用bitmap存储模式需要：100000000&#x2F;8&#x2F;1024&#x2F;1024 约为11.9M 的存储，可以看到存储减少了一个量级。\n\n\n\n下标\n0\n1\n2\n3\n4\n5\n6\n7\n\n\n\ntrue表示该值存在\n0\n1\n0\n0\n1\n0\n1\n0\n\n\n但是，我们之前提到的范围是1到1亿，如果范围更大怎么办？我们真的需要开辟更大的数组范围吗\n\n布隆过滤器布隆过滤器就是为了解决上面这个问题，对位图这种数据结构的一种改进。布隆过滤器使用了hash算法，对要保存的对象，用多个hash函数分别得到一组hash值，这里设为$h_{1}$、$h_{2}$、$h_{3}$…$h_{k}$，然后将$bitmap[h_{1}]$、$bitmap[h_{2}]$…$bitmap[h_{k}]$设为true当我们要查找一个对象是否在bitmap中存在时，我们重新用多个hash函数分别得到hash值，然后查找$bitmap[h_{1}]$、$bitmap[h_{2}]$…$bitmap[h_{k}]$是否都为true如下图\n但我们也很容易想到，当保存的数越来越多，为true的位也越来越多，冲突的可能会越来越大，即容易误判布隆过滤器的误判有一个特点，它只会对存在的情况有误判。如果某个数字经过布隆过滤器判断不存在，那说明这个数字真的不存在，不会发生误判；如果某个数字经过布隆过滤器判断存在，这个时候才会有可能误判，有可能并不存在。不过，只要我们调整哈希函数的个数、位图大小跟要存储数字的个数之间的比例，那就可以将这种误判的概率降到非常低。尽管布隆过滤器会存在误判，但是，这并不影响它发挥大作用。很多场景对误判有一定的容忍度。比如爬虫判重这个问题，即便一个没有被爬取过的网页，被误判为已经被爬取，对于搜索引擎来说，也并不是什么大事情，是可以容忍的，毕竟网页太多了，搜索引擎也不可能100%都爬取到。\n在爬虫URL判重上，散列表和布隆过滤器的比较：\n\n内存我们用布隆过滤器来记录已经爬取过的网页链接，假设需要判重的网页有10亿，那我们可以用一个10倍大小的位图来存储，也就是100亿个二进制位，换算成字节，那就是大约1.2GB。之前我们用散列表判重，需要至少100GB的空间。相比来讲，布隆过滤器在存储空间的消耗上，降低了非常多。\n时间效率布隆过滤器用多个哈希函数对同一个网页链接进行处理，CPU只需要将网页链接从内存中读取一次，进行多次哈希计算，理论上讲这组操作是CPU密集型的。而在散列表的处理方式中，需要读取散列冲突拉链的多个网页链接，分别跟待判重的网页链接，进行字符串匹配。这个操作涉及很多内存数据的读取，所以是内存密集型的。我们知道CPU计算可能是要比内存访问更快速的，所以，理论上讲，布隆过滤器的判重方式，更加快速。\n\n布隆过滤器的误判率，主要跟哈希函数的个数、位图的大小有关。当我们往布隆过滤器中不停地加入数据之后，位图中不是true的位置就越来越少了，误判率就越来越高了。所以，对于无法事先知道要判重的数据个数的情况，我们需要支持自动扩容的功能。\n当布隆过滤器中，数据个数与位图大小的比例超过某个阈值的时候，我们就重新申请一个新的位图。后面来的新数据，会被放置到新的位图中。但是，如果我们要判断某个数据是否在布隆过滤器中已经存在，我们就需要查看多个位图，相应的执行效率就降低了一些。\n","categories":["数据结构","笔记"]},{"title":"思考","url":"/2024/12/08/%E6%80%9D%E8%80%83/","content":"\n\n  59caac7809943a14ad708e50cc02dd4deb5a8d3a4dc9f3329db7e22d4a5b809bc6b8c2b7fa184a07ee2948aa6c350b40f678a38dcfe0342447014bd6a2dc307bdc6905a08f7af7e2ae4b60efa7b49821519c7be440aad98247a463596973b9ffdf2f1049cf54ad35e2f1e177953c83ac4cff9acd654f878c37e44233f2d7811a9cd00b35bb360355d312bccfe1b1e77d2705c623dd80d35720764a23d8920647846a95e6a9686b8bd6eb37fd0c39007d2e559b556ca6ec09ec024bc063503eec86f927755ef927b2320ffc24f3fe79079cf74b3d05bacab23b134019cbde42c76c652ccdfdf6d91333b04cd8cb7d7b9f6003df9dbb7d0577be804f8392a9e9c6d614a28f4171576c6cd75cef0f5861321d459120a2ee04c644e603ed74c78bf80057fdd84e07e0aa7b50d454ad672b08c4effdb47a4892f8526820a70e3c68b53423dae0c3b7d093765fd63874a63de92cc03517a16d58a12fd052707f9efcaa6cad1bba53c1c8cbfadaa8d9206474fa1b013d3358e44f771c0338a592476f592f337a505b073396fc5c21e1bda3e97334e39acd50bcad593559437f9a1cdfa42403551727331fabdc52bd7a194dea87e1628799bdf1994201f24270d65493f959bdbb9f68e1d6e609c4c10054399cac695179082d1afe0fed16bb880195430dd03a4fae34bfa90a8b4d5b5fb0aecdd2e8fe18e8753959bfb4bf2f46f19872629c41b03b5b402f90705c186b338b9c205bdce6b8b1bead8b0310521373414897c29eb8201ce327749f7bc252bc3f570ac1f8dba92a6c96e23c50929a57ac3828bbf078549d62af1dadcab0b5c75b876f404e9c58ee99c82060fd9ad09fdacff122203bad1ae919269052913475ef6265a1b6cda1f971005476f5e9eae74256d439c75334354eb46f4118e853dc93ba69\n  \n    \n      \n      \n        Hey, password is required here.\n      \n    \n  \n\n\n\nimport {initHBE} from \"/js/plugins/hbe.js\";\n  console.log(\"hexo-blog-encrypt: loaded.\");\n    initHBE();\n\n"},{"title":"手写简易神经网络","url":"/2023/08/20/%E6%89%8B%E5%86%99%E7%AE%80%E6%98%93%E7%89%88%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/","content":"\n    [mnist_train.csv] \n    \n      5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,18,18,18,126,136,175,26,166,255,247,127,0,0,0,0,0,0,0,0,0,0,0,0,30,36,94,154,170,253,253,253,253,253,225,172,253,242,195,64,0,0,0,0,0,0,0,0,0,0,0,49,238,253,253,253,253,253,253,253,253,251,93,82,82,56,39,0,0,0,0,0,0,0,0,0,0,0,0,18,219,253,253,253,253,253,198,182,247,241,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,156,107,253,253,205,11,0,43,154,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,1,154,253,90,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,139,253,190,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,190,253,70,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,35,241,225,160,108,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,81,240,253,253,119,25,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,186,253,253,150,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,93,252,253,187,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,249,253,249,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,46,130,183,253,253,207,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,39,148,229,253,253,253,250,182,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,114,221,253,253,253,253,201,78,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,23,66,213,253,253,253,253,198,81,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,171,219,253,253,253,253,195,80,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,172,226,253,253,253,253,244,133,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,136,253,253,253,212,135,132,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,00,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,51,159,253,159,50,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,238,252,252,252,237,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,54,227,253,252,239,233,252,57,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,60,224,252,253,252,202,84,252,253,122,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,163,252,252,252,253,252,252,96,189,253,167,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,51,238,253,253,190,114,253,228,47,79,255,168,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,238,252,252,179,12,75,121,21,0,0,253,243,50,0,0,0,0,0,0,0,0,0,0,0,0,0,38,165,253,233,208,84,0,0,0,0,0,0,253,252,165,0,0,0,0,0,0,0,0,0,0,0,0,7,178,252,240,71,19,28,0,0,0,0,0,0,253,252,195,0,0,0,0,0,0,0,0,0,0,0,0,57,252,252,63,0,0,0,0,0,0,0,0,0,253,252,195,0,0,0,0,0,0,0,0,0,0,0,0,198,253,190,0,0,0,0,0,0,0,0,0,0,255,253,196,0,0,0,0,0,0,0,0,0,0,0,76,246,252,112,0,0,0,0,0,0,0,0,0,0,253,252,148,0,0,0,0,0,0,0,0,0,0,0,85,252,230,25,0,0,0,0,0,0,0,0,7,135,253,186,12,0,0,0,0,0,0,0,0,0,0,0,85,252,223,0,0,0,0,0,0,0,0,7,131,252,225,71,0,0,0,0,0,0,0,0,0,0,0,0,85,252,145,0,0,0,0,0,0,0,48,165,252,173,0,0,0,0,0,0,0,0,0,0,0,0,0,0,86,253,225,0,0,0,0,0,0,114,238,253,162,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,85,252,249,146,48,29,85,178,225,253,223,167,56,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,85,252,252,252,229,215,252,252,252,196,130,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28,199,252,252,253,252,252,233,145,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,25,128,252,253,252,141,37,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,04,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,67,232,39,0,0,0,0,0,0,0,0,0,62,81,0,0,0,0,0,0,0,0,0,0,0,0,0,0,120,180,39,0,0,0,0,0,0,0,0,0,126,163,0,0,0,0,0,0,0,0,0,0,0,0,0,2,153,210,40,0,0,0,0,0,0,0,0,0,220,163,0,0,0,0,0,0,0,0,0,0,0,0,0,27,254,162,0,0,0,0,0,0,0,0,0,0,222,163,0,0,0,0,0,0,0,0,0,0,0,0,0,183,254,125,0,0,0,0,0,0,0,0,0,46,245,163,0,0,0,0,0,0,0,0,0,0,0,0,0,198,254,56,0,0,0,0,0,0,0,0,0,120,254,163,0,0,0,0,0,0,0,0,0,0,0,0,23,231,254,29,0,0,0,0,0,0,0,0,0,159,254,120,0,0,0,0,0,0,0,0,0,0,0,0,163,254,216,16,0,0,0,0,0,0,0,0,0,159,254,67,0,0,0,0,0,0,0,0,0,14,86,178,248,254,91,0,0,0,0,0,0,0,0,0,0,159,254,85,0,0,0,47,49,116,144,150,241,243,234,179,241,252,40,0,0,0,0,0,0,0,0,0,0,150,253,237,207,207,207,253,254,250,240,198,143,91,28,5,233,250,0,0,0,0,0,0,0,0,0,0,0,0,119,177,177,177,177,177,98,56,0,0,0,0,0,102,254,220,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,169,254,137,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,169,254,57,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,169,254,57,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,169,255,94,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,169,254,96,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,169,254,153,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,169,255,153,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,254,153,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,01,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,124,253,255,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,244,251,253,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,127,251,251,253,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,236,251,211,31,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,228,251,251,94,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,155,253,253,189,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,253,251,235,66,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,205,253,251,126,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,104,251,253,184,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,240,251,193,23,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,253,253,253,159,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,151,251,251,251,39,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,221,251,251,172,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,234,251,251,196,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,251,251,89,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,159,255,253,253,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,228,253,247,140,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,251,253,220,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,251,253,220,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,193,253,220,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,09,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,148,210,253,253,113,87,148,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,87,232,252,253,189,210,252,252,253,168,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,57,242,252,190,65,5,12,182,252,253,116,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,252,252,183,14,0,0,92,252,252,225,21,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,132,253,252,146,14,0,0,0,215,252,252,79,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,126,253,247,176,9,0,0,8,78,245,253,129,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,232,252,176,0,0,0,36,201,252,252,169,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,22,252,252,30,22,119,197,241,253,252,251,77,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,231,252,253,252,252,252,226,227,252,231,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,235,253,217,138,42,24,192,252,143,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,62,255,253,109,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,71,253,252,21,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,252,21,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,71,253,252,21,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,106,253,252,21,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,255,253,21,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,218,252,56,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,252,189,42,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,184,252,170,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,147,252,42,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,02,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,25,100,122,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,33,151,208,252,252,252,146,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,152,244,252,253,224,211,252,232,40,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,152,239,252,252,252,216,31,37,252,252,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,252,252,252,252,217,29,0,37,252,252,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,181,252,252,220,167,30,0,0,77,252,252,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,26,128,58,22,0,0,0,0,100,252,252,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,157,252,252,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,110,121,122,121,202,252,194,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,53,179,253,253,255,253,253,228,35,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,54,227,252,243,228,170,242,252,252,231,117,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,78,252,252,125,59,0,18,208,252,252,252,252,87,7,0,0,0,0,0,0,0,0,0,0,0,0,5,135,252,252,180,16,0,21,203,253,247,129,173,252,252,184,66,49,49,0,0,0,0,0,0,0,0,3,136,252,241,106,17,0,53,200,252,216,65,0,14,72,163,241,252,252,223,0,0,0,0,0,0,0,0,105,252,242,88,18,73,170,244,252,126,29,0,0,0,0,0,89,180,180,37,0,0,0,0,0,0,0,0,231,252,245,205,216,252,252,252,124,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,207,252,252,252,252,178,116,36,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,93,143,121,23,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,01,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,145,255,211,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,237,253,252,71,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,175,253,252,71,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,144,253,252,71,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,191,253,252,71,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,26,221,253,252,124,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,125,253,252,252,108,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,252,252,108,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,253,253,108,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,252,252,108,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,252,252,108,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,252,252,108,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,253,253,170,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,252,252,252,42,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,149,252,252,252,144,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,109,252,252,252,144,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,218,253,253,255,35,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,175,252,252,253,35,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,73,252,252,253,35,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,211,252,253,35,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,03,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,38,43,105,255,253,253,253,253,253,174,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,43,139,224,226,252,253,252,252,252,252,252,252,158,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,178,252,252,252,252,253,252,252,252,252,252,252,252,59,0,0,0,0,0,0,0,0,0,0,0,0,0,0,109,252,252,230,132,133,132,132,189,252,252,252,252,59,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,29,29,24,0,0,0,0,14,226,252,252,172,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,85,243,252,252,144,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,88,189,252,252,252,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,91,212,247,252,252,252,204,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,125,193,193,193,253,252,252,252,238,102,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,222,252,252,252,252,253,252,252,252,177,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,223,253,253,253,253,255,253,253,253,253,74,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,123,52,44,44,44,44,143,252,252,74,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,252,252,74,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,86,252,252,74,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,75,9,0,0,0,0,0,0,98,242,252,252,74,0,0,0,0,0,0,0,0,0,0,0,0,0,61,183,252,29,0,0,0,0,18,92,239,252,252,243,65,0,0,0,0,0,0,0,0,0,0,0,0,0,208,252,252,147,134,134,134,134,203,253,252,252,188,83,0,0,0,0,0,0,0,0,0,0,0,0,0,0,208,252,252,252,252,252,252,252,252,253,230,153,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,49,157,252,252,252,252,252,217,207,146,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,103,235,252,172,103,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,01,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,63,197,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,254,230,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,254,254,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,254,255,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,254,254,57,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,254,254,108,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,239,254,143,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,178,254,143,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,178,254,143,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,178,254,162,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,178,254,240,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,113,254,240,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,83,254,245,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,79,254,246,38,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,214,254,150,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,144,241,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,144,240,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,144,254,82,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,230,247,40,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,168,209,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,04,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,189,190,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,143,247,153,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,136,247,242,86,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,252,187,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,62,185,18,0,0,0,0,89,236,217,47,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,216,253,60,0,0,0,0,212,255,81,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,206,252,68,0,0,0,48,242,253,89,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,131,251,212,21,0,0,11,167,252,197,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,29,232,247,63,0,0,0,153,252,226,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,219,252,143,0,0,0,116,249,252,103,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,96,253,255,253,200,122,7,25,201,250,158,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,92,252,252,253,217,252,252,200,227,252,231,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,87,251,247,231,65,48,189,252,252,253,252,251,227,35,0,0,0,0,0,0,0,0,0,0,0,0,0,0,190,221,98,0,0,0,42,196,252,253,252,252,162,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,111,29,0,0,0,0,62,239,252,86,42,42,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,148,253,218,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,121,252,231,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,221,251,129,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,218,252,160,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,122,252,82,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,03,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,42,118,219,166,118,118,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,103,242,254,254,254,254,254,66,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,232,254,254,254,254,254,238,70,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,104,244,254,224,254,254,254,141,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,207,254,210,254,254,254,34,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,206,254,254,254,254,41,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,209,254,254,254,171,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,91,137,253,254,254,254,112,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,214,250,254,254,254,254,254,34,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,81,247,254,254,254,254,254,254,146,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,110,246,254,254,254,254,254,171,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,73,89,89,93,240,254,171,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,128,254,219,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,254,254,214,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,138,254,254,116,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,19,177,90,0,0,0,0,0,25,240,254,254,34,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,164,254,215,63,36,0,51,89,206,254,254,139,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,57,197,254,254,222,180,241,254,254,253,213,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,140,105,254,254,254,254,254,254,236,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,117,117,165,254,254,239,50,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,05,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,40,129,234,234,159,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,150,239,254,253,253,253,215,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,156,201,254,254,254,241,150,98,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,19,154,254,236,203,83,39,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,144,253,145,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,129,222,78,79,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,134,253,167,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,254,78,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,201,253,226,69,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,6,0,18,128,253,241,41,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,25,205,235,92,0,0,20,253,253,58,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,231,245,108,0,0,0,132,253,185,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,121,245,254,254,254,217,254,223,50,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,116,165,233,233,234,180,39,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,03,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,99,91,142,155,246,182,155,155,155,155,131,52,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,138,254,254,254,254,254,254,254,254,254,254,254,252,210,122,33,0,0,0,0,0,0,0,0,0,0,0,0,220,254,254,254,235,189,189,189,189,150,189,205,254,254,254,75,0,0,0,0,0,0,0,0,0,0,0,0,35,74,35,35,25,0,0,0,0,0,0,13,224,254,254,153,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,90,254,254,247,53,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,152,246,254,254,49,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,66,158,254,254,249,103,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,54,251,254,254,254,248,74,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,140,254,254,254,254,254,254,202,125,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,58,181,234,254,254,254,254,254,254,252,140,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,30,50,73,155,253,254,254,254,254,191,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,91,200,254,254,254,254,118,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,192,254,254,254,154,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,141,254,254,254,116,0,0,0,0,0,0,0,0,0,0,0,0,0,25,126,86,0,0,0,0,0,0,3,188,254,254,250,61,0,0,0,0,0,0,0,0,0,0,0,0,24,209,254,15,0,0,0,0,0,23,137,254,254,254,209,0,0,0,0,0,0,0,0,0,0,0,0,0,168,254,254,48,9,0,0,9,127,241,254,254,255,242,63,0,0,0,0,0,0,0,0,0,0,0,0,0,101,254,254,254,205,190,190,205,254,254,254,254,242,67,0,0,0,0,0,0,0,0,0,0,0,0,0,0,33,166,254,254,254,254,254,254,254,254,250,138,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,88,154,116,194,194,154,154,88,49,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,06,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,38,222,225,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,147,234,252,176,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,23,197,253,252,208,19,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,38,178,252,253,117,65,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,57,252,252,253,89,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,38,222,253,253,79,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,131,252,179,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,198,246,220,37,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,79,253,252,135,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,140,253,252,118,0,0,0,0,111,140,140,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,191,255,253,56,0,0,114,113,222,253,253,255,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,76,252,253,223,37,0,48,174,252,252,242,214,253,199,31,0,0,0,0,0,0,0,0,0,0,0,0,13,109,252,228,130,0,38,165,253,233,164,49,63,253,214,31,0,0,0,0,0,0,0,0,0,0,0,0,73,252,252,126,0,23,178,252,240,148,7,44,215,240,148,0,0,0,0,0,0,0,0,0,0,0,0,0,119,252,252,0,0,197,252,252,63,0,57,252,252,140,0,0,0,0,0,0,0,0,0,0,0,0,0,0,135,253,174,0,48,229,253,112,0,38,222,253,112,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,135,252,173,0,48,227,252,158,226,234,201,27,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,57,252,252,57,104,240,252,252,253,233,74,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,51,242,252,253,252,252,252,252,240,148,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,75,189,253,252,252,157,112,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,01,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,168,242,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,228,254,100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,190,254,122,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,83,254,162,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,29,254,248,25,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,29,255,254,103,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,29,254,254,109,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,29,254,254,109,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,29,254,254,109,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,29,255,254,109,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,29,254,254,109,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,29,254,254,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,29,254,254,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,29,254,254,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,29,254,254,35,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,29,254,254,109,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,212,254,109,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,203,254,178,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,155,254,190,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,199,104,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,07,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,115,121,162,253,253,213,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,63,107,170,251,252,252,252,252,250,214,0,0,0,0,0,0,0,0,0,0,0,0,0,0,25,192,226,226,241,252,253,202,252,252,252,252,252,225,0,0,0,0,0,0,0,0,0,0,0,0,0,68,223,252,252,252,252,252,39,19,39,65,224,252,252,183,0,0,0,0,0,0,0,0,0,0,0,0,0,186,252,252,252,245,108,53,0,0,0,150,252,252,220,20,0,0,0,0,0,0,0,0,0,0,0,0,70,242,252,252,222,59,0,0,0,0,0,178,252,252,141,0,0,0,0,0,0,0,0,0,0,0,0,0,185,252,252,194,67,0,0,0,0,17,90,240,252,194,67,0,0,0,0,0,0,0,0,0,0,0,0,0,83,205,190,24,0,0,0,0,0,121,252,252,209,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,77,247,252,248,106,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,252,252,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,134,255,253,253,39,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,183,253,252,107,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,102,252,253,163,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,168,252,252,110,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,41,252,252,217,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,155,252,214,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,165,252,252,106,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,43,179,252,150,39,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,137,252,221,39,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,67,252,79,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,02,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,93,164,211,250,250,194,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,176,253,237,180,180,243,254,214,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,204,236,135,18,0,0,40,242,252,126,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,69,253,167,0,0,0,0,0,130,254,223,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,74,217,79,0,0,0,0,0,46,254,231,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,10,0,0,0,0,0,0,39,254,254,104,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,212,254,141,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,207,254,141,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,215,254,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,39,254,254,56,0,0,20,67,124,39,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,35,98,254,254,208,157,207,225,254,241,160,0,0,0,0,0,0,0,0,0,0,9,31,82,137,203,203,212,254,254,254,254,251,223,223,127,52,33,0,0,0,0,0,0,0,0,0,9,137,214,254,254,254,254,240,228,250,254,254,154,50,0,0,0,0,0,0,0,0,0,0,0,0,0,0,185,254,247,179,146,67,60,28,0,216,254,220,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,222,49,0,0,0,0,4,137,244,232,50,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,206,4,0,0,0,8,179,254,247,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,216,254,158,177,130,96,213,252,199,49,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,131,247,249,249,249,171,72,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,08,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,203,229,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,26,47,47,30,95,254,215,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,154,185,185,223,253,253,133,175,255,188,19,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,110,253,253,253,246,161,228,253,253,254,92,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,245,253,158,137,21,0,48,233,253,233,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,139,254,223,25,0,0,36,170,254,244,106,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,212,253,161,11,26,178,253,236,113,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,155,253,228,80,223,253,253,109,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,141,253,253,253,254,253,154,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,110,253,253,253,254,179,38,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,171,254,254,254,179,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,171,253,253,253,253,178,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,26,123,254,253,203,156,253,200,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,93,253,254,121,13,93,253,158,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,239,253,76,8,32,219,253,126,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,133,254,191,0,5,108,234,254,106,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,132,253,190,5,85,253,236,154,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,153,253,169,192,253,253,77,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,253,253,254,236,129,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17,118,243,191,113,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,06,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34,169,250,40,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,58,242,221,143,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,75,247,143,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,245,184,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,192,200,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,139,247,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,231,183,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,125,243,50,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,195,184,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61,251,41,0,0,0,64,43,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,152,210,7,0,96,237,254,247,107,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,250,84,0,6,223,84,13,87,246,72,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,43,254,80,0,56,151,0,0,0,147,193,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,67,254,41,0,13,19,0,0,0,42,253,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,67,254,13,0,0,0,0,0,0,14,253,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,255,13,0,0,0,0,0,0,77,240,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,67,254,13,0,0,0,0,0,5,181,147,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,25,229,105,0,0,0,0,5,156,213,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,107,246,105,14,49,95,217,209,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,107,246,253,253,240,130,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,09,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,105,227,253,253,122,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,57,199,253,252,252,252,252,159,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,211,252,232,152,73,167,252,215,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,197,252,182,0,0,0,37,235,243,47,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,188,252,103,0,0,0,37,235,229,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,189,253,86,8,43,139,190,211,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,232,252,200,201,252,252,84,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,213,245,252,253,252,242,42,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,56,84,253,252,160,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,253,252,38,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,89,255,253,38,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,253,189,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,41,179,232,84,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,225,252,115,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,153,252,164,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,245,243,79,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,237,245,82,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,148,252,169,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,106,253,196,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,54,228,129,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,04,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,38,190,25,0,0,0,0,0,0,0,0,0,0,0,13,25,10,0,0,0,0,0,0,0,0,0,0,0,112,252,125,4,0,0,0,0,0,0,0,0,0,0,132,252,113,0,0,0,0,0,0,0,0,0,0,0,61,252,252,36,0,0,0,0,0,0,0,0,0,0,132,252,240,79,0,0,0,0,0,0,0,0,0,0,84,252,252,36,0,0,0,0,0,0,0,0,0,0,132,252,252,238,52,0,0,0,0,0,0,0,0,12,198,252,252,122,0,0,0,0,0,0,0,0,0,0,99,252,252,252,181,17,0,0,0,0,0,0,0,49,252,252,252,122,0,0,0,0,0,0,0,0,0,0,3,125,252,252,252,100,0,0,0,0,0,0,0,26,218,252,252,36,0,0,0,0,0,0,0,0,0,0,0,15,216,252,252,207,19,0,0,0,0,0,0,49,252,252,252,36,0,0,0,0,0,0,0,0,0,0,0,0,157,252,252,252,48,0,0,0,6,109,109,194,252,252,252,36,0,0,0,0,0,0,0,0,0,0,0,0,100,252,252,252,105,0,58,116,128,252,252,252,252,252,212,19,0,0,0,0,0,0,0,0,0,0,0,0,0,164,253,253,253,253,253,253,255,253,253,253,253,253,253,99,0,0,0,0,0,0,0,0,0,0,0,0,0,49,252,252,252,252,252,252,253,252,252,252,252,252,252,155,0,0,0,0,0,0,0,0,0,0,0,0,0,49,252,252,252,252,252,252,217,216,141,126,252,252,252,155,0,0,0,0,0,0,0,0,0,0,0,0,0,49,252,252,252,234,204,89,0,0,0,49,252,252,252,155,0,0,0,0,0,0,0,0,0,0,0,0,0,14,158,192,151,45,0,0,0,0,0,49,252,252,252,225,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,49,252,252,252,252,23,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,33,228,252,252,252,157,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,229,252,252,252,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,53,232,252,252,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,90,206,131,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,00,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,253,255,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,205,251,253,205,111,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,189,251,251,253,251,251,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,64,223,244,251,251,211,213,251,251,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,181,251,253,251,251,251,94,96,251,251,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,92,253,253,253,255,253,253,253,95,96,253,253,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,92,236,251,243,220,233,251,251,243,82,96,251,251,31,0,0,0,0,0,0,0,0,0,0,0,0,0,80,253,251,251,188,0,96,251,251,109,0,96,251,251,31,0,0,0,0,0,0,0,0,0,0,0,0,96,240,253,243,188,42,0,96,204,109,4,0,12,197,251,31,0,0,0,0,0,0,0,0,0,0,0,0,221,251,253,121,0,0,0,36,23,0,0,0,0,190,251,31,0,0,0,0,0,0,0,0,0,0,0,48,234,253,0,0,0,0,0,0,0,0,0,0,0,191,253,31,0,0,0,0,0,0,0,0,0,0,44,221,251,251,0,0,0,0,0,0,0,0,0,0,12,197,251,31,0,0,0,0,0,0,0,0,0,0,190,251,251,251,0,0,0,0,0,0,0,0,0,0,96,251,251,31,0,0,0,0,0,0,0,0,0,0,190,251,251,113,0,0,0,0,0,0,0,0,0,40,234,251,219,23,0,0,0,0,0,0,0,0,0,0,190,251,251,94,0,0,0,0,0,0,0,0,40,217,253,231,47,0,0,0,0,0,0,0,0,0,0,0,191,253,253,253,0,0,0,0,0,0,12,174,253,253,219,39,0,0,0,0,0,0,0,0,0,0,0,0,67,236,251,251,191,190,111,72,190,191,197,251,243,121,39,0,0,0,0,0,0,0,0,0,0,0,0,0,0,63,236,251,253,251,251,251,251,253,251,188,94,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,27,129,253,251,251,251,251,229,168,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,95,212,251,211,94,59,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,09,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,144,250,254,166,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,98,241,204,97,126,253,40,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,121,247,133,16,0,50,253,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,103,253,109,0,0,0,120,231,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,234,169,4,0,0,31,220,231,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,215,212,18,0,0,0,195,254,139,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,88,253,63,0,0,0,90,251,242,23,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,183,214,5,0,0,24,233,253,133,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,124,0,0,14,197,253,149,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,67,254,45,0,71,224,254,218,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,246,214,227,248,241,255,111,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,94,193,167,78,226,189,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,145,249,53,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,253,130,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,230,227,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,52,250,104,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,206,223,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,105,253,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,214,207,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,232,106,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,01,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,121,254,136,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,230,253,248,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,118,253,253,225,42,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61,253,253,253,74,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,206,253,253,186,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,211,253,253,239,69,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,253,253,133,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,142,255,253,186,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,149,229,254,207,21,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,54,229,253,254,105,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,152,254,254,213,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,251,253,253,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,29,212,253,250,149,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,36,214,253,253,137,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,75,253,253,253,59,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,93,253,253,189,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,253,253,84,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,43,235,253,126,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,99,248,253,119,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,225,235,49,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,01,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,166,222,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,197,254,218,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,29,249,254,254,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,254,254,174,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,164,254,254,85,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,146,254,254,254,85,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,101,245,254,254,254,85,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,97,248,254,204,254,254,85,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,59,98,151,237,254,254,109,35,254,254,85,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,41,216,254,254,239,153,37,4,32,254,254,85,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,44,44,30,0,0,0,32,254,254,96,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,19,230,254,174,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,197,254,110,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,197,254,85,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,197,253,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,54,54,45,26,84,221,84,21,31,162,78,0,0,0,0,0,0,0,0,0,0,0,0,0,6,41,141,244,254,254,248,236,254,254,254,233,239,254,138,0,0,0,0,0,0,0,0,0,0,0,0,23,167,254,254,254,254,229,228,185,138,138,138,138,138,138,44,0,0,0,0,0,0,0,0,0,0,0,0,113,254,254,254,179,64,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,209,183,97,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,02,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,83,91,143,255,190,91,50,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,49,180,246,253,253,253,253,253,220,154,17,3,0,0,0,0,0,0,0,0,0,0,0,0,0,46,107,178,253,253,253,253,253,253,253,253,253,253,253,126,45,0,0,0,0,0,0,0,0,0,0,0,0,107,253,253,253,253,223,220,220,220,220,245,253,253,253,253,106,0,0,0,0,0,0,0,0,0,0,0,0,107,173,253,229,129,12,0,0,0,0,110,253,253,253,253,106,0,0,0,0,0,0,0,0,0,0,0,0,17,14,40,32,0,0,0,0,0,0,57,253,253,253,242,85,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,139,224,253,253,253,105,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,65,178,253,253,253,253,219,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,97,250,253,253,253,253,127,47,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,46,125,250,253,253,253,245,171,33,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,41,217,253,253,250,245,245,115,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,124,253,253,253,192,105,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,47,220,253,253,188,25,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,107,253,253,253,189,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,41,225,253,253,186,22,0,0,0,0,0,31,42,174,205,205,205,193,58,0,0,0,0,0,0,0,0,48,218,253,253,253,150,59,0,0,128,131,131,222,253,253,253,253,253,94,0,0,0,0,0,0,0,0,0,12,152,253,253,253,253,236,222,222,252,253,253,253,253,253,253,253,253,122,0,0,0,0,0,0,0,0,0,0,7,167,253,253,253,253,253,253,253,253,253,253,253,253,253,124,106,7,0,0,0,0,0,0,0,0,0,0,0,76,188,253,253,253,253,253,253,253,224,57,15,15,15,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,89,121,253,253,151,89,89,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,04,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,30,229,44,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,38,30,0,0,0,0,0,181,223,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,81,242,113,0,0,0,0,57,249,129,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,172,162,0,0,0,0,0,136,253,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,231,138,0,0,0,0,0,162,254,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,26,239,137,0,0,0,0,0,245,244,38,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,222,148,7,0,0,0,0,254,206,3,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,138,253,169,34,0,0,0,254,240,191,69,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17,174,254,255,169,161,195,255,254,113,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,90,173,206,206,223,254,77,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,93,254,23,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,127,254,23,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,204,210,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,253,134,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,99,253,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,149,253,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,47,254,195,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,253,143,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,138,234,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,138,196,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,03,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,80,207,255,254,254,254,97,80,80,44,0,0,0,0,0,0,0,0,0,0,0,0,0,39,158,158,158,168,253,253,253,253,253,253,253,253,253,210,38,0,0,0,0,0,0,0,0,0,0,0,0,226,253,253,253,253,253,253,253,253,253,253,253,253,253,253,241,146,0,0,0,0,0,0,0,0,0,0,0,139,253,253,253,238,113,215,253,253,253,253,253,253,253,253,253,210,43,0,0,0,0,0,0,0,0,0,0,39,34,34,34,30,0,31,148,34,204,235,253,253,253,253,253,236,64,0,0,0,0,0,0,0,0,0,0,91,0,0,0,0,0,0,0,0,35,199,253,253,253,253,244,81,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,33,202,202,216,253,253,253,253,241,89,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,167,253,253,253,253,253,253,253,238,82,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,27,253,253,253,253,253,253,253,253,96,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,201,253,253,253,253,253,253,253,230,49,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,36,87,87,87,248,253,253,253,253,138,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,152,253,253,253,250,59,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,62,238,253,253,253,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,233,253,253,150,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,203,253,253,253,138,0,0,0,0,0,0,0,0,0,0,0,66,211,211,211,59,36,36,21,26,36,151,222,253,253,253,253,138,0,0,0,0,0,0,0,0,0,0,0,80,253,253,253,253,253,253,195,215,253,253,253,253,253,253,157,77,0,0,0,0,0,0,0,0,0,0,0,80,253,253,253,253,253,253,253,253,253,253,253,253,237,235,40,0,0,0,0,0,0,0,0,0,0,0,0,49,156,247,253,253,253,253,253,253,253,253,159,156,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,116,253,253,253,253,253,126,78,78,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,02,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,189,254,255,254,254,254,174,101,31,50,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,242,253,253,253,253,253,253,253,253,216,226,206,200,200,58,0,0,0,0,0,0,0,0,0,0,0,0,101,253,253,253,253,253,253,253,253,253,253,253,253,253,253,227,53,0,0,0,0,0,0,0,0,0,0,0,251,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,249,181,17,0,0,0,0,0,0,0,0,0,122,214,214,158,61,61,113,214,214,250,253,253,253,253,253,253,253,253,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,105,115,115,237,253,253,253,253,253,129,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,24,168,241,253,253,199,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,102,243,253,253,87,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,253,253,253,197,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,22,182,253,253,251,101,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,99,198,253,253,247,129,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,99,253,253,253,253,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,117,224,244,253,253,239,30,23,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,58,169,213,253,253,253,197,79,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,86,253,253,253,242,137,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,216,253,253,253,141,62,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,239,253,253,253,253,253,172,162,162,162,64,8,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,247,253,253,253,253,253,253,253,253,253,253,253,199,66,0,0,0,0,0,0,0,0,0,0,0,0,0,0,95,199,227,253,253,253,253,253,253,253,220,230,201,235,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,52,99,99,174,253,253,253,122,39,57,22,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,07,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,37,37,37,7,0,0,0,0,0,0,0,0,78,0,0,0,0,0,0,0,0,0,0,14,84,182,188,193,254,254,254,124,0,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,22,91,130,193,254,254,204,125,201,254,254,246,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,214,254,255,254,255,173,22,0,98,254,255,152,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,213,245,198,75,31,2,0,117,245,254,221,25,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,36,0,0,0,0,78,246,254,222,33,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,117,243,254,225,37,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,77,249,254,220,73,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,75,242,254,224,37,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,75,251,254,219,33,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,77,242,254,254,40,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,29,209,254,232,83,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,226,254,224,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,63,254,250,58,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,47,244,174,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,30,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,03,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,19,95,143,143,143,143,143,143,143,143,33,0,0,0,0,0,0,0,0,0,0,0,0,0,0,90,149,208,253,253,253,253,253,253,253,253,253,253,217,22,0,0,0,0,0,0,0,0,0,0,0,0,0,255,253,251,222,222,161,140,99,99,99,99,143,253,253,113,0,0,0,0,0,0,0,0,0,0,0,0,0,217,210,86,0,0,0,0,0,0,0,29,161,253,253,82,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,33,203,253,253,174,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,78,232,253,253,253,43,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,138,253,253,253,253,253,192,180,180,128,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,174,253,253,253,253,253,253,253,253,253,169,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,42,61,61,61,61,83,176,79,110,247,253,195,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,59,192,30,0,0,50,203,253,42,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,56,195,57,0,0,0,0,112,253,229,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,172,204,17,0,0,0,0,58,248,253,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,253,184,62,0,0,85,164,253,253,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,144,253,253,243,223,223,250,253,253,96,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,152,253,253,253,253,253,253,152,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,18,122,141,141,141,87,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,08,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,42,154,180,255,176,118,118,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,142,253,253,253,253,253,253,236,103,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,227,253,253,204,177,177,177,243,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,227,253,216,22,0,0,23,227,238,96,21,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,227,253,205,0,0,17,124,253,253,253,170,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,227,253,234,62,18,201,253,253,253,251,90,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,227,253,253,253,253,253,253,253,221,103,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,227,253,253,253,253,253,208,24,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,39,236,253,253,253,251,97,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,69,224,253,253,240,169,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,33,134,253,253,253,253,105,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,51,225,253,253,253,253,253,68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,227,253,253,250,174,253,253,68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,213,253,253,179,63,111,253,253,68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,92,251,201,13,5,0,166,253,253,68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,39,222,253,198,0,0,0,248,253,231,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,54,243,253,124,0,38,133,252,253,150,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,118,253,253,237,179,223,253,253,190,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,44,230,253,253,253,253,253,244,76,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,231,253,253,253,182,66,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,06,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,132,255,225,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,128,246,183,128,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,91,254,134,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,54,235,204,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,158,252,120,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,63,251,165,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,107,254,138,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,182,229,40,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17,232,133,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,133,254,105,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,216,254,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,227,194,3,0,0,0,0,0,0,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,58,254,115,0,0,0,0,25,139,155,242,235,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,58,254,75,0,0,0,83,224,251,155,152,254,211,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,58,254,104,0,0,82,249,217,60,0,37,254,120,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,58,254,72,0,18,247,159,14,0,7,201,254,69,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,35,239,147,1,5,155,72,0,4,193,253,122,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,216,254,97,0,0,13,73,225,254,121,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,79,244,248,226,226,231,254,243,115,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,114,177,254,254,235,152,43,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,09,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,103,254,254,255,184,73,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,85,169,245,253,253,253,253,253,230,97,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,91,233,253,160,89,95,232,253,253,253,125,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,187,253,117,7,0,6,136,242,253,251,112,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,200,253,113,2,76,75,194,253,253,159,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,177,253,239,228,216,253,253,253,173,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,27,200,253,253,253,253,253,253,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,14,15,102,253,253,159,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,41,216,253,190,19,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,30,153,253,248,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,94,253,252,120,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,47,250,252,148,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,25,182,253,203,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,206,253,220,50,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,92,252,244,106,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,226,241,109,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,235,253,137,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,208,253,190,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,30,218,240,146,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,160,167,70,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,00,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,53,255,253,253,253,124,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,180,253,251,251,251,251,145,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,217,241,253,251,251,251,251,253,107,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,251,251,253,251,251,251,251,253,107,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,166,251,251,253,251,96,148,251,253,107,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,73,253,253,253,253,130,0,0,110,253,255,108,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,73,251,251,251,251,0,0,0,109,251,253,107,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,202,251,251,251,225,0,0,6,129,251,253,107,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,150,251,251,251,71,0,0,115,251,251,253,107,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,251,251,173,20,0,0,217,251,251,253,107,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,182,255,253,216,0,0,0,0,218,253,253,182,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,63,221,253,251,215,0,0,0,84,236,251,251,77,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,109,251,253,251,215,0,0,11,160,251,251,96,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,109,251,253,251,137,0,0,150,251,251,251,71,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,109,251,253,251,35,0,130,253,251,251,173,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,110,253,255,253,98,150,253,255,253,164,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,109,251,253,251,251,251,251,253,251,35,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,93,241,253,251,251,251,251,216,112,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,103,253,251,251,251,251,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,124,251,225,71,71,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,05,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,29,141,198,255,198,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,86,141,198,255,255,255,255,170,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,29,141,226,255,255,255,255,198,86,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,170,255,255,170,86,86,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,141,226,170,57,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,86,255,198,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,198,255,141,86,57,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,170,255,198,114,226,170,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,57,198,255,114,29,0,141,255,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,114,255,114,0,0,0,141,255,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,29,0,0,0,0,226,255,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,114,255,141,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,86,0,0,0,0,0,0,0,114,226,226,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,198,86,0,0,0,141,255,255,170,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,226,255,226,170,226,255,255,198,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,86,198,255,255,170,141,57,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,06,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,71,191,122,70,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,147,253,254,191,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,74,242,253,254,253,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,35,239,253,253,254,162,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,146,253,253,253,187,37,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,139,233,253,253,253,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,187,253,253,251,142,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,43,229,253,253,155,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,145,253,253,253,107,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,201,253,253,253,107,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,39,227,254,254,254,176,121,122,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,81,253,253,253,253,253,253,254,242,191,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,81,253,253,253,253,253,253,254,253,253,119,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,237,253,253,253,206,173,254,253,253,253,187,21,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,201,253,253,253,145,32,53,208,253,253,253,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,240,253,253,253,253,218,54,209,253,253,253,199,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,26,196,253,253,253,253,253,255,253,253,253,243,98,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,25,197,253,253,253,253,255,253,253,253,172,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,23,128,241,253,253,255,253,253,199,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,120,190,183,196,120,19,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,00,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,73,253,227,73,21,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,73,251,251,251,174,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,166,228,251,251,251,122,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,62,220,253,251,251,251,251,79,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,79,231,253,251,251,251,251,232,77,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,145,253,253,253,255,253,253,253,253,255,108,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,144,251,251,251,253,168,107,169,251,253,189,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,27,89,236,251,235,215,164,15,6,129,251,253,251,35,0,0,0,0,0,0,0,0,0,0,0,0,0,47,211,253,251,251,142,0,0,0,37,251,251,253,251,35,0,0,0,0,0,0,0,0,0,0,0,0,0,109,251,253,251,251,142,0,0,0,11,148,251,253,251,164,0,0,0,0,0,0,0,0,0,0,0,0,11,150,253,255,211,25,0,0,0,0,11,150,253,255,211,25,0,0,0,0,0,0,0,0,0,0,0,0,140,251,251,253,107,0,0,0,0,0,37,251,251,211,46,0,0,0,0,0,0,0,0,0,0,0,0,0,190,251,251,253,128,5,0,0,0,0,37,251,251,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,115,251,251,253,188,20,0,0,32,109,129,251,173,103,0,0,0,0,0,0,0,0,0,0,0,0,0,0,217,251,251,201,30,0,0,0,73,251,251,251,71,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,166,253,253,255,149,73,150,253,255,253,253,143,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,140,251,251,253,251,251,251,251,253,251,230,61,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,190,251,251,253,251,251,251,251,242,215,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,189,251,253,251,251,251,173,103,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,200,253,251,96,71,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,07,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,29,29,88,89,126,126,126,126,126,121,29,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,168,254,254,254,254,254,254,254,254,254,254,254,176,19,0,0,0,0,0,0,0,0,0,0,0,0,0,0,175,204,197,197,197,197,197,197,197,197,200,254,254,75,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,5,0,0,0,0,0,0,0,0,4,193,254,139,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,254,254,53,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,254,254,53,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,95,254,254,53,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,254,224,16,0,75,83,83,83,83,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,41,49,67,229,254,252,241,241,253,254,242,193,111,0,0,0,0,0,0,0,0,0,0,11,74,112,180,207,247,254,254,254,254,252,240,213,143,69,35,0,0,0,0,0,0,0,0,0,0,0,20,233,254,254,254,254,254,254,225,254,254,80,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,218,254,135,115,22,19,19,30,229,254,19,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,74,91,8,0,0,0,0,0,207,254,19,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,207,254,19,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,193,255,19,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,254,19,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,254,19,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,59,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,06,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,128,255,120,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,33,162,253,253,179,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,174,253,253,248,105,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,38,220,253,253,113,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,23,220,253,253,253,61,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,38,253,253,253,195,23,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,120,253,253,195,23,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,161,253,219,24,0,0,0,16,153,128,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,23,227,253,116,0,0,0,54,203,253,253,224,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,123,253,243,61,0,0,17,179,253,253,253,253,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,155,253,210,0,0,0,162,253,253,196,149,253,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,232,253,173,0,0,0,192,253,229,30,94,253,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,25,253,253,86,0,0,51,242,229,57,0,193,253,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,25,253,253,189,0,20,188,253,136,0,116,247,219,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,217,253,247,69,56,253,253,128,132,247,219,37,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,155,253,253,233,230,253,253,253,253,253,112,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,30,215,253,253,253,253,253,253,253,123,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,30,141,218,253,253,168,106,18,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,33,219,253,61,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,180,192,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,01,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,178,255,105,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,188,253,216,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,202,253,253,23,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,199,253,128,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,42,253,253,158,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,42,253,253,158,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,155,253,253,158,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,160,253,253,147,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,160,253,253,41,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17,225,253,235,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,253,253,176,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,253,253,176,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,253,253,176,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,253,253,176,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,253,253,162,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,46,253,253,59,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,142,253,253,59,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,142,253,253,59,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,142,253,202,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,87,253,139,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,08,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,116,244,114,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,43,47,47,34,0,116,253,206,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,19,164,246,253,252,234,33,116,253,174,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,188,252,252,253,252,252,45,210,234,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,74,244,252,252,147,148,210,22,140,250,230,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,253,205,21,0,64,140,169,233,253,158,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,252,154,9,0,0,68,252,252,178,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,137,252,252,196,48,49,228,252,227,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,177,252,252,232,233,252,227,50,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,137,252,252,253,231,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,81,253,253,255,207,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,51,228,252,231,232,236,44,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,49,228,252,227,48,138,252,152,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,233,252,227,50,0,138,252,208,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,158,253,252,79,0,0,138,252,221,25,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,93,253,255,144,0,0,0,149,253,173,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,166,252,249,75,0,0,43,253,223,25,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,207,252,237,70,70,112,246,253,174,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,165,252,253,252,252,252,252,150,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,51,137,253,252,200,210,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,07,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,26,111,195,230,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28,107,195,254,254,254,244,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,46,167,248,254,222,146,150,254,174,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,65,223,246,254,153,61,10,0,48,254,129,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,85,175,164,80,2,0,0,0,48,254,120,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,182,254,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,207,254,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,207,202,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28,248,170,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,107,254,61,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,166,252,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,191,206,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,191,206,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,246,186,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,91,254,77,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,175,254,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,175,240,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,215,222,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,115,255,152,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,134,255,68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,09,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,193,254,253,254,213,21,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,41,173,252,253,252,253,252,183,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,92,233,244,203,102,20,72,253,142,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,233,212,81,0,21,102,193,171,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,123,254,151,0,0,62,122,254,151,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,203,253,151,0,0,0,183,253,111,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,41,254,213,152,71,173,253,224,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,172,252,253,252,253,252,203,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,82,163,203,214,253,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,252,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,82,254,233,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,41,243,253,70,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,253,203,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,41,233,252,81,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,123,254,233,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,223,253,111,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,173,253,142,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,82,253,212,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,213,255,131,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,51,252,192,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,03,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,163,132,51,51,51,51,51,51,51,21,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,203,253,252,253,252,253,252,253,252,223,203,41,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,103,142,203,203,203,203,203,203,214,253,204,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,51,252,162,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,253,82,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,123,253,130,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,132,253,203,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,123,253,252,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,113,253,224,61,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,152,252,223,102,102,61,41,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,62,142,203,243,254,253,254,253,82,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,71,111,172,252,203,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,253,203,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,152,252,81,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,254,213,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,203,253,130,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,173,253,163,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,163,253,171,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,113,172,132,253,142,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,51,232,151,70,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,09,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,185,255,253,253,230,132,132,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,71,242,252,252,228,231,252,252,252,167,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28,166,252,252,235,92,0,14,142,252,252,150,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,204,252,234,152,44,0,0,48,225,252,180,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,164,252,232,61,0,0,0,6,179,252,252,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,49,252,252,76,0,0,0,44,199,252,252,252,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,89,252,228,32,0,0,99,231,244,220,252,203,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,169,252,207,97,97,206,234,243,32,157,252,145,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,252,252,252,252,252,200,22,11,198,231,41,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,26,131,224,252,252,142,11,0,82,252,204,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,253,253,141,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,82,252,220,36,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,208,252,96,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,253,247,78,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,121,253,199,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,216,244,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,207,252,241,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,33,200,249,252,92,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,85,252,252,142,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,85,252,200,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,08,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,152,203,181,141,58,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,172,247,188,232,234,35,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17,82,101,143,252,245,67,35,225,214,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,132,237,254,254,254,254,254,243,80,210,248,35,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,163,251,211,107,23,36,120,240,246,98,218,143,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,47,251,166,0,0,0,0,0,16,43,189,212,25,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,250,214,14,0,0,0,0,10,148,250,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,137,254,234,103,6,0,0,154,225,85,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,44,195,254,184,24,129,235,35,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,101,240,254,254,66,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,172,254,254,108,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,154,253,98,190,254,104,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,91,254,131,0,13,212,225,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,238,254,29,0,0,55,244,195,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,90,254,219,6,0,0,0,100,254,111,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,127,254,116,0,0,0,0,23,248,126,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,127,254,63,0,0,0,0,49,252,126,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,124,248,29,0,0,0,38,167,254,101,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,29,233,211,115,115,135,254,244,130,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,70,236,254,254,254,173,38,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,05,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,128,255,255,255,255,255,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,255,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,255,255,255,255,255,255,255,191,128,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,191,128,128,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,128,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,191,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,255,255,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,191,128,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,255,255,255,255,255,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,128,255,255,255,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,191,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,255,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,191,255,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,191,64,0,0,64,255,255,255,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,255,255,255,255,255,255,255,255,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,255,255,128,191,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,09,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,209,255,172,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,236,254,247,252,74,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,109,254,237,31,149,240,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,109,254,137,0,126,254,121,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,109,254,137,0,126,254,121,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,109,254,137,0,126,254,156,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,100,254,189,86,210,254,226,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,159,254,254,196,169,254,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,50,50,25,90,254,191,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,182,254,70,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,83,248,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,205,207,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,137,254,25,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,137,254,71,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,137,254,108,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,137,254,108,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,69,220,198,102,0,0,137,254,108,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,137,219,214,252,129,36,162,254,108,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34,5,44,199,254,250,253,235,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,117,242,254,114,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,03,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,63,114,238,253,253,253,255,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,98,225,240,253,252,252,252,252,253,228,225,130,38,0,0,0,0,0,0,0,0,26,6,0,0,0,0,67,240,252,252,253,252,252,252,252,253,252,252,252,112,0,0,0,0,0,0,0,0,101,24,0,0,0,0,28,121,249,239,253,236,204,112,189,253,252,252,217,37,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,25,99,63,112,50,159,252,252,253,252,220,37,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,63,114,238,253,253,253,255,152,110,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,19,101,240,253,252,252,252,204,106,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,166,252,252,253,252,176,55,25,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,181,252,252,253,252,155,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,25,112,112,174,252,252,239,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,126,229,253,253,114,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,53,177,252,253,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,22,227,253,136,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,19,215,253,89,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,107,252,253,167,0,0,0,0,0,0,0,0,0,0,0,0,0,0,92,253,255,27,0,0,63,114,113,222,253,253,204,15,0,0,0,0,0,0,0,0,0,0,0,0,0,51,243,252,253,103,85,178,240,253,252,252,252,252,94,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,155,252,253,252,252,252,252,253,252,239,180,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,26,239,253,252,252,249,223,225,99,65,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,63,174,252,141,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,03,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,56,140,126,175,200,96,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,35,166,238,254,246,242,253,246,254,67,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,182,146,127,70,30,45,36,215,175,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,30,0,0,0,0,0,0,0,207,246,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,251,169,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,215,232,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,190,250,61,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,118,206,254,248,142,108,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,63,223,254,254,254,254,254,254,209,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,52,174,129,95,16,16,16,106,249,125,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,179,239,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,239,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,244,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,100,239,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,234,239,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,140,5,0,0,0,0,0,0,3,150,254,129,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,254,181,38,0,0,0,0,34,188,254,209,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,226,255,223,88,68,128,157,242,254,207,23,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,210,254,254,254,254,255,254,187,49,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,41,129,239,229,179,91,16,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,00,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,46,105,254,254,254,254,255,239,41,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,118,222,254,253,253,253,253,253,253,211,54,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,200,253,253,254,253,253,253,253,253,253,253,116,0,0,0,0,0,0,0,0,0,0,0,0,0,16,160,236,253,253,253,254,253,253,246,229,253,253,253,116,0,0,0,0,0,0,0,0,0,0,0,0,0,99,253,253,253,253,253,254,253,253,213,99,253,253,253,116,0,0,0,0,0,0,0,0,0,0,0,0,25,194,253,253,253,253,131,97,169,253,93,99,253,253,253,116,0,0,0,0,0,0,0,0,0,0,0,0,206,253,253,251,233,127,9,0,18,38,3,15,171,253,253,116,0,0,0,0,0,0,0,0,0,0,0,55,240,253,253,233,0,0,0,0,0,0,0,31,186,253,253,116,0,0,0,0,0,0,0,0,0,0,0,176,253,253,253,127,0,0,0,0,0,0,0,99,253,253,253,116,0,0,0,0,0,0,0,0,0,0,0,176,253,253,131,9,0,0,0,0,0,0,0,99,253,253,253,116,0,0,0,0,0,0,0,0,0,0,119,254,254,232,75,0,0,0,0,0,0,0,0,0,158,254,254,117,0,0,0,0,0,0,0,0,0,0,118,253,253,154,0,0,0,0,0,0,0,0,0,0,156,253,253,116,0,0,0,0,0,0,0,0,0,0,118,253,253,154,0,0,0,0,0,0,0,0,0,0,156,253,253,116,0,0,0,0,0,0,0,0,0,46,222,253,253,154,0,0,0,0,0,0,0,0,7,116,246,253,180,9,0,0,0,0,0,0,0,0,0,0,118,253,253,154,0,0,0,0,0,0,0,0,116,253,253,253,174,0,0,0,0,0,0,0,0,0,0,0,118,253,253,154,0,0,0,0,0,0,0,110,246,253,253,240,67,0,0,0,0,0,0,0,0,0,0,0,118,253,253,238,215,49,20,20,20,66,215,241,253,245,233,64,0,0,0,0,0,0,0,0,0,0,0,0,82,229,253,253,253,253,253,253,253,254,253,253,240,107,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,176,253,253,253,253,253,253,253,254,253,253,108,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,239,253,253,253,253,253,253,254,161,57,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,07,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,109,109,109,109,110,109,129,253,110,109,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,94,217,252,252,252,252,253,252,252,252,253,252,227,134,42,0,0,0,0,0,0,0,0,0,0,0,0,176,252,252,252,252,252,252,253,252,252,252,253,252,252,252,222,139,11,0,0,0,0,0,0,0,0,0,0,217,252,252,252,128,108,108,108,108,108,108,108,232,252,252,253,252,71,0,0,0,0,0,0,0,0,0,0,42,159,252,252,210,31,0,0,0,0,0,0,0,37,252,253,252,71,0,0,0,0,0,0,0,0,0,0,0,5,119,210,252,124,31,0,0,0,0,0,0,37,252,253,231,51,0,0,0,0,0,0,0,0,0,0,0,0,0,31,195,195,31,0,0,0,0,0,0,140,252,253,158,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,42,221,252,191,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,218,253,253,84,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,94,247,252,210,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,212,252,226,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,144,253,252,132,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,99,253,255,222,41,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,201,252,253,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,94,252,252,175,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,217,252,252,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,171,253,253,170,110,78,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,252,252,252,253,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,252,252,252,154,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,252,252,168,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,04,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,42,164,252,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,23,34,0,244,254,112,0,0,0,0,85,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,190,225,0,255,185,13,0,0,0,0,95,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,170,254,197,64,254,59,0,0,0,0,0,95,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,132,254,204,23,112,254,28,0,0,0,0,0,77,0,0,0,0,0,0,0,0,0,0,0,0,0,6,167,254,216,58,24,242,225,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,76,254,254,162,85,138,254,188,0,0,0,48,85,25,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,159,254,254,254,254,254,228,151,151,214,250,254,75,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,79,131,158,254,254,226,225,225,225,190,148,39,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,127,254,148,0,0,0,0,0,0,0,71,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,23,248,201,0,0,0,0,0,0,0,0,36,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,85,254,118,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,189,227,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,114,254,103,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,44,226,175,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,148,203,59,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,26,242,140,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,131,169,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,19,233,65,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,174,109,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,09,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,49,125,235,255,254,122,0,0,0,0,0,13,134,180,57,0,0,0,0,0,0,0,0,0,0,0,0,163,250,253,253,253,253,252,63,0,0,0,16,199,253,253,117,0,0,0,0,0,0,0,0,0,0,52,168,252,253,213,32,12,49,109,3,0,0,0,157,253,253,183,6,0,0,0,0,0,0,0,0,0,0,171,253,103,19,12,0,0,0,0,0,0,0,91,247,253,235,8,0,0,0,0,0,0,0,0,0,0,0,248,253,19,0,0,0,0,0,0,0,21,189,245,253,243,77,0,0,0,0,0,0,0,0,0,0,0,0,201,253,104,9,0,0,0,0,71,122,228,253,253,253,113,0,0,0,0,0,0,0,0,0,0,0,0,0,18,199,253,219,215,215,215,215,245,253,253,253,253,182,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,165,205,253,253,253,191,175,193,253,253,221,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,51,51,51,11,0,59,253,253,110,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,93,253,218,19,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,237,253,111,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,196,253,215,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,206,243,98,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,93,253,194,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,51,235,253,111,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,79,253,246,58,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,155,253,178,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,135,253,68,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,79,253,253,131,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,39,159,152,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,08,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,29,130,130,225,255,255,109,7,116,243,200,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,95,217,253,253,253,253,253,253,253,253,253,248,11,0,0,0,0,0,0,0,0,0,0,0,0,0,27,213,253,253,240,143,111,152,253,253,253,253,194,62,0,0,0,0,0,0,0,0,0,0,0,0,0,27,213,253,215,105,31,0,7,153,253,253,253,244,73,0,0,0,0,0,0,0,0,0,0,0,0,0,0,149,253,230,34,0,0,0,69,253,253,253,253,79,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,149,253,221,13,0,0,28,156,253,253,253,176,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,63,236,253,175,14,0,186,253,253,253,196,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,71,253,253,174,50,199,253,253,237,74,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,92,234,253,253,253,253,237,74,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,77,253,253,253,236,75,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,161,253,253,253,151,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,101,253,253,237,233,158,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,131,253,253,173,38,186,185,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,125,237,253,114,14,0,186,185,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,62,238,253,176,13,0,21,211,185,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,240,253,226,11,0,0,165,253,136,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,126,253,243,69,0,0,97,246,227,36,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,136,253,178,112,112,194,248,253,76,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,136,253,253,253,253,253,253,142,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,253,253,253,235,129,45,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,00,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,56,105,220,254,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,166,233,253,253,253,236,209,209,209,77,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,253,253,253,253,253,254,253,253,253,253,172,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,57,238,253,253,253,253,253,254,253,253,253,253,253,119,0,0,0,0,0,0,0,0,0,0,0,0,0,14,238,253,253,253,253,253,253,179,196,253,253,253,253,238,12,0,0,0,0,0,0,0,0,0,0,0,0,33,253,253,253,253,253,248,134,0,18,83,237,253,253,253,14,0,0,0,0,0,0,0,0,0,0,0,0,164,253,253,253,253,253,128,0,0,0,0,57,119,214,253,94,0,0,0,0,0,0,0,0,0,0,0,57,248,253,253,253,126,14,4,0,0,0,0,0,0,179,253,248,56,0,0,0,0,0,0,0,0,0,0,175,253,253,240,190,28,0,0,0,0,0,0,0,0,179,253,253,173,0,0,0,0,0,0,0,0,0,0,209,253,253,178,0,0,0,0,0,0,0,0,0,0,92,253,253,208,0,0,0,0,0,0,0,0,0,0,211,254,254,179,0,0,0,0,0,0,0,0,0,0,0,135,255,209,0,0,0,0,0,0,0,0,0,0,209,253,253,90,0,0,0,0,0,0,0,0,0,0,0,134,253,208,0,0,0,0,0,0,0,0,0,0,209,253,253,178,0,0,0,0,0,0,0,0,0,0,2,142,253,208,0,0,0,0,0,0,0,0,0,0,209,253,253,214,35,0,0,0,0,0,0,0,0,0,30,253,253,208,0,0,0,0,0,0,0,0,0,0,165,253,253,253,215,36,0,0,0,0,0,0,0,0,163,253,253,164,0,0,0,0,0,0,0,0,0,0,18,172,253,253,253,214,127,7,0,0,0,0,0,72,232,253,171,17,0,0,0,0,0,0,0,0,0,0,0,8,182,253,253,253,253,162,56,0,0,0,64,240,253,253,14,0,0,0,0,0,0,0,0,0,0,0,0,0,7,173,253,253,253,253,245,241,239,239,246,253,225,14,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,59,138,224,253,253,254,253,253,253,240,96,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,104,192,255,253,253,182,73,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,09,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,41,152,233,254,213,82,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,123,243,253,252,253,252,243,81,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,132,253,254,213,142,61,31,233,254,131,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,203,253,212,50,10,0,41,132,252,172,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,153,253,163,0,0,0,0,102,254,253,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,193,252,0,0,0,0,0,142,253,252,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,151,0,0,0,0,132,253,254,233,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,232,183,102,102,183,253,252,253,111,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,203,243,254,253,254,213,152,253,224,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,151,151,91,10,152,252,162,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,163,254,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,203,253,70,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,132,253,142,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,41,253,252,61,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,253,254,91,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,193,252,91,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,123,255,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,82,243,233,50,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,153,253,183,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,152,212,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,04,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,125,254,210,89,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,132,47,0,0,0,0,0,7,243,253,253,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17,95,237,232,5,0,0,0,0,7,253,253,253,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,56,253,253,253,6,0,0,0,0,7,253,253,253,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,56,253,253,253,6,0,0,0,0,7,253,253,253,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,56,253,253,253,6,0,0,0,0,7,253,253,253,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,56,253,253,253,77,0,0,0,0,7,253,253,253,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,116,253,253,253,191,12,0,81,111,189,253,253,253,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,253,253,253,253,230,227,246,253,253,253,253,253,68,0,0,0,0,0,0,0,0,0,0,0,0,0,62,242,253,253,253,253,253,253,253,253,253,253,253,253,54,0,0,0,0,0,0,0,0,0,0,0,0,0,21,182,253,253,253,253,253,253,253,253,253,253,253,237,70,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,107,226,226,226,226,226,125,104,241,253,253,224,172,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,144,253,253,253,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,78,253,253,253,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,137,253,253,253,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,144,253,253,253,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,22,230,253,253,253,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28,253,253,253,253,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,26,244,253,253,201,72,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,70,253,253,97,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,01,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,176,254,224,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,51,253,253,223,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,170,253,253,214,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,131,253,253,217,39,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,209,253,253,134,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,75,240,253,239,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,253,245,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,142,255,253,185,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,62,229,254,242,73,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,54,229,253,254,105,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,152,254,254,213,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,243,253,253,115,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,142,253,253,155,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,30,253,253,232,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,75,253,253,164,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,232,253,189,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,253,253,163,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,43,235,253,253,195,21,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28,231,253,253,184,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,225,253,253,75,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,04,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,53,0,0,0,0,0,0,0,0,0,84,21,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,71,235,213,5,0,0,0,0,0,0,88,248,169,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,234,253,253,6,0,0,0,0,0,0,81,246,238,161,0,0,0,0,0,0,0,0,0,0,0,0,11,201,253,251,147,2,0,0,0,0,0,0,0,220,253,217,13,0,0,0,0,0,0,0,0,0,0,0,158,253,253,157,0,0,0,0,0,0,0,0,0,220,253,253,96,0,0,0,0,0,0,0,0,0,0,50,234,253,235,50,0,0,0,0,0,0,0,0,0,220,253,253,96,0,0,0,0,0,0,0,0,0,51,239,253,253,85,0,0,0,0,0,0,0,0,0,0,160,253,253,229,0,0,0,0,0,0,0,0,0,118,253,253,204,9,0,0,0,0,0,0,0,0,0,0,9,205,253,232,0,0,0,0,0,0,0,0,0,229,253,233,70,0,0,0,0,0,0,0,0,0,0,0,0,199,253,238,32,0,0,0,0,0,0,0,0,254,253,177,0,0,0,0,0,0,0,0,0,0,24,49,49,210,253,253,216,0,0,0,0,0,0,0,0,254,253,227,135,28,28,28,28,77,165,165,165,165,208,253,253,253,253,253,238,0,0,0,0,0,0,0,0,173,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,241,50,0,0,0,0,0,0,0,0,0,166,253,253,253,253,253,253,253,253,253,253,253,192,129,129,227,253,165,0,0,0,0,0,0,0,0,0,0,5,13,118,150,150,150,91,62,113,13,13,13,7,0,0,199,253,96,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,229,253,96,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,199,253,96,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,177,201,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,04,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,115,237,169,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,164,252,230,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,52,254,254,103,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,159,20,0,12,214,254,159,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,243,238,29,0,178,254,159,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,160,254,183,0,37,238,239,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,144,254,235,53,0,227,254,119,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,252,235,119,0,78,254,175,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,83,231,254,178,120,133,244,254,49,0,48,90,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,169,254,254,254,254,254,254,255,244,188,232,113,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,29,95,95,127,228,254,230,189,188,188,160,42,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,239,239,42,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,127,251,113,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,83,254,197,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,174,238,56,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,125,254,162,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,208,247,50,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,236,143,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,238,151,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,205,164,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,06,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,29,218,255,234,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,216,253,253,253,218,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,69,244,253,253,196,253,220,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,33,214,253,253,205,9,176,220,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,196,253,253,230,57,0,17,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,122,248,253,230,58,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,78,248,253,253,144,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,92,253,253,194,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28,204,253,253,144,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,99,253,253,233,57,100,196,196,196,175,57,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,195,253,253,193,181,253,253,253,253,253,228,23,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,228,253,253,253,253,253,184,98,210,253,253,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,228,253,253,253,240,174,20,0,46,253,253,227,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,228,253,253,253,181,0,0,0,66,253,253,139,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,228,253,198,198,91,0,0,34,226,253,249,85,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,228,253,221,28,0,0,7,140,253,253,207,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,151,253,253,168,46,54,174,253,253,220,37,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,43,229,253,253,253,253,253,253,251,80,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,42,227,252,253,253,253,252,135,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,159,152,123,98,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,00,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,176,253,253,124,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,105,176,251,251,251,251,105,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,58,217,241,253,251,251,251,251,243,113,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,63,231,251,251,253,251,251,251,251,253,251,113,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,144,251,251,251,253,251,251,251,251,253,251,215,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,125,253,253,253,253,255,253,253,253,253,255,253,227,42,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,251,251,251,251,253,251,251,251,251,253,251,251,142,0,0,0,0,0,0,0,0,0,0,0,0,0,27,253,251,251,235,241,253,251,246,137,35,98,251,251,236,61,0,0,0,0,0,0,0,0,0,0,0,47,211,253,251,235,82,103,253,251,137,0,0,73,251,251,251,71,0,0,0,0,0,0,0,0,0,0,27,211,251,253,251,86,0,0,72,71,10,0,0,73,251,251,173,20,0,0,0,0,0,0,0,0,0,0,89,253,253,255,253,35,0,0,0,0,0,0,0,73,253,253,253,72,0,0,0,0,0,0,0,0,0,84,236,251,251,253,251,138,0,0,0,0,0,0,0,73,251,251,251,71,0,0,0,0,0,0,0,0,63,236,251,251,251,227,251,246,138,11,0,0,0,16,37,228,251,246,137,10,0,0,0,0,0,0,0,0,73,251,251,251,173,42,142,142,142,41,0,0,0,109,251,253,251,137,0,0,0,0,0,0,0,0,0,0,73,251,251,173,20,0,0,0,0,0,0,0,27,211,251,253,147,10,0,0,0,0,0,0,0,0,0,0,73,253,253,143,0,0,0,0,0,0,21,176,253,253,253,0,0,0,0,0,0,0,0,0,0,0,0,0,73,251,251,205,144,0,0,0,0,0,176,251,251,188,107,0,0,0,0,0,0,0,0,0,0,0,0,0,62,236,251,251,251,218,217,217,217,217,253,230,189,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,83,158,251,251,253,251,251,251,251,253,107,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,251,251,253,251,251,251,122,72,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,04,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,100,237,121,0,0,0,0,0,0,13,48,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,132,235,254,202,0,0,0,0,0,8,179,254,94,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,254,237,48,0,0,0,0,0,10,209,254,94,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,254,112,0,0,0,0,0,0,16,233,251,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,49,240,222,20,0,0,0,0,0,0,118,254,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,19,231,255,120,0,0,0,0,0,0,23,205,254,111,0,0,0,0,0,0,0,0,0,0,0,0,0,6,168,255,241,47,0,0,0,0,0,0,85,254,254,36,0,0,0,0,0,0,0,0,0,0,0,0,0,84,254,254,67,0,0,0,0,0,0,8,200,254,184,13,0,0,0,0,0,0,0,0,0,0,0,0,3,172,254,221,18,0,0,0,0,0,0,120,254,246,48,0,0,0,0,0,0,0,0,0,0,0,0,0,162,254,238,30,0,0,0,0,0,0,0,157,254,212,0,0,0,0,0,0,0,0,0,0,0,0,0,116,253,254,105,0,0,0,0,0,0,0,112,252,254,129,0,0,0,0,0,0,0,0,0,0,0,0,0,198,254,172,1,0,0,0,36,107,146,249,253,254,210,13,0,0,0,0,0,0,0,0,0,0,0,0,0,198,254,134,10,89,96,193,245,254,254,254,254,254,140,0,0,0,0,0,0,0,0,0,0,0,0,0,0,198,254,244,241,254,254,254,254,223,140,252,254,169,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,137,252,254,254,254,218,176,88,0,0,250,254,120,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,25,60,119,26,14,0,0,0,9,251,254,25,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,100,254,194,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,189,254,166,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,203,254,166,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,78,253,124,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,05,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,37,37,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,51,110,160,207,253,253,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,53,136,212,253,254,253,253,253,188,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,63,80,195,255,254,254,222,181,182,181,135,52,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,223,250,253,253,254,182,18,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,133,228,253,247,216,151,69,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,58,253,254,253,116,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,38,227,254,253,227,87,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,33,182,249,254,203,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,67,253,215,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,253,157,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,135,92,0,0,0,0,184,253,125,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,218,46,0,0,27,242,253,54,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,170,254,254,215,228,255,254,133,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,160,206,253,214,140,108,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,36,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,06,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,191,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,191,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,191,255,255,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,191,255,255,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,255,255,255,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,191,255,255,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,191,255,255,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,255,255,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,191,255,255,128,128,128,128,128,128,128,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,255,255,255,255,255,255,255,255,255,255,255,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,128,128,128,128,191,255,255,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,255,255,255,128,64,0,0,0,0,0,255,255,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,0,0,0,0,0,0,0,128,255,255,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,0,0,0,0,0,0,64,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,0,0,0,0,64,128,255,255,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,191,255,255,128,128,128,255,255,255,255,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,255,255,255,255,128,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,01,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,45,131,131,131,101,68,92,44,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,19,170,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,29,112,89,0,40,222,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,120,254,251,127,40,222,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,197,254,254,91,40,222,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,247,254,236,50,40,107,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,254,254,91,0,6,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,203,254,254,71,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,23,218,254,254,71,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,113,254,255,239,53,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,210,254,254,195,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,62,242,254,241,88,0,0,0,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,86,254,254,189,0,0,0,28,104,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,106,254,254,168,0,0,0,40,91,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,216,254,245,51,0,0,0,35,80,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,216,254,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,239,254,52,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,166,254,210,23,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,223,252,104,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,223,169,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,00,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,29,170,255,255,141,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,29,198,255,255,255,226,255,86,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,141,255,255,170,29,0,86,255,255,141,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,29,226,255,198,57,0,0,0,0,226,255,255,226,114,0,0,0,0,0,0,0,0,0,0,0,0,0,29,255,255,114,0,0,0,0,0,0,141,170,114,255,255,141,0,0,0,0,0,0,0,0,0,0,0,0,226,255,170,0,0,0,0,0,0,0,29,57,0,0,141,255,226,0,0,0,0,0,0,0,0,0,0,57,255,170,0,0,0,0,0,0,0,0,0,0,0,0,0,114,255,198,0,0,0,0,0,0,0,0,0,226,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,170,255,57,0,0,0,0,0,0,0,0,255,226,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,170,0,0,0,0,0,0,0,0,255,170,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,114,198,0,0,0,0,0,0,0,0,255,226,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,86,255,0,0,0,0,0,0,0,0,198,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,86,255,0,0,0,0,0,0,0,0,114,255,57,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,86,255,0,0,0,0,0,0,0,0,29,255,226,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,141,255,0,0,0,0,0,0,0,0,0,170,255,170,0,0,0,0,0,0,0,0,0,0,0,0,0,0,226,198,0,0,0,0,0,0,0,0,0,29,226,255,170,0,0,0,0,0,0,0,0,0,0,0,0,29,255,114,0,0,0,0,0,0,0,0,0,0,29,226,255,141,0,0,0,0,0,0,0,0,0,0,57,226,226,0,0,0,0,0,0,0,0,0,0,0,0,0,141,255,255,170,86,0,0,0,0,29,86,226,255,226,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,86,198,255,255,255,255,255,255,255,255,255,141,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,29,114,170,170,170,170,170,86,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,00,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,203,254,252,252,252,214,51,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,62,221,252,250,250,250,252,250,160,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,62,211,250,252,250,250,250,252,250,250,49,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,41,221,250,250,252,250,250,250,252,250,128,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,252,252,252,254,252,252,252,254,252,252,90,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,150,190,250,250,252,250,250,169,171,250,250,250,82,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,191,250,250,252,189,100,20,172,250,250,250,80,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,213,250,250,250,212,29,0,0,252,250,250,250,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,92,252,252,252,0,0,0,0,51,252,252,252,203,0,0,0,0,0,0,0,0,0,0,0,0,0,0,82,252,250,250,169,0,0,0,0,132,250,250,250,121,0,0,0,0,0,0,0,0,0,0,0,0,0,92,231,252,250,159,20,0,0,0,0,252,250,250,250,0,0,0,0,0,0,0,0,0,0,0,0,0,0,30,211,252,250,221,40,0,0,0,0,90,250,250,250,163,0,0,0,0,0,0,0,0,0,0,0,0,0,31,213,254,232,80,0,0,0,0,0,92,252,252,212,163,0,0,0,0,0,0,0,0,0,0,0,0,0,151,250,252,149,0,0,0,0,0,0,252,250,250,49,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,221,252,210,60,0,0,0,0,0,252,250,250,49,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,202,252,250,221,40,0,0,123,202,252,250,250,49,0,0,0,0,0,0,0,0,0,0,0,0,0,0,123,243,255,252,252,252,254,252,252,252,254,252,100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,121,171,250,250,250,252,250,250,250,252,250,100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,160,250,250,252,250,250,250,252,189,40,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,170,250,252,250,128,49,49,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,01,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,191,70,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,243,253,249,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,30,223,253,253,247,41,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,73,238,253,253,253,242,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,73,236,253,253,253,253,242,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,182,253,253,191,247,253,149,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,141,253,143,86,249,253,122,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,36,7,14,233,253,122,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,230,253,122,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,230,253,122,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,231,255,123,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,230,253,52,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61,245,253,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,98,253,253,0,0,0,0,35,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,98,253,253,0,0,9,142,233,146,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,190,253,253,128,7,99,253,253,180,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,29,230,253,253,252,210,253,253,253,140,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28,207,253,253,253,254,253,253,235,70,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,126,253,253,253,253,254,253,168,19,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,79,253,253,201,190,132,63,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,07,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,19,133,133,156,254,254,214,83,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,134,197,254,253,253,253,253,253,253,156,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28,78,194,253,253,254,250,217,217,226,253,253,156,0,0,0,0,0,0,0,0,0,0,0,0,0,10,135,234,253,253,253,253,246,76,0,10,98,253,253,133,0,0,0,0,0,0,0,0,0,0,0,0,9,155,253,253,253,224,198,134,69,0,0,78,253,253,192,10,0,0,0,0,0,0,0,0,0,0,0,0,9,140,180,88,60,32,6,0,0,0,63,234,253,163,40,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,189,253,163,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,221,253,211,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,65,253,238,59,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,59,249,242,56,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,249,249,52,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,232,253,161,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,53,194,253,178,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,166,253,232,49,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,82,240,230,52,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,211,229,54,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17,126,253,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,49,253,144,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,195,227,34,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,152,230,43,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,01,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,26,240,72,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,25,238,208,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,209,226,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,209,254,43,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,175,254,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,63,254,204,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,107,254,204,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,88,254,204,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,254,204,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,126,254,204,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,126,254,189,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,169,254,121,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,209,254,193,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,209,254,111,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,22,235,254,37,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,137,254,227,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,205,255,185,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,205,254,125,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,205,254,125,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,111,212,43,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,06,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,134,255,113,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,86,214,253,112,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,138,253,163,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,19,198,253,49,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,186,253,208,19,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,54,229,243,92,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,33,228,253,164,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,135,253,186,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,59,230,253,68,0,0,0,20,56,35,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,188,253,182,18,17,63,162,209,253,227,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,71,253,215,18,17,179,253,253,253,253,253,148,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,25,233,253,107,0,159,253,253,193,136,101,244,148,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,71,253,178,16,85,240,231,136,10,0,76,248,148,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,189,253,86,42,241,253,185,0,0,0,94,219,37,0,0,0,0,0,0,0,0,0,0,0,0,0,0,71,253,240,71,185,253,154,27,0,0,33,213,109,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,149,253,216,93,253,231,41,0,0,81,213,253,91,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,149,253,216,117,253,221,106,106,142,249,253,214,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34,253,251,157,214,253,253,253,253,253,118,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,159,253,253,253,253,253,253,219,35,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34,253,253,253,253,223,96,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,03,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,87,159,253,159,243,191,61,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,74,253,252,252,252,252,253,236,65,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,26,205,253,252,252,252,252,253,252,202,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,59,160,203,160,160,160,108,253,252,252,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,53,253,252,252,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,231,255,253,173,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,47,140,244,253,252,102,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,130,252,252,252,253,252,252,77,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,62,236,252,252,64,211,252,252,194,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,76,211,221,43,2,86,252,252,252,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,100,253,253,148,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,47,252,252,252,74,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34,234,252,252,199,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,90,252,252,178,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,122,252,252,126,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,87,154,0,0,0,0,36,222,253,243,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,138,236,78,9,22,57,219,252,235,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,138,252,252,196,215,253,252,252,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,97,252,252,252,252,253,252,101,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,211,252,252,200,137,64,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,00,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,62,91,213,255,228,91,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,70,230,253,253,253,253,253,152,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,246,253,253,253,253,253,253,253,106,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,247,253,253,253,253,253,253,208,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,156,253,253,253,253,253,253,253,195,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,88,238,253,253,253,221,253,253,253,195,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,230,253,253,253,198,40,177,253,253,195,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,56,156,251,253,189,182,15,0,86,240,253,210,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,213,253,253,156,3,0,0,0,0,205,253,253,106,0,0,0,0,0,0,0,0,0,0,0,0,0,0,121,252,253,135,3,0,0,0,0,0,46,253,253,106,0,0,0,0,0,0,0,0,0,0,0,0,0,28,212,253,248,23,0,0,0,0,0,0,42,253,253,106,0,0,0,0,0,0,0,0,0,0,0,0,0,197,253,234,70,0,0,0,0,0,0,0,42,253,253,106,0,0,0,0,0,0,0,0,0,0,0,0,11,202,253,187,0,0,0,0,0,0,0,0,58,253,210,27,0,0,0,0,0,0,0,0,0,0,0,0,107,253,253,40,0,0,0,0,0,0,0,53,227,253,195,0,0,0,0,0,0,0,0,0,0,0,0,0,107,253,253,40,0,0,0,0,0,0,47,227,253,231,58,0,0,0,0,0,0,0,0,0,0,0,0,0,107,253,253,40,0,0,0,0,5,131,222,253,231,59,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,204,253,226,222,73,58,58,170,253,253,227,58,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,197,253,253,253,253,253,253,253,253,238,58,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,33,179,241,253,253,253,253,250,116,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,75,179,253,151,89,86,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,02,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34,80,80,80,58,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,138,159,159,199,254,254,254,228,66,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,39,62,160,252,254,254,254,254,233,233,254,245,67,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,212,254,254,254,186,114,114,114,74,75,251,254,201,0,0,0,0,0,0,0,0,0,0,0,0,0,0,233,254,244,210,58,18,0,0,0,0,30,249,254,201,0,0,0,0,0,0,0,0,0,0,0,0,0,0,131,131,100,0,0,0,0,0,0,0,168,254,254,201,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,71,237,254,254,61,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,157,254,254,192,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,140,254,254,203,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,107,254,254,254,123,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,204,254,196,87,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,35,212,254,252,121,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,124,254,192,101,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,77,242,249,118,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,221,254,228,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,196,254,250,124,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,254,254,196,116,76,0,112,48,0,0,16,116,116,116,116,0,0,0,0,0,0,0,0,0,0,0,0,11,154,254,254,254,234,194,253,219,194,194,203,254,241,237,237,0,0,0,0,0,0,0,0,0,0,0,0,0,77,157,198,254,254,254,254,254,254,254,173,157,38,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,33,78,78,78,78,78,78,78,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,01,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,42,228,253,253,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,144,251,251,251,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,89,236,251,235,215,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,79,253,251,251,142,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,180,253,251,251,142,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,202,255,253,216,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,109,251,253,251,112,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,129,251,253,127,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,251,251,253,107,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,166,251,251,201,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,42,228,253,253,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,144,251,251,147,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,63,236,251,251,71,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,150,251,251,204,41,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,251,251,142,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,253,164,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,105,253,251,35,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,180,253,251,35,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,180,253,251,35,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,180,253,251,35,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,01,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,62,254,213,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,253,252,102,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,254,253,254,50,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,253,252,253,50,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,254,253,254,50,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,142,253,252,253,50,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,51,253,254,253,224,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,132,252,253,252,162,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,173,253,254,253,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,82,253,252,253,252,61,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,203,254,253,254,233,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,41,243,253,252,253,111,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,132,253,254,253,203,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,41,253,252,253,252,40,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,213,254,253,254,151,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,92,252,253,252,192,50,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,214,253,255,253,41,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,142,253,252,253,171,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,113,253,255,253,203,40,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,30,131,233,111,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,07,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,129,253,192,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,94,217,218,227,252,252,253,159,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,37,182,201,252,252,253,252,252,252,253,76,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,120,252,253,252,252,252,253,252,252,252,253,35,0,0,0,0,0,0,0,0,0,0,0,0,0,63,109,232,252,252,253,252,174,143,47,232,252,252,144,0,0,0,0,0,0,0,0,0,0,0,0,0,73,237,252,252,252,210,180,138,10,0,233,252,252,210,20,0,0,0,0,0,0,0,0,0,0,0,0,0,72,236,215,91,71,31,0,0,0,21,253,252,246,92,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,62,0,0,0,0,0,0,21,206,253,210,92,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,182,253,208,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,105,242,252,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,79,242,252,231,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,191,252,231,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,191,255,222,41,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,78,252,253,138,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,156,232,252,175,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,63,237,252,252,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,253,253,217,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,125,252,231,71,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,27,221,252,76,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,252,189,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,09,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,138,201,253,255,232,107,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,219,252,252,210,207,214,252,119,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,138,252,233,89,6,0,13,202,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,43,253,252,183,0,0,0,0,159,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,116,253,252,79,0,0,0,0,63,43,220,106,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,116,255,232,38,0,0,0,0,7,212,253,231,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,42,253,252,154,30,0,0,9,155,252,252,230,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,222,252,252,227,184,132,197,252,252,252,199,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,25,119,160,236,252,253,252,227,160,244,116,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,158,0,0,61,85,75,22,16,0,178,220,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,128,11,0,0,0,0,0,0,0,0,231,231,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,93,252,116,0,0,0,0,0,0,0,0,157,230,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,93,252,116,0,0,0,0,0,0,0,0,116,237,25,0,0,0,0,0,0,0,0,0,0,0,0,0,0,134,252,63,0,0,0,0,0,0,0,0,116,234,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,103,252,116,0,0,0,0,0,0,0,0,220,241,42,0,0,0,0,0,0,0,0,0,0,0,0,0,0,93,253,244,61,0,0,0,0,0,38,233,253,221,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34,217,253,236,129,9,0,0,30,155,252,231,42,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,253,252,252,196,80,185,228,252,227,131,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,56,219,252,252,252,253,252,252,119,21,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,54,179,147,190,117,22,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,00,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28,195,254,254,254,254,254,255,61,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,191,253,253,253,253,253,253,253,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,26,190,253,253,253,253,240,191,242,253,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,187,253,253,253,253,253,200,0,211,253,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,22,66,253,253,253,253,241,209,44,23,218,253,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,124,253,253,253,253,253,182,0,0,131,253,253,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,38,217,253,253,244,111,37,0,0,131,253,253,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,124,253,253,253,165,0,0,0,22,182,253,253,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,124,253,253,240,45,0,0,0,53,253,253,249,58,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,168,253,216,45,0,0,0,0,53,253,253,138,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,159,253,253,147,0,0,0,0,0,53,253,253,138,0,0,0,0,0,0,0,0,0,0,0,0,0,0,136,252,253,227,5,0,0,0,0,0,53,253,243,101,0,0,0,0,0,0,0,0,0,0,0,0,0,0,140,253,253,124,0,0,0,0,0,0,156,253,218,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,164,253,142,5,0,0,0,0,0,32,233,253,218,0,0,0,0,0,0,0,0,0,0,0,0,0,0,62,253,253,130,0,0,0,0,0,37,203,253,253,127,0,0,0,0,0,0,0,0,0,0,0,0,0,0,62,253,253,147,36,36,36,36,151,222,253,245,127,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34,202,253,253,253,253,253,253,253,253,253,200,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,140,253,253,253,253,253,253,253,248,235,65,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,87,173,253,253,253,253,253,253,182,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,78,96,253,253,253,137,56,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,02,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,78,156,209,165,43,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,116,157,252,252,252,252,253,205,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,211,253,252,252,252,252,253,252,225,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,211,253,252,252,252,252,227,252,252,196,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,211,253,252,252,226,59,42,182,252,252,129,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,212,254,222,106,0,0,0,36,224,253,253,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,53,63,16,0,0,0,0,0,48,252,252,141,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,210,252,215,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,99,252,253,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,218,253,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,212,255,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,85,85,85,85,85,57,0,0,211,253,107,0,0,0,0,0,0,0,0,0,0,0,0,0,2,92,127,192,252,252,252,252,253,246,232,232,249,253,63,0,0,0,0,0,0,0,0,0,0,0,0,0,92,252,252,253,252,252,252,252,253,252,252,252,252,253,133,0,0,0,0,0,0,0,0,0,0,0,0,0,215,252,252,253,252,252,252,252,253,252,252,252,252,253,203,9,0,0,0,0,0,0,0,0,0,0,0,85,253,253,253,194,106,53,0,0,62,120,156,253,253,255,253,188,0,0,0,0,0,0,0,0,0,0,0,85,252,252,252,129,57,71,0,71,146,211,252,252,252,160,231,231,0,0,0,0,0,0,0,0,0,0,0,85,252,252,252,253,246,249,232,249,253,252,252,252,244,53,51,72,0,0,0,0,0,0,0,0,0,0,0,64,247,252,252,253,252,252,252,252,253,252,252,236,66,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,56,252,252,253,252,252,252,252,253,252,235,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,06,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,255,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,255,255,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,191,255,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,191,255,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,255,255,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,255,255,64,0,0,0,64,128,128,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,191,255,191,0,0,0,128,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,64,0,0,128,255,255,255,128,255,255,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,255,128,0,0,128,255,255,191,0,0,128,255,128,0,0,0,0,0,0,0,0,0,0,0,0,0,64,255,255,64,0,0,191,255,191,0,0,0,64,255,128,0,0,0,0,0,0,0,0,0,0,0,0,0,128,255,191,0,0,64,255,255,0,0,0,0,64,255,64,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,64,0,0,128,255,191,0,0,0,0,191,255,0,0,0,0,0,0,0,0,0,0,0,0,0,128,255,255,0,0,0,128,255,64,0,0,64,255,255,128,0,0,0,0,0,0,0,0,0,0,0,0,0,128,255,255,0,0,0,0,255,255,128,191,255,255,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,255,255,128,128,128,128,255,255,255,255,255,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,191,128,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,255,255,255,255,255,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,07,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,214,253,152,152,152,152,152,152,152,152,254,253,254,172,152,71,0,0,0,0,0,0,0,0,0,0,0,61,213,252,253,252,253,252,253,252,253,252,213,252,253,252,253,252,82,0,0,0,0,0,0,0,0,0,0,0,0,41,102,102,102,102,82,0,0,0,0,0,0,0,52,253,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,132,252,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,253,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,41,253,252,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,163,254,131,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,41,243,253,50,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,113,253,224,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,41,233,252,81,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,123,254,233,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,223,253,111,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,152,253,224,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,233,252,162,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,254,253,41,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,183,253,171,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,213,254,131,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,51,252,233,30,41,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,51,253,254,213,183,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,232,253,212,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,08,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,77,211,254,254,255,254,133,8,0,36,98,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,157,253,253,243,173,100,250,123,7,147,186,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,253,225,82,57,0,0,249,244,187,240,42,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,183,236,54,0,0,0,0,249,253,253,188,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,243,238,33,0,0,34,197,252,253,253,147,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,193,253,199,0,0,200,253,253,253,211,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,251,252,160,215,252,253,245,61,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,131,253,253,253,253,243,57,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,44,253,253,253,218,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,30,168,244,236,253,124,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,215,199,49,87,253,187,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34,144,205,70,0,10,204,253,67,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,89,253,129,0,0,0,88,253,141,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,43,229,248,13,0,0,0,78,253,141,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,189,253,133,0,0,0,0,91,242,125,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,201,195,10,0,0,0,0,195,158,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,253,134,0,0,0,11,148,237,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,198,253,86,0,41,84,111,253,153,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,22,221,253,241,219,236,253,237,126,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,223,253,253,195,69,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,03,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,7,77,142,254,254,254,254,254,163,98,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,253,253,252,241,241,243,253,253,253,253,219,33,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,236,229,111,100,0,0,19,111,111,141,249,253,172,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,56,228,253,160,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,141,253,253,208,19,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,129,253,253,253,226,161,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,144,231,210,243,253,253,224,123,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,0,61,117,219,253,253,183,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,117,245,253,135,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,104,246,253,169,34,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,54,235,253,167,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,248,253,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,196,253,106,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,253,129,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,253,175,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,253,144,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,78,26,0,0,0,0,0,0,163,253,78,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28,219,206,112,112,112,112,112,224,252,253,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,195,253,253,253,253,253,253,201,78,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,5,5,5,51,129,17,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,09,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,39,125,225,254,254,255,254,170,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,43,101,250,253,253,253,253,253,253,253,250,161,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,94,246,247,253,253,196,227,116,56,253,253,253,234,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,152,253,253,180,19,9,15,0,4,55,253,253,166,0,0,0,0,0,0,0,0,0,0,0,0,0,0,41,238,253,253,125,0,0,0,21,189,232,253,253,117,0,0,0,0,0,0,0,0,0,0,0,0,0,0,219,253,220,165,34,92,21,52,228,253,253,241,82,13,0,0,0,0,0,0,0,0,0,0,0,0,0,38,241,170,25,20,12,75,39,59,253,253,253,110,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,253,236,67,0,0,0,0,100,253,253,221,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,23,239,253,235,202,135,99,173,240,253,253,110,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,54,200,253,253,253,253,253,253,253,241,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,25,112,244,253,237,142,253,253,111,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61,71,51,159,253,188,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,150,236,212,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,99,253,243,98,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,237,253,105,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,219,253,195,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,171,253,207,21,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,105,253,198,76,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,242,253,38,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,235,253,206,19,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,00,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,76,202,254,255,163,37,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,182,253,253,253,253,253,253,23,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,179,253,253,212,91,218,253,253,179,109,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,105,253,253,160,35,156,253,253,253,253,250,113,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,19,212,253,253,88,121,253,233,128,91,245,253,248,114,0,0,0,0,0,0,0,0,0,0,0,0,0,0,104,253,253,110,2,142,253,90,0,0,26,199,253,248,63,0,0,0,0,0,0,0,0,0,0,0,0,1,173,253,253,29,0,84,228,39,0,0,0,72,251,253,215,29,0,0,0,0,0,0,0,0,0,0,0,36,253,253,203,13,0,0,0,0,0,0,0,0,82,253,253,170,0,0,0,0,0,0,0,0,0,0,0,36,253,253,164,0,0,0,0,0,0,0,0,0,11,198,253,184,6,0,0,0,0,0,0,0,0,0,0,36,253,253,82,0,0,0,0,0,0,0,0,0,0,138,253,253,35,0,0,0,0,0,0,0,0,0,0,128,253,253,47,0,0,0,0,0,0,0,0,0,0,48,253,253,35,0,0,0,0,0,0,0,0,0,0,154,253,253,47,0,0,0,0,0,0,0,0,0,0,48,253,253,35,0,0,0,0,0,0,0,0,0,0,102,253,253,99,0,0,0,0,0,0,0,0,0,0,48,253,253,35,0,0,0,0,0,0,0,0,0,0,36,253,253,164,0,0,0,0,0,0,0,0,0,16,208,253,211,17,0,0,0,0,0,0,0,0,0,0,32,244,253,175,4,0,0,0,0,0,0,0,0,44,253,253,156,0,0,0,0,0,0,0,0,0,0,0,0,171,253,253,29,0,0,0,0,0,0,0,30,217,253,188,19,0,0,0,0,0,0,0,0,0,0,0,0,171,253,253,59,0,0,0,0,0,0,60,217,253,253,70,0,0,0,0,0,0,0,0,0,0,0,0,0,78,253,253,231,48,0,0,0,26,128,249,253,244,94,15,0,0,0,0,0,0,0,0,0,0,0,0,0,8,151,253,253,234,101,121,219,229,253,253,201,80,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,38,232,253,253,253,253,253,253,253,201,66,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,04,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,232,253,253,95,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,86,46,0,0,0,0,0,0,91,246,252,232,57,0,0,0,0,0,0,0,0,0,0,0,0,0,0,103,252,187,13,0,0,0,0,22,219,252,252,175,0,0,0,0,0,0,0,0,0,10,0,0,0,0,8,181,252,246,30,0,0,0,0,65,252,237,197,64,0,0,0,0,0,0,0,0,0,87,0,0,0,13,172,252,252,104,0,0,0,0,5,184,252,67,103,0,0,0,0,0,0,0,0,0,0,0,0,0,8,172,252,248,145,14,0,0,0,0,109,252,183,137,64,0,0,0,0,0,0,0,0,0,0,0,0,5,224,252,248,134,0,0,0,0,0,53,238,252,245,86,0,0,0,0,0,0,0,0,0,0,0,0,12,174,252,223,88,0,0,0,0,0,0,209,252,252,179,9,0,0,0,0,0,0,0,0,0,0,0,11,171,252,246,61,0,0,0,0,0,0,83,241,252,211,14,0,0,0,0,0,0,0,0,0,0,0,0,129,252,252,249,220,220,215,111,192,220,221,243,252,252,149,0,0,0,0,0,0,0,0,0,0,0,0,0,144,253,253,253,253,253,253,253,253,253,255,253,226,153,0,0,0,0,0,0,0,0,0,0,0,0,0,0,44,77,77,77,77,77,77,77,77,153,253,235,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,74,214,240,114,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,221,243,57,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,180,252,119,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,136,252,153,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,136,251,226,34,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,123,252,246,39,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,165,252,127,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,165,175,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,06,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,25,214,225,90,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,145,212,253,253,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,106,253,253,246,188,23,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,164,254,253,223,108,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,236,253,252,124,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,100,217,253,218,116,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,158,175,225,253,92,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,217,241,248,114,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,201,253,253,114,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,107,253,253,213,19,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,170,254,254,169,0,0,0,0,0,2,13,100,133,89,0,0,0,0,0,0,0,0,0,0,0,0,0,18,210,253,253,100,0,0,0,19,76,116,253,253,253,176,4,0,0,0,0,0,0,0,0,0,0,0,0,41,222,253,208,18,0,0,93,209,232,217,224,253,253,241,31,0,0,0,0,0,0,0,0,0,0,0,0,157,253,253,229,32,0,154,250,246,36,0,49,253,253,168,0,0,0,0,0,0,0,0,0,0,0,0,0,128,253,253,253,195,125,247,166,69,0,0,37,236,253,168,0,0,0,0,0,0,0,0,0,0,0,0,0,37,253,253,253,253,253,135,32,0,7,130,73,202,253,133,0,0,0,0,0,0,0,0,0,0,0,0,0,7,185,253,253,253,253,64,0,10,210,253,253,253,153,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,66,253,253,253,253,238,218,221,253,253,235,156,37,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,111,228,253,253,253,253,254,253,168,19,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,110,178,253,253,249,63,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,07,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,121,121,240,253,218,121,121,44,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17,107,184,240,253,252,252,252,252,252,252,219,0,0,0,0,0,0,0,0,0,0,0,0,0,0,75,122,230,252,252,252,253,252,252,252,252,252,252,239,56,0,0,0,0,0,0,0,0,0,0,77,129,213,244,252,252,252,252,252,253,252,252,209,252,252,252,225,0,0,0,0,0,0,0,0,0,0,0,240,252,252,252,252,252,252,213,185,53,53,53,89,252,252,252,120,0,0,0,0,0,0,0,0,0,0,0,240,232,198,93,164,108,66,28,0,0,0,0,81,252,252,222,24,0,0,0,0,0,0,0,0,0,0,0,76,50,0,0,0,0,0,0,0,0,0,0,171,252,243,108,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,144,238,252,115,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,70,241,248,133,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,121,252,252,172,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,255,253,209,21,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,246,253,207,21,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,172,252,209,92,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,168,252,252,92,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,43,208,252,241,53,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,166,252,204,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,166,243,191,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,168,231,177,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,172,241,50,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,177,202,19,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,04,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,196,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,49,0,0,0,0,0,0,34,244,98,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,89,135,0,0,0,0,0,0,40,253,98,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,171,150,0,0,0,0,0,0,40,253,98,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,233,0,0,0,0,0,0,77,253,98,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,136,0,0,0,0,0,0,77,254,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,135,0,0,0,0,0,0,123,253,98,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,135,0,0,0,0,0,0,136,253,98,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,254,135,0,0,0,0,0,0,136,237,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,98,254,135,0,0,38,99,98,98,219,155,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,196,255,208,186,254,254,255,254,254,254,254,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,105,254,253,239,180,135,39,39,39,237,170,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,137,92,24,0,0,0,0,0,234,155,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,237,155,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,79,253,155,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,242,155,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61,248,155,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,234,155,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,234,155,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,196,155,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,06,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,236,255,124,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,53,231,253,253,107,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,193,253,253,230,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,156,253,253,149,36,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,253,253,190,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,175,253,253,72,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,123,253,253,138,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,244,253,230,34,0,9,24,23,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,181,253,249,123,0,69,195,253,249,146,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,231,253,202,0,70,236,253,253,253,253,170,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,22,139,253,213,26,13,200,253,253,183,252,253,220,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,253,253,129,0,86,253,253,129,4,105,253,253,70,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,253,253,77,22,245,253,183,4,0,2,105,253,70,0,0,0,0,0,0,0,0,0,0,0,0,0,0,132,253,253,11,24,253,253,116,0,0,1,150,253,70,0,0,0,0,0,0,0,0,0,0,0,0,0,0,189,253,241,10,24,253,253,59,0,0,82,253,212,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,189,253,147,0,24,253,253,150,30,44,208,212,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,189,253,174,3,7,185,253,253,227,247,184,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,150,253,253,145,95,234,253,253,253,126,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,253,253,253,253,253,253,253,169,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,114,240,253,253,234,135,44,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,08,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,139,212,253,159,86,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34,89,203,253,252,252,252,252,74,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,49,184,234,252,252,184,110,100,208,252,199,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,95,233,252,252,176,56,0,0,0,17,234,249,75,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,220,253,178,54,4,0,0,0,0,43,240,243,50,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,221,255,180,55,5,0,0,0,7,160,253,168,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,116,253,252,252,67,0,0,0,91,252,231,42,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,190,252,252,185,38,0,119,234,252,54,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,177,252,252,179,155,236,227,119,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,26,221,252,252,253,252,130,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,229,253,255,144,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,66,236,252,253,92,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,66,234,252,252,253,92,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,19,236,252,252,252,253,92,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,53,181,252,168,43,232,253,92,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,179,255,218,32,93,253,252,84,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,81,244,239,33,0,114,252,209,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,207,252,237,70,153,240,252,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,207,252,253,252,252,252,210,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61,242,253,252,168,96,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,00,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,254,255,254,107,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,176,230,253,253,253,212,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28,197,253,253,253,253,253,229,107,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,194,253,253,253,253,253,253,253,253,53,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,69,241,253,253,253,253,241,186,253,253,195,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,161,253,253,253,246,40,57,231,253,253,195,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,140,253,253,253,253,154,0,25,253,253,253,195,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,213,253,253,253,135,8,0,3,128,253,253,195,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,77,238,253,253,253,7,0,0,0,116,253,253,195,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,165,253,253,231,70,1,0,0,0,78,237,253,195,0,0,0,0,0,0,0,0,0,0,0,0,0,0,33,253,253,253,182,0,0,0,0,0,0,200,253,195,0,0,0,0,0,0,0,0,0,0,0,0,0,0,98,253,253,253,24,0,0,0,0,0,0,42,253,195,0,0,0,0,0,0,0,0,0,0,0,0,0,0,197,253,253,253,24,0,0,0,0,0,0,163,253,195,0,0,0,0,0,0,0,0,0,0,0,0,0,0,197,253,253,189,13,0,0,0,0,0,53,227,253,121,0,0,0,0,0,0,0,0,0,0,0,0,0,0,197,253,253,114,0,0,0,0,0,21,227,253,231,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,197,253,253,114,0,0,0,5,131,143,253,231,59,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,197,253,253,236,73,58,217,223,253,253,253,174,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,197,253,253,253,253,253,253,253,253,253,253,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,149,253,253,253,253,253,253,253,253,182,15,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,168,253,253,253,253,253,248,89,23,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,07,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,67,141,205,255,255,153,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,57,121,188,253,253,254,253,253,253,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,111,198,241,253,254,253,253,215,179,253,253,165,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,242,253,253,253,191,116,28,16,79,253,253,40,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,114,114,13,0,0,0,0,142,254,207,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,26,217,253,143,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,151,254,234,37,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,226,254,197,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,242,252,75,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,160,253,201,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,241,253,114,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,57,253,253,114,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,180,254,242,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,54,253,253,116,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,141,253,253,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,141,253,177,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,205,254,56,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,26,254,253,81,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,25,254,253,235,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,204,228,103,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,08,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,29,29,66,28,0,0,10,179,242,47,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,19,144,253,252,252,215,170,82,28,209,253,84,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,123,252,253,252,252,252,253,240,72,210,253,84,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,151,246,252,178,28,28,28,253,151,91,252,253,84,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,179,253,178,0,0,0,0,166,91,229,253,201,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,47,196,252,103,0,0,0,0,16,215,252,252,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,131,252,228,38,0,0,0,204,252,252,127,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,228,252,226,38,38,213,253,252,127,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,85,253,255,203,253,253,214,38,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28,184,253,252,252,202,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,29,184,253,252,252,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,26,159,252,253,252,252,178,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,120,253,253,114,194,253,253,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,170,225,233,96,0,131,252,252,38,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,89,253,252,80,0,13,206,252,202,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,38,225,253,102,6,0,13,206,252,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,86,253,251,75,0,0,104,253,206,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,110,252,244,144,95,169,253,252,142,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,110,252,253,252,252,252,244,93,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,128,253,252,202,102,25,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,03,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,108,233,253,255,180,101,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,36,219,252,252,252,253,252,227,50,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,85,222,252,233,141,69,79,227,252,160,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,116,253,235,64,0,0,0,161,252,160,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,128,18,0,0,0,22,244,252,108,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,97,253,184,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,38,99,253,244,98,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,153,240,252,253,240,101,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,99,252,252,252,253,252,252,215,19,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,26,221,210,137,23,96,221,252,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,70,253,253,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,25,223,252,116,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,207,252,116,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,207,252,116,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,248,252,116,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,138,253,253,53,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,47,34,0,0,5,136,252,252,157,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,252,234,90,70,191,252,252,227,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,252,252,252,252,253,235,128,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,211,252,252,252,137,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,01,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,85,255,103,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,205,253,253,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,205,253,253,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,44,233,253,244,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,135,253,253,100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,153,253,240,76,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,208,253,166,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,69,253,253,142,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,110,253,235,33,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,63,223,235,130,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,186,253,235,37,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17,145,253,231,35,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,69,220,231,123,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,205,253,176,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17,125,253,185,39,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,71,214,231,41,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,167,253,225,33,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,205,207,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,30,249,233,49,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,253,89,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0\n\n    \n  \n\n\n    [mnist_test.csv] \n    \n      7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,185,159,151,60,36,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,222,254,254,254,254,241,198,198,198,198,198,198,198,198,170,52,0,0,0,0,0,0,0,0,0,0,0,0,67,114,72,114,163,227,254,225,254,254,254,250,229,254,254,140,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17,66,14,67,67,67,59,21,236,254,106,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,83,253,209,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,22,233,255,83,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,129,254,238,44,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,59,249,254,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,133,254,187,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,205,248,58,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,126,254,182,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,75,251,240,57,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,19,221,254,166,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,203,254,219,35,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,38,254,254,77,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,224,254,115,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,133,254,254,52,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61,242,254,254,52,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,121,254,254,219,40,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,121,254,207,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,02,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,116,125,171,255,255,150,93,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,169,253,253,253,253,253,253,218,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,169,253,253,253,213,142,176,253,253,122,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,52,250,253,210,32,12,0,6,206,253,140,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,77,251,210,25,0,0,0,122,248,253,65,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,18,0,0,0,0,209,253,253,65,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,117,247,253,198,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,76,247,253,231,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,253,253,144,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,176,246,253,159,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,25,234,253,233,35,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,198,253,253,141,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,78,248,253,189,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,19,200,253,253,141,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,134,253,253,173,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,248,253,253,25,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,248,253,253,43,20,20,20,20,5,0,5,20,20,37,150,150,150,147,10,0,0,0,0,0,0,0,0,0,248,253,253,253,253,253,253,253,168,143,166,253,253,253,253,253,253,253,123,0,0,0,0,0,0,0,0,0,174,253,253,253,253,253,253,253,253,253,253,253,249,247,247,169,117,117,57,0,0,0,0,0,0,0,0,0,0,118,123,123,123,166,253,253,253,155,123,123,41,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,01,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,38,254,109,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,87,252,82,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,135,241,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,244,150,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,254,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,202,223,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,254,216,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,95,254,195,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,140,254,77,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,57,237,205,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,124,255,165,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,171,254,81,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,232,215,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,120,254,159,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,151,254,142,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,228,254,66,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61,251,254,66,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,141,254,205,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,215,254,121,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,198,176,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,00,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,150,253,202,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,251,251,253,107,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,197,251,251,253,107,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,110,190,251,251,251,253,169,109,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,251,251,251,251,253,251,251,220,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,182,255,253,253,253,253,234,222,253,253,253,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,63,221,253,251,251,251,147,77,62,128,251,251,105,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,231,251,253,251,220,137,10,0,0,31,230,251,243,113,5,0,0,0,0,0,0,0,0,0,0,0,0,37,251,251,253,188,20,0,0,0,0,0,109,251,253,251,35,0,0,0,0,0,0,0,0,0,0,0,0,37,251,251,201,30,0,0,0,0,0,0,31,200,253,251,35,0,0,0,0,0,0,0,0,0,0,0,0,37,253,253,0,0,0,0,0,0,0,0,32,202,255,253,164,0,0,0,0,0,0,0,0,0,0,0,0,140,251,251,0,0,0,0,0,0,0,0,109,251,253,251,35,0,0,0,0,0,0,0,0,0,0,0,0,217,251,251,0,0,0,0,0,0,21,63,231,251,253,230,30,0,0,0,0,0,0,0,0,0,0,0,0,217,251,251,0,0,0,0,0,0,144,251,251,251,221,61,0,0,0,0,0,0,0,0,0,0,0,0,0,217,251,251,0,0,0,0,0,182,221,251,251,251,180,0,0,0,0,0,0,0,0,0,0,0,0,0,0,218,253,253,73,73,228,253,253,255,253,253,253,253,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,113,251,251,253,251,251,251,251,253,251,251,251,147,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,230,251,253,251,251,251,251,253,230,189,35,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,62,142,253,251,251,251,251,253,107,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,174,251,173,71,72,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,04,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,224,0,0,0,0,0,0,0,70,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,121,231,0,0,0,0,0,0,0,148,168,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,195,231,0,0,0,0,0,0,0,96,210,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,69,252,134,0,0,0,0,0,0,0,114,252,21,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,236,217,12,0,0,0,0,0,0,0,192,252,21,0,0,0,0,0,0,0,0,0,0,0,0,0,0,168,247,53,0,0,0,0,0,0,0,18,255,253,21,0,0,0,0,0,0,0,0,0,0,0,0,0,84,242,211,0,0,0,0,0,0,0,0,141,253,189,5,0,0,0,0,0,0,0,0,0,0,0,0,0,169,252,106,0,0,0,0,0,0,0,32,232,250,66,0,0,0,0,0,0,0,0,0,0,0,0,0,15,225,252,0,0,0,0,0,0,0,0,134,252,211,0,0,0,0,0,0,0,0,0,0,0,0,0,0,22,252,164,0,0,0,0,0,0,0,0,169,252,167,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,204,209,18,0,0,0,0,0,0,22,253,253,107,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,169,252,199,85,85,85,85,129,164,195,252,252,106,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,41,170,245,252,252,252,252,232,231,251,252,252,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,49,84,84,84,84,0,0,161,252,252,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,127,252,252,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,253,253,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,127,252,252,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,135,252,244,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,232,236,111,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,179,66,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,01,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,77,254,107,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,19,227,254,254,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,81,254,254,165,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,203,254,254,73,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,53,254,254,250,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,134,254,254,180,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,196,254,248,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,58,254,254,237,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,111,254,254,132,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,163,254,238,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,252,254,223,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,79,254,254,154,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,163,254,238,53,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28,252,254,210,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,86,254,254,131,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,105,254,234,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,175,254,204,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,211,254,196,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,158,254,160,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,26,157,107,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,04,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,22,192,134,32,0,0,0,0,0,0,0,0,15,77,5,0,0,0,0,0,0,0,0,0,0,0,0,17,235,250,169,0,0,0,0,0,0,0,0,15,220,241,37,0,0,0,0,0,0,0,0,0,0,0,20,189,253,147,0,0,0,0,0,0,0,0,0,139,253,100,0,0,0,0,0,0,0,0,0,0,0,0,70,253,253,21,0,0,0,0,0,0,0,0,43,254,173,13,0,0,0,0,0,0,0,0,0,0,0,22,153,253,96,0,0,0,0,0,0,0,0,43,231,254,92,0,0,0,0,0,0,0,0,0,0,0,0,163,255,204,11,0,0,0,0,0,0,0,0,104,254,158,0,0,0,0,0,0,0,0,0,0,0,0,0,162,253,178,5,0,0,0,0,0,0,9,131,237,253,0,0,0,0,0,0,0,0,0,0,0,0,0,0,162,253,253,191,175,70,70,70,70,133,197,253,253,169,0,0,0,0,0,0,0,0,0,0,0,0,0,0,51,228,253,253,254,253,253,253,253,254,253,253,219,35,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17,65,137,254,232,137,137,137,44,253,253,161,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34,254,206,21,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,160,253,69,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,85,254,241,50,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,158,254,165,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,231,244,50,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,104,254,232,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,208,253,157,0,13,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,208,253,154,91,204,161,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,208,253,254,253,154,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61,190,128,23,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,09,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,149,193,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,91,224,253,253,19,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28,235,254,253,253,166,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,144,253,254,253,253,253,238,115,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,241,253,208,185,253,253,253,231,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,79,254,193,0,8,98,219,254,255,201,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,86,253,80,0,0,0,182,253,254,191,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,175,253,155,0,0,0,234,253,254,135,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,86,253,208,40,85,166,251,237,254,236,42,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,238,253,254,253,253,185,36,216,253,152,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,240,255,254,145,8,0,134,254,223,35,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,158,142,12,0,0,9,175,253,161,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,88,253,226,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,166,253,126,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,245,253,38,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,115,254,172,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,218,254,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,30,254,165,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,186,244,42,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,223,78,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,05,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17,47,47,47,16,129,85,47,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,75,153,217,253,253,253,215,246,253,253,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,35,142,244,252,253,253,253,253,253,253,253,253,253,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,63,253,253,253,253,253,253,253,213,170,170,170,170,0,0,0,0,0,0,0,0,0,0,0,20,132,72,0,57,238,227,238,168,124,69,20,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,206,253,78,0,0,32,0,30,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,177,253,132,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,133,253,233,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,92,253,223,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,150,253,174,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,234,253,246,127,49,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,253,253,253,251,147,91,121,85,42,42,85,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,139,253,253,253,253,253,253,253,253,253,253,253,232,168,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,53,218,222,251,253,253,253,253,253,253,253,253,252,124,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,67,72,200,253,253,253,253,253,253,253,175,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,120,253,249,152,51,164,253,253,175,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,253,253,253,188,252,253,253,148,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,167,253,253,253,253,250,175,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,23,180,231,253,221,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,93,149,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,09,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,36,56,137,201,199,95,37,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,152,234,254,254,254,254,254,250,211,151,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,46,153,240,254,254,227,166,133,251,200,254,229,225,104,0,0,0,0,0,0,0,0,0,0,0,0,0,153,234,254,254,187,142,8,0,0,191,40,198,246,223,253,21,0,0,0,0,0,0,0,0,0,0,8,126,253,254,233,128,11,0,0,0,0,210,43,70,254,254,254,21,0,0,0,0,0,0,0,0,0,0,72,243,254,228,54,0,0,0,0,3,32,116,225,242,254,255,162,5,0,0,0,0,0,0,0,0,0,0,75,240,254,223,109,138,178,178,169,210,251,231,254,254,254,232,38,0,0,0,0,0,0,0,0,0,0,0,9,175,244,253,255,254,254,251,254,254,254,254,254,252,171,25,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,136,195,176,146,153,200,254,254,254,254,150,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,162,254,254,241,99,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,118,250,254,254,90,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,100,242,254,254,211,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,54,241,254,254,242,59,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,131,254,254,244,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,249,254,254,152,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,228,254,254,208,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,78,255,254,254,66,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,209,254,254,137,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,227,255,233,25,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,113,255,108,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0\n\n    \n  \n前向传播输入隐藏隐藏输出\n反向传播sigmoid函数为：\n反向传播时需要偏导\n已知$x_1w_1 + x_2w_2 +x3*w_3 = y_{tmp},y_{pre}=sigmoid(y_{tmp})，求w_2对整体误差E=loss(y_{pre},y_{true})产生的影响，可以然后更新，会乘上一个学习率\\eta$\n代码如下import numpy as npimport pandas as pdclass NN:    def __init__(self, input_nodes, hidden_nodes, output_nodes, lr):        # 输入节点个数 隐藏层节点个数 输出层节点个数 学习率        self.input_nodes = input_nodes        self.hidden_nodes = hidden_nodes        self.output_nodes = output_nodes        self.lr = lr        '''        初始化权重矩阵，我们有两个矩阵：        一个是weight_itoh，表示输入层与中间层之间的链路权重形成的矩阵        一个是weight_htoo，表示中间层与输出层之间的链路权重形成的矩阵        '''        self.weight_itoh = np.random.rand(self.input_nodes, self.hidden_nodes)-0.5        self.weight_htoo = np.random.rand(self.hidden_nodes, self.output_nodes)-0.5        '''        激活函数sigmoid        '''        self.activation = lambda x: 1/(1 + np.exp(-x))    def loss_function(self,y_true,y_pre):        return y_true - y_pre    def __forward(self,x):        # forward 正向传播        # 根据输入数据计算并输出答案        # 计算中间层从输入层接收到的信号量        hidden_input = np.dot(x,self.weight_itoh)        # 计算中间层经过激活函数后形成的输出信号量        hidden_output = self.activation(hidden_input)        # 计算结束层从中间层接受的信号量        final_input = np.dot(hidden_output,self.weight_htoo)        # 计算最外层神经元（结束层）经过激活函数后形成的输出信号量        final_output = self.activation(final_input)        return hidden_output,final_output    '''    预测，其实也是forward，它接收输入数据，通过神经网络的层层计算后，在输出层输出最终结果。    输入数据要依次经过输入层，中间层，和输出层，并且在每层的节点中还得执行激活函数以便形成对下一层节点的输出信号。    我们知道可以通过矩阵运算把这一系列复杂的运算流程给统一起来。    '''    def predict(self, x):        _,y_pre = self.__forward(x)        return y_pre    def train(self, x_train, y_train):        hidden_output,y_pre = self.__forward(x_train)        # calculate error 计算每层的误差        output_errors = self.loss_function(y_train,y_pre)        hidden_errors = np.dot(output_errors * y_pre * (1 - y_pre),self.weight_htoo.T)        # backward 反向传播        self.weight_htoo += self.lr * np.dot(hidden_output.T,output_errors * y_pre * (1 - y_pre))        self.weight_itoh += self.lr * np.dot(x_train.T,hidden_errors * hidden_output * (1 - hidden_output))def load_data(path):    data = pd.read_csv(path,header=None)    x = data.iloc[:, 1:].values/255*0.99+0.01    y = data.iloc[:, 0].values    # onehot编码    y = np.eye(10)[y]    return x,ydef train():    # 参数设置    input_nodes = 784    hidden_nodes = 250    output_nodes = 10    lr = 0.1    epochs = 10    # 读取数据    x_train,y_train = load_data('./datasets/mnist_train.csv')    model = NN(input_nodes, hidden_nodes, output_nodes, lr)    # 训练    for _ in range(epochs):        for x,y in zip(x_train,y_train):            model.train(x.reshape(1,-1),y)    return modelmodel = train()def test(model):    # 测试    x_test,y_test = load_data('./datasets/mnist_test.csv')    score = []    y_pre = model.predict(x_test)    y_pre = np.argmax(y_pre,axis=1)    y_test = np.argmax(y_test,axis=1)    res:np.ndarray = (y_test == y_pre)    print('correct rate:',res.sum()/res.shape[0])test(model)\n\n"},{"title":"网站收藏","url":"/2023/05/10/%E5%AE%9E%E7%94%A8%E7%BD%91%E7%AB%99%E8%AE%B0%E5%BD%95/","content":"学习类\ngo入门练习\n6.5840课程官网(前6.824)\nrust教程\n希腊字母表(写latex)\nLatex打空格\n数学资料\ncss-loaders\n计算机自学指南\n\n工具类\n图片大小压缩\n图片尺寸修改和格式转换\nJetbrains全家桶破解插件\n科学上网\n字符画\n中国传统颜色\n\n","categories":["trick"],"tags":["不时之需"]},{"title":"数据结构与算法之美笔记之如何权衡选择使用哪种数据结构和算法","url":"/2022/02/26/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%A6%82%E4%BD%95%E6%9D%83%E8%A1%A1%E9%80%89%E6%8B%A9%E4%BD%BF%E7%94%A8%E5%93%AA%E7%A7%8D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/","content":"学习数据结构和算法，不要停留在学院派的思维中，只把算法当作应付面试、考试或者竞赛的花拳绣腿。作为软件开发工程师，我们要把数据结构和算法，应用到软件开发中，解决实际的开发问题。\n要想游刃有余地解决今后你要面对的问题，光是熟知每种数据结构和算法的功能、特点、时间空间复杂度，还是不够的。毕竟工程上的问题不是算法题。算法题的背景、条件、限制都非常明确，我们只需要在规定的输入、输出下，找最优解就可以了。\n而工程上的问题往往都比较开放，在选择数据结构和算法的时候，我们往往需要综合各种因素，比如编码难度、维护成本、数据特征、数据规模等，最终选择一个工程的最合适解，而非理论上的最优解。\n作者的六条经验：\n1. 时间、空间复杂度不能跟性能划等号复杂度不是执行时间和内存消耗的精确值在用大O表示法表示复杂度的时候，我们会忽略掉低阶、常数、系数，只保留高阶，并且它的度量单位是语句的执行频度。每条语句的执行时间，并非是相同、确定的。所以，复杂度给出的只能是一个非精确量值的趋势。\n代码的执行时间有时不跟时间复杂度成正比我们常说，时间复杂度是O(nlogn)的算法，比时间复杂度是O(n^2)的算法，执行效率要高。这样说的一个前提是，算法处理的是大规模数据的情况。对于小规模数据的处理，算法的执行效率并不一定跟时间复杂度成正比，有时还会跟复杂度成反比。\n对于处理不同问题的不同算法，其复杂度大小没有可比性复杂度只能用来表征不同算法，在处理同样的问题，以及同样数据类型的情况下的性能表现。但是，对于不同的问题、不同的数据类型，不同算法之间的复杂度大小并没有可比性。\n2. 抛开数据规模谈数据结构和算法都是“耍流氓”在平时的开发中，在数据规模很小的情况下，普通算法和高级算法之间的性能差距会非常小。如果代码执行频率不高、又不是核心代码，这个时候，我们选择数据结构和算法的主要依据是，其是否简单、容易维护、容易实现。大部分情况下，我们直接用最简单的存储结构和最暴力的算法就可以了。比如，对于长度在一百以内的字符串匹配，我们直接使用朴素的字符串匹配算法就够了。如果用KMP、BM这些更加高效的字符串匹配算法，实际上就大材小用了。因为这对于处理时间是毫秒量级敏感的系统来说，性能的提升并不大。相反，这些高级算法会徒增编码的难度，还容易产生bug。\n3. 结合数据特征和访问方式来选择数据结构面对实际的软件开发场景，当我们掌握了基础数据结构和算法之后，最考验能力的并不是数据结构和算法本身，而是对问题需求的挖掘、抽象、建模。如何将一个背景复杂、开放的问题，通过细致的观察、调研、假设，理清楚要处理数据的特征与访问方式，这才是解决问题的重点。只有理清楚了这些东西，我们才能将问题转化成合理的数据结构模型，进而找到满足需求的算法。比如我们前面讲过，Trie树这种数据结构是一种非常高效的字符串匹配算法。但是，如果你要处理的数据，并没有太多的前缀重合，并且字符集很大，显然就不适合利用Trie树了。所以，在用Trie树之前，我们需要详细地分析数据的特点，甚至还要写些分析代码、测试代码，明确要处理的数据是否适合使用Trie树这种数据结构。再比如，图的表示方式有很多种，邻接矩阵、邻接表、逆邻接表、二元组等等。你面对的场景应该用哪种方式来表示，具体还要看你的数据特征和访问方式。如果每个数据之间联系很少，对应到图中，就是一个稀疏图，就比较适合用邻接表来存储。相反，如果是稠密图，那就比较适合采用邻接矩阵来存储。\n4. 区别对待IO密集、内存密集和计算密集如果你要处理的数据存储在磁盘，比如数据库中。那代码的性能瓶颈有可能在磁盘IO，而并非算法本身。这个时候，你需要合理地选择数据存储格式和存取方式，减少磁盘IO的次数。\n比如我们在递归那一节讲过最终推荐人的例子。你应该注意到了，当时我给出的代码尽管正确，但其实并不高效。如果某个用户是经过层层推荐才来注册的，那我们获取他的最终推荐人的时候，就需要多次访问数据库，性能显然就不高了。\n不过，这个问题解决起来不难。我们知道，某个用户的最终推荐人一旦确定，就不会变动。所以，我们可以离线计算每个用户的最终推荐人，并且保存在表中的某个字段里。当我们要查看某个用户的最终推荐人的时候，访问一次数据库就可以获取到。\n刚刚我们讲了数据存储在磁盘的情况，现在我们再来看下，数据存储在内存中的情况。如果你的数据是存储在内存中，那我们还需要考虑，代码是内存密集型的还是CPU密集型的。\n所谓CPU密集型，简单点理解就是，代码执行效率的瓶颈主要在CPU执行的效率。我们从内存中读取一次数据，到CPU缓存或者寄存器之后，会进行多次频繁的CPU计算（比如加减乘除），CPU计算耗时占大部分。所以，在选择数据结构和算法的时候，要尽量减少逻辑计算的复杂度。比如，用位运算代替加减乘除运算等。\n所谓内存密集型，简单点理解就是，代码执行效率的瓶颈在内存数据的存取。对于内存密集型的代码，计算操作都比较简单，比如，字符串比较操作，实际上就是内存密集型的。每次从内存中读取数据之后，我们只需要进行一次简单的比较操作。所以，内存数据的读取速度，是字符串比较操作的瓶颈。因此，在选择数据结构和算法的时候，需要考虑是否能减少数据的读取量，数据是否在内存中连续存储，是否能利用CPU缓存预读。\n5. 善用语言提供的类，避免重复造轮子实际上，对于大部分常用的数据结构和算法，编程语言都提供了现成的类和函数实现。比如，Java中的HashMap就是散列表的实现，TreeMap就是红黑树的实现等。在实际的软件开发中，除非有特殊的要求，我们都可以直接使用编程语言中提供的这些类或函数。\n但这并不代表，学习数据结构和算法是没用的。深入理解原理，有助于你能更好地应用这些编程语言提供的类和函数。能否深入理解所用工具、类的原理，这也是普通程序员跟技术专家的区别。\n6. 千万不要漫无目的地过度优化比如，一段代码执行只需要0.01秒，你非得用一个非常复杂的算法或者数据结构，将其优化成0.005秒。即便你的算法再优秀，这种微小优化的意义也并不大。相反，对应的代码维护成本可能要高很多。\n不过度优化并不代表，我们在软件开发的时候，可以不加思考地随意选择数据结构和算法。我们要学会估算。估算能力实际上也是一个非常重要的能力。我们不仅要对普通情况下的数据规模和性能压力做估算，还需要对异常以及将来一段时间内，可能达到的数据规模和性能压力做估算。这样，我们才能做到未雨绸缪，写出来的代码才能经久可用。\n还有，当你真的要优化代码的时候，一定要先做Benchmark基准测试。这样才能避免你想当然地换了一个更高效的算法，但真实情况下，性能反倒下降了。\n\n一个评论的总结：\n\n目标不同，评价标准不同。\n根据环境特征选择解决方法。\n将复杂、开放的问题，合理抽象为特定范式。\n善于找到问题的瓶颈，并优先解决。\n善于借助前人的经验，并尽可能理解他们的经历与选择。\n注意成本收益，投入恰到好处，切忌严重过度投入。\n\n","categories":["数据结构","笔记"]},{"title":"数据结构与算法之美笔记之索引、并行算法","url":"/2022/02/22/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E%E7%AC%94%E8%AE%B0%E4%B9%8B%E7%B4%A2%E5%BC%95%E3%80%81%E5%B9%B6%E8%A1%8C%E7%AE%97%E6%B3%95/","content":"索引索引就像书的目录，通过目录，我们就可以快速定位相关知识点的页数，查找的速度也会有质的提高。\n\n索引的需求定义\n\n功能性需求（作者谈到的几种）\n数据是格式化数据还是非格式化数据？对于非结构化数据，我们一般需要做预处理，提取出查询关键词，对关键词构建索引。\n数据是静态数据还是动态数据？静态数据就相对简单，动态索引就不仅要考虑他的查询效率，还要考虑索引更新效率\n索引存储在内存还是硬盘？内存中操作速度肯定快些，但是如果数据量太大，索引就需要存在磁盘里了，当然我们也可以将索引一部分存在内存一部分存在磁盘\n单值查找还是区间查找？\n单关键词查找还是多关键词组合查找？比如，搜索引擎中构建的索引，既要支持一个关键词的查找，比如“数据结构”，也要支持组合关键词查找，比如“数据结构 AND 算法”。对于多关键词查询来说，要分多种情况。像MySQL这种结构化数据的查询需求，我们可以实现针对多个关键词的组合，建立索引；对于像搜索引擎这样的非结构数据的查询需求，我们可以针对单个关键词构建索引，然后通过集合操作，比如求并集、求交集等，计算出多个关键词组合的查询结果。\n\n\n非功能性需求\n\n\n索引对存储空间的消耗不能过大。因为有时候，索引对存储空间的消耗会超过原始数据。\n在考虑索引查询效率的同时，我们还要考虑索引的维护成本。索引的更新势必会影响到增删改操作的性能。\n\n\n构建索引常用的数据结构\n\n散列表我们知道，散列表增删改查操作的性能非常好，时间复杂度是O(1)。一些键值数据库，比如Redis、Memcache，就是使用散列表来构建索引的。这类索引，一般都构建在内存中。\n\n红黑树红黑树作为一种常用的平衡二叉查找树，数据插入、删除、查找的时间复杂度是O(logn)，也非常适合用来构建内存索引。Ext文件系统中，对磁盘块的索引，用的就是红黑树。\n\nB+树B+树比起红黑树来说，更加适合构建存储在磁盘中的索引。B+树是一个多叉树，所以，对相同个数的数据构建索引，B+树的高度要低于红黑树。当借助索引查询数据的时候，读取B+树索引，需要的磁盘IO次数非常更少。所以，大部分关系型数据库的索引，比如MySQL、Oracle，都是用B+树来实现的。\n\n跳表跳表也支持快速添加、删除、查找数据。而且，我们通过灵活调整索引结点个数和数据个数之间的比例，可以很好地平衡索引对内存的消耗及其查询效率。Redis中的有序集合，就是用跳表来构建的。\n\n布隆过滤器我们知道，布隆过滤器有一定的判错率。但是，我们可以规避它的短处，发挥它的长处。尽管对于判定存在的数据，有可能并不存在，但是对于判定不存在的数据，那肯定就不存在。而且，布隆过滤器还有一个更大的特点，那就是内存占用非常少。我们可以针对数据，构建一个布隆过滤器，并且存储在内存中。当要查询数据的时候，我们可以先通过布隆过滤器，判定是否存在。如果通过布隆过滤器判定数据不存在，那我们就没有必要读取磁盘中的索引了。对于数据不存在的情况，数据查询就更加快速了。\n\n有序数组有序数组也可以被作为索引。如果数据是静态的，也就是不会有插入、删除、更新操作，比如去年的xx数据，那我们可以把数据的关键词（查询用的）抽取出来，组织成有序数组，然后利用二分查找算法来快速查找数据。\n\n\n\n并行算法当算法无法再继续优化的情况下，我们该如何来进一步提高执行效率呢？ \n\n并行排序比如归并排序，我们把8GB的数据分成16个文件，再用16个文件分别排序完，再对这16个有序集合合并，快排的原理也是分治，它们的区别在于，第一种处理思路是，先随意地对数据分片，排序之后再合并。第二种处理思路是，先对数据按照大小划分区间，然后再排序，排完序就不需要再处理了。\n并行查找将数据分到多个散列表中，再开多个线程分别在各自的散列表内查找，插入元素就是把元素插入装载因子最小的那个散列表中，这样有助于减少散列冲突。\n并行字符串匹配\n并行搜索\n\n并行计算是一个工程上的实现思路，尽管跟算法关系不大，但是，在实际的软件开发中，它确实可以非常巧妙地提高程序的运行效率，是一种非常好用的性能优化手段。\n特别是，当要处理的数据规模达到一定程度之后，我们无法通过继续优化算法，来提高执行效率 的时候，我们就需要在实现的思路上做文章，利用更多的硬件资源，来加快执行的效率。所以，在很多超大规模数据处理中，并行处理的思想，应用非常广泛，比如MapReduce实际上就是一种并行计算框架。\n","categories":["数据结构","笔记"]},{"title":"模拟退火算法求极值","url":"/2023/06/27/%E6%A8%A1%E6%8B%9F%E9%80%80%E7%81%AB%E7%AE%97%E6%B3%95%E6%B1%82%E6%9E%81%E5%80%BC/","content":"import numpy as npimport matplotlib.pyplot as plt# 目标函数，求解极小值def xfunction(x):    return (x**2-5*x)*np.sin(x**2)op = lambda new,old:new&lt;old #取极小值if __name__ == &#x27;__main__&#x27;:    T = 100  #初始温度    T_end = 1e-6 #终止温度    cold_rate = 0.999 # 每次温度下降0.1%    x_min,x_max = 0,5 # 定义域    data = []    # 随机一个初始的x值    x = np.random.uniform(x_min,x_max)    while T &gt; T_end:        # 一个轻微扰动，表示x变了        x_new = x+np.random.uniform(-1,1)        # 只处理在定义域内的情况        if x_min &lt;= x_new &lt;=x_max:            y = xfunction(x)            y_new = xfunction(x_new)            # 以下遵守Metropolis准则            if op(y_new,y):                x = x_new                # 记录过程值                data.append((x_new,y_new))            else:                # T越大，p越小                p = np.exp(-(y_new-y)/T)                r = np.random.uniform(0,1)                # 高温时允许接收较劣解                if p &gt; r:                    x = x_new                    data.append((x_new,y_new))                else:                    data.append((x,y))        # 每次使用完都要降温        T = T * cold_rate    # 画图    data.sort(key=lambda i:i[0])    plt.plot(list(map(lambda i:i[0],data)),list(map(lambda i:i[1],data)))    plt.plot(x,xfunction(x),&#x27;om&#x27;)    plt.show()","categories":["启发式算法"]},{"title":"海贼王观看有感","url":"/2025/05/10/%E6%B5%B7%E8%B4%BC%E7%8E%8B%E8%A7%82%E7%9C%8B%E6%9C%89%E6%84%9F/","content":"\n\n  a09d93ae5417c67719eeb9c85ca5e5957412768ec869f240b2cbdffeb866cdacd03abb32bf6be4ddcbef4b627a63b3850ab987aa0e7d498ef8f45f1a32bc4c380f639dd117f3566d02e9c50ace5c6447332cc92a11fc7309965c67aab62f25725fd01341947c7b84ba8682ed46b1c7b5a4a123398da316b007db98b4ca74007aaba6f290199eb4569a6d7b510d4336a37bfe86279ba88da9564d2c1390d475fd96dfe03fbc726a6e9cb3077593fc97bc445b004d76b07e8b3911cfcbb43a2922cbbf672c9031d25e48b1af25568f509b7e777a3bc5d9a04e0558e71654ea51d24ce60daca06478b861249b29db0bee96a27b17d57935e8feb62e26659436fd1ff18966f477b9b4eaf881f4de8f7a182c5d0924539b9d60081e3e686b3fb30357\n  \n    \n      \n      \n        Hey, password is required here.\n      \n    \n  \n\n\n\nimport {initHBE} from \"/js/plugins/hbe.js\";\n  console.log(\"hexo-blog-encrypt: loaded.\");\n    initHBE();\n\n"},{"title":"禁忌搜索求TSP","url":"/2023/06/27/%E7%A6%81%E5%BF%8C%E6%90%9C%E7%B4%A2%E6%B1%82TSP/","content":"\n邻域：将当前解通过某种算子得到新的解的集合就是这个解的邻域，比如通过交换算子将1234-&gt;1324，那么1324就是1234的邻域的一部分\n邻域移动是进行解转移的关键，影响整个算法的搜索速度\n禁忌表：记录被禁止的对象，防止出现搜索循环和局部最优。一般使用FIFO\n禁忌步长:多久之后禁忌失效，设计很关键。小了会局部最优，大了会限制搜索，错过好的解\n候选解（candidate）：从邻域中选择若干个目标值或评价值最佳的邻居作为候选解。候选解集合的生成规则一定程度上决定了搜索的方向和邻域大小，十分关键。候选集过大增加计算内存和计算时间，过小容易过早陷入局部最优。候选集的选择一般由邻域中的邻居组成，可以选择所有邻居，也可以选择表现较好的邻居，还可以随机选择几个邻居。这里我们采用两两交换法则生成候选解集合。\n选择邻域的策略：最好解优先，即比较所有邻域，耗时久但收敛更好。第一个改进解，即发现对一个改进解就转移，耗时少但收敛差。\n藐视准则(特赦准则)：当某个被禁忌的移动由优于未被禁忌的移动得到的最优邻域解和历史最优解时，算法接收该移动。\n停止准则：如最大迭代数、运行时间等\n\n视频：\nimport matplotlib.pyplot as pltimport numpy as npdef make_data(dim):    mp = np.ndarray((dim,dim))    for i in range(dim):        for j in range(0,i+1):            if i==j:                mp[i,j]=0            else:                v = np.random.randint(10,500)                mp[i,j] = v                mp[j,i] = v    return mpclass TabuSearch:    def __init__(self,max_tabu_size=10,candidate_num=11,asp_iter=100):        self.max_tabu_size = max_tabu_size        self.candidate_num = candidate_num        self.asp_iter = asp_iter    # 获得x通过某种操作(这里是交换)能到达的所有邻域    def get_neighbor(self,x):        neighbors = []        for i in range(len(x)):            for j in range(i + 1, len(x)):                neighbor = x.copy()                neighbor[i], neighbor[j] = neighbor[j], neighbor[i]                neighbors.append(neighbor)        return neighbors    # 取部分邻域作为候选集    def get_candidates(self,neighbors):        # 升序，返回新数组        sorted_neighbors = sorted(neighbors,key=lambda item:self.target_function(item))        return sorted_neighbors[:self.candidate_num]    # 如果全部对象都被禁忌、或某对象的解禁能带来很好的影响    # 此时会让他们重新可选    # 特赦规则(藐视禁忌准则)    def aspiration_criterion(self,x,best_x,cur_iter,asp_iter):        res1,res2 = self.target_function(x) , self.target_function(best_x)        # 得出的解比当前最优解还好 并且 迭代进行到一定次数        return res1 &lt; res2 and cur_iter &gt; asp_iter    # 目标函数    def target_function(self,x:list):        path = [self.start] + x + [self.start]        cur = path[0]        res = 0        for nex in path[1:]:            res += self.mp[cur,nex]            cur = nex        return res    # 传入图、起始点、迭代次数    def run(self,mp:np.ndarray,start,iter_num=1000):        # 初始化禁忌空表        tabu_table = []        # 获得解维度        dim = mp.shape[0]        self.start = start        self.mp = mp        # 初始化最初的解,注意起始点是不变的        x = filter(lambda i:i != start,range(0,dim))        # 一个是当前解，一个是全历史最优解        x = list(x)        best_x = x.copy()        # 记录过程量        records = []        for iter in range(iter_num):            # 选出neighbors中所有的长度为2的子集，通过按值交换，起到2-opt的效果            # 获得邻域            neighbors = self.get_neighbor(x)            # 可以再选取一部分邻域作为候选集，避免在大规模邻域中搜索            # 注意和这个            candidates = self.get_candidates(neighbors)            # 选最优解            best_candidate = candidates[0]            # 不在禁忌表里直接设为当前解            if best_candidate not in tabu_table:                # 不需要将他与先前的x进行比较                # 从而有能力跳出局部最优解                x = best_candidate            else:                # 可赦免就用                if self.aspiration_criterion(best_candidate,best_x,iter,self.asp_iter):                    x = best_candidate                    # 先清除，防止表中同时出现两个                    tabu_table.remove(best_candidate)                else:                    # 这个最优解都不能赦免，只能用没被禁的了                    # 所以我感觉candidate_num要比max_tabu_size大一点                    # 不然会死循环？                    for candidate in candidates:                        if candidate not in tabu_table:                            x = candidate                            break            # 定长禁忌表的FIFO            if len(tabu_table) &gt; self.max_tabu_size:                tabu_table.pop(0)            # 禁忌            # 这里存入的是交换后的路径，但其实存交换操作就行(交换的下标x和y)            tabu_table.append(x)            # 判断当前最优是否能替代历史最优            if self.target_function(x) &lt; self.target_function(best_x):                best_x = x            records.append(self.target_function(best_x))        return [start] + best_x +[start] , self.target_function(best_x) , recordsnp.random.seed(100)city_num = 10# mp = make_data(city_num)mp = np.array([[  0,  18, 290, 333, 369, 353,  89, 442, 404, 360,], [ 18,   0, 446, 364,  63,  76, 236,  24, 300, 250,], [290, 446,   0, 290, 153, 238, 373, 326,  68, 410,], [333, 364, 290,   0, 147, 103,  96, 396, 165, 374,], [369,  63, 153, 147,   0, 398, 425, 395, 151, 255,], [353,  76, 238, 103, 398,   0, 221, 110,  14, 101,], [ 89, 236, 373,  96, 425, 221,   0, 453, 333, 145,], [442,  24, 326, 396, 395, 110, 453,   0,  59, 441,], [404, 300,  68, 165, 151,  14, 333,  59,   0, 203,], [360, 250, 410, 374, 255, 101, 145, 441, 203,   0,]] )# print(mp)tbs = TabuSearch()best_x,best_y,records = tbs.run(mp,0,10)print(best_x,best_y)plt.plot(range(len(records)),records)plt.show()\n","categories":["启发式算法"]},{"title":"粒子群算法学习","url":"/2023/06/24/%E7%B2%92%E5%AD%90%E7%BE%A4%E7%AE%97%E6%B3%95%E7%AE%80%E5%8D%95%E5%AD%A6%E4%B9%A0/","content":"粒子群算法是一门新兴算法，此算法与遗传算法有很多相似之处，其收敛于全局最优解的概率很大。\n\n相较于传统算法计算速度非常快，全局搜索能力也很强：\nPSO对于种群大小不十分敏感，所以初始种群设为500-1000，速度影响也不大\n粒子群算法适用于连续函数极值问题，对于非线性、多峰问题均有较强的全局搜索能力。\n\n他的问题主要在于容易产生早熟收敛（尤其是在处理复杂的修峰搜索问题中）、局寻优能力较差等。PSO算法陷入局最小，主要归咎于种群在搜索空间中多样性的丢失。\n  graph TD;\n    START[粒子规模和位置和速度的初始化]-->A[计算适应度]\n    A-->B[计算个体最优值和群体最优值];\n    B-->C[更新速度和更新位置];\n    C-->D[更新适应度函数];\n    D-->E[更新个体最优值和群体最优值]\n    E-->F{满足条件?}\n    F-->|N|B\n    F-->|Y|G(输出最优解)\n\n假设求解下面函数的最优解\n$$\\begin{array}{c}\\min f(x) &#x3D; \\sum_{i&#x3D;1}^{3}[100(x_{i+1}-x_i^2)^2+(x_i-1)^2] \\x_i \\in -30,30\\end{array}$$\nfrom matplotlib import pyplot as pltimport randomimport numpy as np# 题目给出的函数def fitness_fun(pos):    return sum(100*(pos[0][1:] - pos[0][:-1])**2 + (1-pos[0][:-1])**2)class PSO:    # 粒子    class Particle:      def __init__(self,x_max,v_max,dim):        # dim维的向量        self.pos = np.random.uniform(-x_max,x_max,(1,dim))        self.v = np.random.uniform(-v_max,v_max,(1,dim))        # 记录一下个体历史最优解        self.best_pos = np.zeros((1,dim))        self.best_fitness = fitness_fun(self.pos)    def __init__(self,x_max,v_max,dim,particle_num,iter_num,tol,c1=2,c2=2,w=1):        self.x_max = x_max        self.v_max = v_max        self.dim = dim        self.particle_num = particle_num        self.iter_num = iter_num        # 循环退出条件        self.tol=tol        # 三个超参数，虽然定值可以，但前期c1大、后期c2大更好        self.c1=c1        self.c2=c2        # 惯性权重        self.w=w        # 记录全局历史最优解        self.best_pos = np.zeros((1,dim))        self.best_fitness = fitness_fun(self.best_pos)        self.fitness_val_list = []        self.__particles = [PSO.Particle(x_max,v_max,dim) for i in range(particle_num)]        # 最优解是求最小值的情况        self.operator = lambda _new,_old:_new&lt;_old    def __update_pos(self,p:Particle):        r1 = np.random.rand()        r2 = np.random.rand()        # 更新速度，就是三个向量相加，自己的惯性+朝个体历史最优解+朝全局历史最优解        p.v = self.w * p.v + self.c1*r1*(p.best_pos - p.pos) + self.c2*r2*(self.best_pos - p.pos)        # 超出最值的算作最值        p.v[p.v &gt; self.v_max] = self.v_max        p.v[p.v &lt; -self.v_max] = -self.v_max        # 更新位置        p.pos = p.pos + p.v        fitness = fitness_fun(p.pos)        # 更新个体和全局的当前最优解        if self.operator(fitness,p.best_fitness):            p.best_fitness = fitness            p.best_pos = p.pos        if self.operator(fitness,self.best_fitness):            self.best_fitness = fitness            self.best_pos = p.pos    def run(self):        for iter in range(self.iter_num):            for p in self.__particles:                self.__update_pos(p)            self.fitness_val_list.append(self.best_fitness)            if self.operator(self.best_fitness,self.tol):                breakif __name__ == &#x27;__main__&#x27;:    pso = PSO(x_max=30, v_max=60,dim=4, particle_num=8, iter_num=7000,  tol=1e-4)    pso.run()    print(&quot;最优位置:&quot; + str(pso.best_pos))    print(&quot;最优解:&quot; + str(pso.fitness_val_list[-1]))    plt.plot(range(len(pso.fitness_val_list)), pso.fitness_val_list, alpha=0.5)    plt.show()\n\n\n\nw惯性因子，值为非负。w越大，全局寻优能力越强，同时局部寻优能力越弱。动态w可以获得更好的寻优结果。\n所以一般一开始w设置较大，取全局搜索。然后越到后面就减少w进行专注的局部搜索。\n采用较多的是线性递减权值(LDW)策略，即$w_{t}&#x3D;(w_{start}-w_{end})(G_k-g)&#x2F;G_k+w_{end}，G_k是总迭代次数，w_{start}和w_{end}是最初和最后的惯性权值,g应该是当前迭代次数$\n\n\n粒子群算法的全局版和局部版：全局就是参考了全局最优值，局部就是只考虑了邻域最优值。局部越往后邻域越大，就变为全局的了。全局收敛快但容易陷入全局最优，局部收敛慢但不容易陷入全局最优\n至于局部版取邻域的方法，有按照粒子编号和当前领域大小确定、按照粒子的欧式距离取邻域\n\n注意该算法在解决具体问题时需要注意以下几点：\n\n种群大小mm很小很容易陷入局部最优，m很大，pso的优化能力很好，当种群数目增长至一定水平时，再增长将不再有显著的作用。\n权重因子对于粒子的速度更新的三部分： a. 惯性因子w&#x3D;1表示基本的粒子群算法，w&#x3D;0表示失去对粒子本身的速度记忆。 b. 自我认知部分的学习因子c1&#x3D;0表示无私型的粒子群算法，只有社会，没有自我，这样会使群体丧失多样性，从而容易导致陷入局部最优而无法跳出。 c. 社会经验部分的学习因子c2&#x3D;0表示自我型的粒子群算法，只有自我没有社会，这样导致没有信息的社会共享，算法收敛速度缓慢。这三个参数的选择非常重要，如何调整这三个参数使算法避免早熟又可以比较快的收敛，对于解决实际问题意义较大。\n最大速度速度限制的作用为：维护算法的探索能力与开发能力的平衡。vm较大时，探索能力强，但是粒子容易飞过最优解vm较小时，开发能力强，但是容易陷入局部最优解vm一般设定为每维变量变化范围的10%~20%\n停止准则 a. 最大迭代次数 b. 可以接受的满意解（通过fitness function判断是否满意）\n粒子空间的初始化较好地选择粒子的初始化空间，将大大缩短收敛时间．初始化空间根据具体问题的不同而不同，根据具体问题进行设定． 该算法为数不多的关键参数的设置却对算法的精度和效率有着显著影响．\n\n","categories":["启发式算法"]},{"title":"自勉","url":"/2024/10/09/%E8%87%AA%E5%8B%89/","content":"\n如果你不能成为大道，\n那就当一条小路；\n如果你不能成为太阳，\n那就当一颗星星。\n\n不管风吹浪打，胜似闲庭信步。\n\n不为敌之其势汹汹所吓倒，不为尚能忍耐的困难所沮丧，不为某些挫折而灰心，给予必要的耐心和持久，是完全必要的。\n\n请求原谅总比请求许可要容易。\n\n生命并没有价值，除非你选择并赋予它价值。没有哪个地方有幸福，除非你为自己带来幸福。\n\n你所浪费的今天，是昨日死去之人苦苦奢望的明天；你所厌恶的现在，是未来的你再也回不去的曾经。\n\n\n\n放下过往，去更远的地方。\n\n纵欲并非源于快乐，而是源于苦闷。\n\n\n批评他人可能会磨损或者增厚自己的批评权。\n磨损自己批评权前，先思考这件事是否值得磨损批评前，是否有其他的解决办法。\n设身处地地为他人考虑、解决问题才是批评，否则是骂人。\n理解万岁。\n\n\n人在最迷茫时该做什么？\n\n自由的极致就是可以离开任何不喜欢的人和事。\n无力爱人的煎熬就是地狱。\n\n当你的见识超过大部分人时，你就变成不受欢迎的人。\n\n不介入本身就是一种介入。\n\n要爱具体的人，不要爱抽象的人，要爱生活不要爱生活的意义。\n\n慌张，是因为准备不足。急躁，是因为经历不够。心乱，是因为思路不清。\n\n对生活感到疲惫时，有一种小技巧叫做“迷你逃跑”。去陌生的街道，大脑放空什么都不做，或者是住酒店，在浴缸里泡澡，喝一点啤酒，把自己从熟悉得有些厌倦的环境里拯救出来。\n有空的时候，建议去附近没去过的车站。我在一个看似空无一人的车站下车，然后去了我不知道的公园和咖啡店。当你在那里读书时，经常会有不错的想法和灵光一闪。\n如果你在工作中感觉压力很大焦躁不安时，我会建议你下班绕路回家。如果是为了赶时间回家加班的话，你到家时依旧焦躁不安，工作情况也不会变好。绕路回家像是一个“平静的仪式”，给自己一种“我的生活依旧被我把控”的感觉，放松一下大脑，事情说不定会更好解决。\n在遇到困境时，想像自己是一个家长，会怎么做来安慰和支持孩子，让孩子自由地表达情绪并处理他们。学会善待自己。\n在没有什么活动的普通日子里，如果想吃鳗鱼或者其他食物的时候，我就会制定今天为『鳗鱼纪念日』。把平淡无奇的日子变成纪念日，无谓的支出全部变成热气腾腾的回忆，理论上每天都可以是纪念日。\n不安的时候可以刷以前看过的旧剧。不断重刷自己喜欢的电视剧能对内心起到愈疗效果。尤其是在焦虑的时候，再刷你已经看过很多遍的剧可以让大脑释放多巴胺，熟悉的剧情和设定可以缓解焦虑，并且电视剧中的类社会关系能缓解孤独并产生更多的归属感。\n生活中有很多痛苦的事，我会提前列好一个清单：伤心的时候要去的商店。平时舍不得吃的餐厅、种类很多又很便宜的小吃一条街、或者是商品很多的超市.在伤心的时候就逃去这里。\n\n仪式化你的日常生活\n积极寻求美一自然、书籍、艺术等\n用完东西放回原位\n不常使用的东西可以捐出去\n有意识地训练自己集中注意力\n种植盆栽花卉\n花更多时间在大自然中一海滩、公园、森林\n赞美自己和他人\n保持阅读的习惯\n\n\n不要逃避，和现实一奔跑吧\n\n不要把眼神分给不像我们的人\n\n我人生的剧本，不是父母的续集，不是子女的前传，更不是朋友的外篇。\n\n有的山充满荆棘，有的山全是野兽，只有自己才是自己的那座靠山。\n\n一个人很少能赢，但总会有赢的时候。\n\n如果遇到了敌人和困难，说明选择的道路是正确的。\n\n讲话只有三个目的：\n\n让别人高兴\n让别人有劲干活，给别人传递了价值\n讲了有钱赚\n\n"},{"title":"蓝桥国赛复健","url":"/2023/06/08/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E5%A4%8D%E5%81%A5/","content":"Node.js正则匹配echartsPromise正则表达式CSSjqueryJS技巧Node.jsconst testServer = ()=&gt;&#123;    const http = require(&#x27;http&#x27;);    const url = require(&#x27;url&#x27;);    const server = http.createServer()    server.on(&#x27;request&#x27;,(req,res)=&gt;&#123;        //获取请求数据        // console.log(req.method,req.headers,req.url);        //获取请求数据        var arg = url.parse(req.url,true);\t        console.log(arg);        //返回一个数组        let data = [&#123;&#125;];        res.end(JSON.stringify(data));    &#125;)    server.listen(&#x27;8080&#x27;,()=&gt;&#123;        console.log(&quot;启动&quot;);    &#125;)&#125;const fsTest = ()=&gt;&#123;    const fs = require(&#x27;fs&#x27;);    fs.readFile(path,&#x27;utf-8&#x27;,(err,data)=&gt;&#123;        if (error) throw error;        console.log(data);    &#125;)    fs.writeFile(path, text, (err) =&gt; &#123;        if (err) throw err;        console.log(&quot;写入成功！&quot;);    &#125;);    //追加    fs.writeFile(path, text, &#123; flag: &quot;a&quot;, encoding: &quot;utf-8&quot; &#125;,(err) =&gt; &#123;        if (err) throw err;        console.log(&quot;写入成功！&quot;);    &#125;);    //删除    fs.unlink(path, (err) =&gt; &#123;        if (err) throw err;        console.log(&quot;删除成功！&quot;);    &#125;);&#125;const osTest = ()=&gt;&#123;    const os = require(&quot;os&quot;);    console.log(os.platform())&#125;const pathTest  = ()=&gt;&#123;    //路径拼接    const path = require(&#x27;path&#x27;);    const dir = &#x27;myDir&#x27;;    const file = &#x27;myFile.txt&#x27;;    const fullPath = path.join(dir, file);    //获取文件名    const filename = path.basename(fullPath);    //去除后缀的文件名    const filename2 = path.basename(fullPath, &#x27;.txt&#x27;);    //获取目录路径    const dirPath = path.dirname(fullPath);    //获取扩展名    const ext = path.extname(fullPath);    //标准化路径，即去除.和..    const nonNormalizedPath = &#x27;/home/user/myDir/../../myOtherDir/myFile.txt&#x27;;    const normalizedPath = path.normalize(nonNormalizedPath);    console.log(normalizedPath);&#125;正则匹配const testFun = ()=&gt;&#123;    let pattern = /hello/;    let result = pattern.test(&quot;hello world&quot;);    console.log(result); // 输出: true&#125;const matchTest = () =&gt;&#123;    let pattern = /world/g;    let result = &quot;hello world world&quot;.matchAll(pattern);    for(let item of result)&#123;        console.log(item)    &#125;&#125;//只能找第一个const searchTest = () =&gt;&#123;    let pattern = /world/;    let result = &quot;hello world world&quot;.search(pattern);    console.log(result); // 输出: 6&#125;//加g可以匹配所有的const replaceTest = ()=&gt;&#123;    let pattern = /world/g;    let result = &quot;hello world world&quot;.replace(pattern, &quot;Universe&quot;);    console.log(result); // 输出: &quot;hello Universe Universe&quot;&#125;let res = this.data.map(item=&gt;&#123;    // 将匹配到的子字符串替换为带有高亮样式的HTML标签    return text.replaceAll(regex,`&lt;span style=&quot;background-color: yellow;&quot;&gt;$&#123;regex&#125;&lt;/span&gt;`;);echarts\nxaxis\ndata\n\n\nyaxis\ndata\n\n\nseries[0]\ndata\n\n\n\n&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;  &lt;meta charset=&quot;UTF-8&quot;&gt;  &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;  &lt;script src=&quot; https://cdn.staticfile.org/echarts/4.3.0/echarts.min.js&quot;&gt;&lt;/script&gt;  &lt;title&gt;Document&lt;/title&gt;&lt;/head&gt;&lt;body&gt;  &lt;style&gt;    div&#123;      width: 500px;      height: 500px;    &#125;  &lt;/style&gt;&lt;div id=&quot;main&quot;&gt;&lt;/div&gt;&lt;script&gt;  const chartDom = document.getElementById(&quot;main&quot;);  const myChart = echarts.init(chartDom);  let option = &#123;      xAxis: &#123;        type: &#x27;category&#x27;,        data: [&#x27;Mon&#x27;, &#x27;Tue&#x27;, &#x27;Wed&#x27;, &#x27;Thu&#x27;, &#x27;Fri&#x27;, &#x27;Sat&#x27;, &#x27;Sun&#x27;]      &#125;,      yAxis: &#123;        type: &#x27;value&#x27;,      &#125;,      series: [        &#123;          data: [150, 230, 224, 218, 135, 147, 260],          type: &#x27;line&#x27;        &#125;      ]    &#125;;  myChart.setOption(option);&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;Promiselet flag = true;const p1 = ()=&gt;&#123;    return new Promise((resolve,reject)=&gt;&#123;        if(!flag)&#123;            resolve(&quot;success&quot;);        &#125;else&#123;            reject(&quot;sb&quot;);        &#125;    &#125;)&#125;const p2 = ()=&gt;&#123;    return new Promise((resolve,reject)=&gt;&#123;        if(flag)&#123;            setTimeout(() =&gt; &#123;                resolve(&quot;success&quot;);            &#125;, 5000);        &#125;else&#123;            reject(&quot;sb&quot;);        &#125;    &#125;)&#125;p1().then((res)=&gt;&#123;    console.log(res);&#125;).catch(err=&gt;&#123;    console.log(err);&#125;)Promise.all([p1(),p2()]).then(res=&gt;&#123;    //有一个失败就不会进来    //否则是全部的成功结果    console.log(res);&#125;).catch(err=&gt;&#123;    //只打印第一个错误    console.log(&quot;错误是&quot;,err);&#125;)//race只等一个，无论对错都输出正则表达式\n\n\n表达式\n描述\n\n\n\n[a-z]\n查找任何从小写 a 到小写 z 的字符\n\n\n[A-Z]\n查找任何从大写 A 到大写 Z 的字符\n\n\n[0-9]\n查找任何从 0 至 9 的数字\n\n\n[abc]\n查找括号内的任意一个字符\n\n\n[^abc]\n查找除了括号内的任意字符\n\n\n常用的元字符（特殊字符）\n\n\n字符\n描述\n\n\n\n\\w\n匹配数字、字母、下划线\n\n\n\\W\n匹配非数字、字母、下划线\n\n\n\\d\n匹配数字\n\n\n\\D\n匹配非数字\n\n\n\\s\n匹配空白字符（空格、换行）\n\n\n\\S\n匹配非空白字符\n\n\n\\n\n匹配换行符\n\n\n常用的限定符\n\n\n字符\n描述\n\n\n\n*\n匹配前面的子表达式零次或多次\n\n\n+\n匹配前面的子表达式一次或多次\n\n\n?\n匹配前面的子表达式零次或一次\n\n\n{n}\n匹配确定的 n 次\n\n\n{n,}\n至少匹配 n 次\n\n\n{n,m}\n最少匹配 n 次且最多匹配 m 次\n\n\n常用的修饰符\n\n\n修饰符\n描述\n\n\n\ni\n执行对大小写不敏感的匹配。\n\n\ng\n执行全局匹配（查找所有匹配而非在找到第一个匹配后停止）。\n\n\nm\n执行多行匹配。\n\n\n其他\n\n\n修饰符\n描述\n\n\n\n^\n以…开始\n\n\n$\n以…结束\n\nCSS选择器div[id !&#x3D;’item2’]body[class ^&#x3D;’c’]body[class $&#x3D;’c’]\n:first\t选取指定元素的第一个该元素。:last\t选取指定元素的最后一个该元素。:odd\t选取指定元素序号为奇数的所有该元素。:even\t选取指定元素序号为偶数的所有该元素。:eq(n)\t选取指定元素的第 n 个该元素。:lt(n)\t选择指定元素中小于 n 的所有该元素。:gt(n)\t选取指定元素中大于 n 的所有该元素。\n:visible\t选取所有可见元素。:hidden\t    选取所有不可见元素。\n:contains(text)\t对包含指定 text 文本的元素进行操作。:has(selector)\t对包含指定选择器的元素进行操作。:parent\t对含有文本或者子元素的元素进行操作。:empty\t对空元素进行操作。\n:input\t选取所有 input 元素。:button\t选取所有 input 类型为 button 的元素。:submit\t选取所有 input 类型为 submit 的元素。:reset\t选取所有 input 类型为 reset 的元素。:text\t选取所有 input 类型为 text 的元素。:textarea\t选取所有多行文本框。:password\t选取所有 input 类型为 password 的元素。:radio\t选取所有 input 类型为 radio 的元素。:checkbox\t选取所有 input 类型为 checkbox 的元素。:image\t选取所有图片域。:file\t选取所有 input 类型为 file 的元素。\n:checked\t选取所有被选中的表单元素。:selected\t选取被选中的表单元素项。:enabled\t选取所有可用的表单元素。:disabled\t选取所有不可用的表单元素。:read-only\t选取只读权限的表单元素。:focus\t选取所有获得焦点的表单元素。\n:focus\t给获取焦点的元素设置样式。::selection\t给页面中被选中的文本内容设置样式。:checked\t给被选中的单选框或者复选框设置样式。:enabled\t给可用的表单设置样式。:disabled\t给不可用的表单设置样式。:read-only\t给只读表单设置样式。:read-write\t给可读写的表单元素设置样式。:valid\t验证有效。:invalid\t验证无效。\ntext-shadow: x-offset y-offset blur color;text-shadow: 4px 4px 3px rgb(0, 255, 179);\ntext-overflow: clip|ellipsis;clip\t修剪文本。ellipsis\t显示省略符号来代表被修剪的文本。\nbox-shadow: h-shadow v-shadow blur spread color inset;box-shadow: 10px 10px 5px #26ad8c;\ntransformtransform: rotate(60deg);transform: translateX(20px);transform: scaleX(2);\ntransition: transform 1s ease-in-out;\ntransition: 指定属性 持续时间 速度曲线 开始时间;transition-property: 属性值; &#x2F;指定属性名&#x2F;transition-duration: 属性值; &#x2F;完成过渡这一过程的时间&#x2F;transition-timing-function: 属性值; &#x2F;速度曲线&#x2F;transition-delay: 属性值; &#x2F;过渡的开始时间&#x2F;\n@keyframes 动画名{    0% {样式属性：属性值;}    25% {样式属性：属性值;}    50% {样式属性：属性值;}    100% {样式属性：属性值;}}\nanimation: 动画名 完成动画的周期 是否重复;animation-name\t规定 @keyframes 动画的名称。animation-duration\t规定动画完成一个周期所花费的秒或毫秒。默认是 0。animation-timing-function\t规定动画的速度曲线。默认是 “ease”。animation-fill-mode\t规定当动画不播放时（当动画完成时，或当动画有一个延迟未开始播放时），要应用到元素的样式。animation-delay\t规定动画何时开始。默认是 0。animation-iteration-count\t规定动画被播放的次数。默认是 1。animation-direction\t规定动画是否在下一周期逆向地播放。默认是 “normal”。\ninfinite\nflex-wrap: nowrap|wrap|wrap-reverse|initial|inherit;\nalign-items: flex-start | flex-end | center | baseline | stretch;&#x2F;&#x2F;多行align-content: flex-start | flex-end | center | space-between | space-around |  stretch;\n @media screen and (min-width: 800px) {    body {        background-color: green;    }}\nall\t适用于所有设备print\t用于打印机和打印预览screen\t用于电脑屏幕，平板电脑，智能手机等speech\t用于屏幕阅读器等发声设备\nmax-width\t定义输出设备中的页面最大可见区域宽度max-height\t定义输出设备中的页面最大可见区域高度min-width\t定义输出设备中的页面最小可见区域宽度min-height\t定义输出设备中的页面最小可见区域高度orientation\t视口（viewport）的旋转方向。portrait ：表示 viewport 处于纵向，即高度大于等于宽度 ； landscape ：表示 viewport 处于横向，即宽度大于高度\n\n\n\n\n.son{    position:absolute;    left:50%;    top:50%;    transform:translate(-50%,-50%);}.father{    display:relative;}\n.nav{    display:flex;    justify-content:space-between;}.nav &gt; .left{}.nav &gt; .right{}Jquery子级插入方法，包括 prepend()、prependTo()、append()、appendTo()。同级插入方法，包括 before()、insertBefore()、after()、insertAfter()。\nremove()empty()\n$(A).replaceWith(B);&#x2F;&#x2F; 将 A 替换为 B$(B).replaceAll(A);\n$().each(function (index, element) {});\n$().ery对象.attr(“属性名”); &#x2F;&#x2F; 获取属性jQuery对象.attr(“属性名”, “属性值”); &#x2F;&#x2F; 修改属性\n$().removeAttr(“属性名”);\n$().css(“属性名”, “属性值”);\n$().addClass(“类名”);\n$().html(“内容”);\n$().text(“内容”);$().val(“内容”);\n$().show();$().show();\n$().fadeIn(speed, easing, callback);$().fadeOut(speed, easing, callback);\n$(“li”).parent()$().prev();$().preAll();\n$().next();$().nextAll();\n$().siblings();$().children();\n$().find(selector);\n$().hasClass(“类名”);\n$().eq(n);\n$().is(selector);$().not(selector|function)\n&#x2F;&#x2F;已知某个li，获取他在li中的下标，并对他的下一个进行操作let target_li &#x3D; …let idx &#x3D; $(‘li’).index(target_li);$(‘li’).eq(idx+1).do();JS&#x2F;&#x2F;字符串apiincludes(s)startsWith(s)endsWith(s)replaceAll(old,new)\nlet arr &#x3D; Array.of(7, 8, 9);var arr &#x3D; Array.from(arrLike);\n&#x2F;&#x2F;数组apiarr.find(function (value, index) {  console.log(value &gt; 2);  console.log(index);  return value &gt; 2;});let result &#x3D; arr.findIndex(function (value, index) {  return value &#x3D;&#x3D; “兔子”;});fill()arr.entries()arr.keys()arr.values()\n&#x2F;&#x2F;ObjectObject.is(a,b)\n&#x2F;&#x2F;Promisereturn new Promise(function (resolve, reject) {    if(){resolve(a)}    else reject(b)  });\nPromise.all([p1(5), p1(6), p1(7)]).then(  function (v) {    console.log(v);  },  function (e) {    console.log(e);  });\nPromise.race([loadData(), timeOut()]).then(  function (d) {    console.log(d);  },  function (e) {    console.log(e);  });\n&#x2F;&#x2F;所有的Promise结束之后打印function p(v) {  return new Promise(function (resolve) {    setTimeout(function () {      &#x2F;&#x2F; 在 p 函数执行时，将函数的实参值 v ，作为执行成功回调函数的返回值。      resolve(v);    }, 2000);  });}async function fn() {  await Promise.all([p(“a”), p(“b”), p(“c”)]);  console.log(“隐藏加载动画！”);}fn();\n&#x2F;&#x2F;proxyvar proxy &#x3D; new Proxy(dog, {  get(target, propKey) {    &#x2F;&#x2F; 遍历目标对象的属性键值    if (propKey in target) {      return target[propKey]; &#x2F;&#x2F; 返回相应的属性值    } else {      throw new ReferenceError(propKey + “ 属性不存在”);    }  },});\njs获取日期let now &#x3D; new Data();now.setTime(now.getTime()+1000606024i);getDate()\t返回一个月的某一天。getDay()\t返回一周中的某一天。getFullYear()\t返回年份。getHours()\t返回小时。getMonth()\t返回月份。getTime()\t返回毫秒数。setFullYear()\t设置年份。setDate()\t设置一个月中的某一天。setMonth()\t设置月份。\nMath.abs(x)\t返回一个数的绝对值。Math.pow(x, y)\t返回一个数的 y 次幂。Math.random()\t返回一个 0 到 1 之间的伪随机数。Math.sqrt(x)\t返回一个数的平方根。Math.round()\t返回四舍五入后的整数。Math.exp(x)\t返回欧拉常数的参数次方。\narr.slice(s,e)和spliceshift pusharr1.concat(arr2)\n.toLowerCase();.toUpperCase();\ns.charAt(下标值);s.substring();\ns.replace(old,new\nvar arr &#x3D; str.split(“,”);\nparent.appendChild(child);\n&#x2F;&#x2F;判断对象为空function isEmptyObject(obj) {  for (let o in obj) {    return false;  }  return true;}\n&#x2F;&#x2F;从idx开始删除1个元素arr.splice(idx,1)技巧box-sizingbox-sizing: content-box || border-box;\n这里推荐使用的是border-box\n如下图content-box(默认是这个)，可以发现内容的宽高是按着给定的100来的，但是实际盒子的长宽还要加上$2padding+2border+2*margin$，可能和需求就不一致了\nwidth: 100px;border: 5px solid black;padding:11px;margin: 1px;background-color: blue;height: 100px;\n重点是这个！如下图border-box(只加了那一行)，可以发现整个盒子的宽高是$100+margin$，内容的宽高是按照$100-2padding-2border$来的，会好一点\nwidth: 100px;border: 5px solid black;padding:11px;margin: 1px;background-color: red;height: 100px;box-sizing: border-box;\n明显用了border-box的小一些\n水平居中.demo1&#123;\twidth:1024px;\tmargin:0 auto;&#125;.demo2-father&#123;\tdisplay:flex;\tjustify-content:center;&#125;.demo2&#123;&#125;\n\n导航栏一边居左一边居右.nav&#123;\tdisplay:flex;\tjustify-content:space-between;&#125;.nav &gt; .left&#123;&#125;.nav &gt; .right&#123;&#125;\n\n垂直居中.demo1-father&#123;\tdisplay:flex;\talign-items:center;&#125;.demo1&#123;&#125;.demo2&#123;\theight:100px;\tline-height:100px;&#125;\n水平垂直居中.son&#123;\tposition:absolute;\tleft:50%;\ttop:50%;\ttransform:translate(-50%,-50%);&#125;.father&#123;\tdisplay:relative;&#125;\n\n\n获取数据类型def getType()&#123;\treturn Object.prototype.toString\t  .call(target)\t  .slice(8, -1) // 这种写法也可以。\t  .toLocaleLowerCase();&#125;\n\n判断对象是否为空function isEmptyObject(obj) &#123;  for (let o in obj) &#123;    return false;  &#125;  return true;&#125;\n\n位置伪类的使用伪类选择器\nJqueryitem.next()item.prev()//已知某个li，获取他在li中的下标，并对他的下一个进行操作let target_li = ...let idx = $(&#x27;li&#x27;).index(target_li);$(&#x27;li&#x27;).eq(idx+1).do();\n\nJS获取表单元素let myForm = document.querySelector(&#x27;#myForm&#x27;);let form = new FormData(myForm);//获取input、单选框的值let name = form.get(&#x27;name&#x27;);let sex = form.get(&#x27;sex&#x27;);//获取多选框的值//habbits是选中的元素的下标let habbits = form.getAll(&#x27;habbit&#x27;);habbits = habbits.map(idx=&gt;&#123;...&#125;)\n\nJS设置属性let item = ...item.innerText = &#x27;&#x27;\n\nJS的map()和filter()map和filter都是基于原数组，产生新数组map趋向于改造数组，重新处理每一个item，可以认为是一个foreach，返回每个新的数组元素filter趋向于筛选数组元素，返回布尔值表示是否要将该元素放入新数组\\\n字符串查找arr.includes(var) //数组中是否有某值(python的in)\n补全搜索return this.data.filter(item=&gt;&#123;  return item.name.toUpperCase().includes(this.searchQuery.toUpperCase());&#125;)\n\n悬停父元素，改变子元素#box:hover #item\n\nAxiosaxios(&#123;  method: &#x27;post&#x27;,  url: &#x27;/user/12345&#x27;,  data: &#123;    firstName: &#x27;Fred&#x27;,    lastName: &#x27;Flintstone&#x27;  &#125;&#125;).then(function (response) &#123;  console.log(response);&#125;).catch(function (error) &#123;  console.log(error);&#125;).finally(function () &#123;  // always executed&#125;);  \nget是param，post是data\n读取本地json\naxios.get(&quot;/data.json&quot;).then((res) =&gt; &#123;  console.log(res);&#125;).catch((error) =&gt; &#123;  console.log(res);&#125;);axios(&#123;  method:&quot;get&quot;,  url:&quot;./goodsList.json&quot;&#125;).then(res=&gt;&#123;  console.log(res);&#125;)\nNode服务端添加链接描述\nconst http = require(&#x27;http&#x27;);const url = require(&#x27;url&#x27;);const querystring = require(&quot;querystring&quot;);const server = http.createServer()server.on(&#x27;request&#x27;,(req,res)=&gt;&#123;    //获取请求数据    // console.log(req.method,req.headers,req.url);    //获取请求数据    var arg = url.parse(req.url).query;\t//将arg参数字符串反序列化为一个对象\tvar params = querystring.parse(arg);    console.log(params);    //返回一个数组    let data = [&#123;name:params[&#x27;name&#x27;]&#125;];    res.end(JSON.stringify(data));&#125;)server.listen(&#x27;8080&#x27;,()=&gt;&#123;    console.log(&quot;启动&quot;);&#125;)\n\nVue2可用的CDN\n&lt;script src=&quot;https://cdn.bootcdn.net/ajax/libs/vue/2.6.13/vue.js&quot;&gt;&lt;/script&gt;\nvar app = new Vue(&#123;\tel:&quot;#app&quot;,\tdata:&#123;\t  msg:&quot;qwer&quot;\t&#125;,\tcomputed: &#123;\t  reverseName: function () &#123;\t    return this.msg.split(&quot;&quot;).reverse().join(&quot;&quot;);\t  &#125;,\t&#125;,\twatch: &#123;\t  msg: function (newVal, oldVal) &#123;\t    alert(&quot;新值&quot; + newVal + &quot;----&quot; + &quot;旧值&quot; + oldVal);\t  &#125;,\t&#125;,\t created() &#123;        alert(          &quot;在实例创建完成后被立即调用,挂载阶段还没开始，$el 属性目前不可见&quot;        );      &#125;,      mounted() &#123;        alert(&quot;el 被新创建的 vm.$el 替换，并挂载到实例上去之后调用该钩子&quot;);      &#125;,&#125;)\n变异方法，直接改变数组内容，并自动更新，注意unshift\npush()pop()shift()unshift()splice()sort()reverse()\nVue2少用watch方法\n@dragstart=&quot;ds($event,good)&quot;\nCSS变量//取色器的change事件，修改css变量document.getElementById(&#x27;color1&#x27;).addEventListener(&#x27;change&#x27;,(e)=&gt;&#123;    let newValue = e.target.value;    document.querySelector(&#x27;:root&#x27;).style.setProperty(&quot;--color1&quot;,newValue);&#125;);\n\n:root &#123;  --color1: #00dbde;  --color2: #fc00ff;&#125;\n\n正则表达式var regexp_1 = /a/;regexp_1.test(str)\nRadioradio必须有不同的label才能被单选中\nVue修改数组this.$set(this.obj.list, 1, &#123; name: &#x27;小红&#x27;,age: 18&#125;)\n\n字符串查找s.indexOf(s);-1\n\n\nvuex用了namespace时，namespaced: true,则store.state.user.username，注意user是子模块，或者store.getters[‘user&#x2F;username’]\nJSONJSON.stringfy()JSON.parse()\nArray的sort 全部自定义，同时返回值要是正负而不是布尔，用a-b \nGrid学习Grid教程\nFlex学习Flex学习\neval字符串转表达式\nconst sum = (a,b)=&gt;&#123; return a+b; &#125;let res;try&#123;    res = eval(&#x27;sum(10,20)&#x27;);&#125;catch(e)&#123;    res = 0;&#125;console.log(res);\n","categories":["前端"],"tags":["Node","HTML","CSS","JavaScript","Vue"]},{"title":"解决方案记录","url":"/2023/05/10/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%E8%AE%B0%E5%BD%95/","content":"前端\n踩坑日记：如何修复“Issues with peer dependencies found ”错误\n\n后端\nAttributeError: module ‘numpy‘ has no attribute ‘long‘\n\n运维测试其他\nwindows查看并杀死进程\n\n","categories":["trick"]},{"title":"蚁群算法求TSP","url":"/2023/06/27/%E8%9A%81%E7%BE%A4%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/","content":"\n  \n    \n      该主题不支持Latex的cases效果。。。\n\n    \n    \n      公式随便看看吧。。。无语死了\n\n    \n  \n路径选择概率：$$p_i&#x3D;\\frac{\\tau_i^\\alpha \\eta_i^\\beta}{\\sum^m_{j&#x3D;1} \\tau_j^\\alpha \\eta_j^\\beta}$$\n$$其中\\tau_i表示第i条路径的信息素浓度，\\eta_i表示第i条路径的路径信息，m表示路径总数。$$\n$$一般\\eta_i&#x3D;\\frac{1}{d_i}，表示路径越短，选择的概率越大，\\alpha 和\\beta 是两者的贡献度参数。这个概率就是和所有路径的比值。$$\n$$同时信息素浓度\\tau_i&#x3D;(1-\\rho)\\tau_i+\\Delta\\tau_i$$\n$$其中\\rho 代表信息素的挥发率，\\Delta\\tau_i 表示新增加的信息素$$\n在旅行商中$$第k只蚂蚁在城市i，下一个城市选为j的概率：$$\n$$p_{ij}^k(t) &#x3D;\\begin{cases}\\frac{(\\tau_{ij}(t))^\\alpha (\\eta_{ij}(t))^\\beta}{\\sum_{l\\in 未被访问的城市}(\\tau_{il}(t))^\\alpha (\\eta_{il}(t))^\\beta}, &amp; j \\in 未被访问的城市 \\0, &amp; otherwise \\\\end{cases}$$\n$$注意蚂蚁不会重复访问同一城市，所以有otherwise$$\n对于信息素$$城市ij间的信息素从\\tau_{ij}(t)-&gt;\\tau_{ij}(t+n)，因为是一次旅行商后才更新信息素，一次周期为n个单位时间$$\n$$\\tau_{ij}(t+n)&#x3D;(1-\\rho)\\tau_{ij}(t)+\\Delta\\tau_{ij}$$\n$$\\Delta\\tau_{ij}^k&#x3D;\\sum_{k&#x3D;1}^m\\Delta\\tau^k_{ij}$$\n$$\\Delta_{ij}^k&#x3D;\\begin{cases}\\frac{Q}{L^k}, &amp; if;蚂蚁有从i-&gt;j \\0, &amp; otherwise \\\\end{cases}$$\n$$其中Q为常量，L^k为该只蚂蚁此次回路的总长，即走的回路越长，信息素越淡，越不会被其他蚂蚁选择$$\n进一步改进扔色子，两种策略\n\n利用重复走历史最优路径，收敛更快，但容易陷入局部最优\n探索随机挑一种路径选择，即上面讲到的路径选择概率\n\n进进一步改进之前的更新信息素方法，是一只蚂蚁访问完一条回路才更新现在我们提出局部更新和全局更新\n\n局部更新我们现在在蚂蚁移动一次城市时就马上更新$$\\tau_{ij}&#x3D;(1-\\rho)\\tau_{ij}+\\rho\\Delta\\tau_{ij}\\Delta\\tau{ij}的意思是：$$\n\n$$此时蚂蚁从i到j了，再看从j伸出的边里面的最大信息素边，再乘个系数，即下面公式$$\n$$\\Delta\\tau{ij} &#x3D; \\gamma{max_k\\tau_{jk}}$$\n$$这考虑了i-&gt;j的当前边的信息素，也考虑了将来的信息素(强化学习常用)$$\n\n全局更新还是访问完一条回路才更新，但是仅仅对当前最优回路上$L^{opt}$的边添加信息素$$\\tau_{ij}&#x3D;(1-\\alpha)\\tau_{ij}+\\alpha\\Delta\\tau{ij}$$$$\\Delta\\tau_{ij}&#x3D;\\begin{cases}\\frac{1}{L^{opt}} ,&amp; if; l_{ij} \\in L^{opt}\\0, &amp; otherwise\\end{cases}$$\n\n其他\n蚂蚁行走释放量的常见方法：\n蚁周算法（ant-cycle):蚂蚁走完整个路径后，蚂蚁行走释放部分用$\\frac{Q}{L}$计算，Q表示蚂蚁释放信息素的量(常量)，L表示路径总长度）\n蚁密算法（ant-density):，蚂蚁走完一个城市后，蚂蚁行走释放用$Q$表示）、\n蚁量算法(ant-quantity):蚂蚁走完一个城市后，蚂蚁行走释放用$\\frac{Q}{d_{ij}}$表示，$d_{ij}$表示城市i和j之间的距离)。\n\n\n$\\alpha$为信息素重要程度因子, 其值越大, 蚂蚁选择之前走过的路径可能性就越大,搜索路径的随机性减弱, 其值越小,蚁群搜索范围就会减少,容易陷入局部最优。一般取值范围为[0,5]。$\\beta$为启发函数重要程度因子, 其值越大, 表示启发函数在转移中的作用越大, 即蚂蚊会以较大的摡率转移到距离短的节点，蚁群就越容易选择局部较短路径,这时算法的收敛速度是加快了，但是随机性却不高，容易得到局部的相对最优。一般取值范围为[0,5]。\n在蚂蚁挑选下一个点时，对于各边的概率，可以使用轮盘赌而不是直接按概率大小来，这样可以扩大搜索范围，避免陷入局部最优\n\n# 但是好像耗时和结果还是不如其他人博客里的，后面再看看https://blog.csdn.net/weixin_42301220/article/details/125129090?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522168787192116800184129751%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=168787192116800184129751&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-2-125129090-null-null.142^v88^koosearch_v1,239^v2^insert_chatgpt&amp;utm_term=%E8%9A%81%E7%BE%A4%E7%AE%97%E6%B3%95python&amp;spm=1018.2226.3001.4187import matplotlib.pyplot as pltimport numpy as npclass Graph:    class Edge:        # 两点的坐标        def __get_distance(self,coor_a,coor_b):            dis = 0            for i in range(len(coor_a)):                dis += (coor_a[i]-coor_b[i])**2            return np.sqrt(dis)        # 边的起点和终点的编号，所有点的坐标，信息素        def __init__(self,begin,end,coordinates,pheromone=1):            self.begin = begin            self.end = end            self.pheromone = pheromone            self.distance = self.__get_distance(coordinates[begin],coordinates[end])    # data是图的二维的所有边    def __init__(self,coordinates):        node_num = len(coordinates)        self.data = [[Graph.Edge(i,j,coordinates) for j in range(node_num)] for i in range(node_num)]class Ant:    # 图，起点，计算概率的两个超参数    def __init__(self,graph,begin,alpha,beta):        self.graph = graph        self.begin = begin        self.__visited = [False for _ in range(len(graph.data))]        self.__visited[begin] = True        self.__tour_len = 0        self.__cur_node = begin        self.alpha = alpha        self.beta = beta        self.__tour = [begin]    # 计算获得下一步去哪个城市(选哪个边)    def __next_node(self)-&gt;int:        # 与当前所在结点相邻的各边的概率        probs = []        # 与当前所在结点相邻的各边的概率总和        total_prob = 0.0        for next_edge in self.graph.data[self.__cur_node]:            p = 0            if not self.__visited[next_edge.end]:                p = (next_edge.pheromone ** self.alpha) * ((1.0 / next_edge.distance) ** self.beta)                total_prob += p            probs.append(p)        probs = list(map(lambda p:p/total_prob,probs))        # 轮盘赌        next_node_idx = np.random.choice([i for i in range(len(probs))], size=1, p=probs, replace=False)        return next_node_idx[0]    # 正式前往下一个    def to_next(self):        next_node =self.__next_node()        self.__visited[next_node] = True        self.__tour_len += self.graph.data[self.__cur_node][next_node].distance        self.__cur_node = next_node        self.__tour.append(self.__cur_node)    def get_tour_len(self):        last_node = self.__tour[-1]        last_edge_len = self.graph.data[last_node][self.begin].distance        return self.__tour_len + last_edge_len    def get_tour(self)-&gt;list:        return self.__tour + [self.begin]class ACO:    # 蚂蚁数量，图，蚂蚁数，迭代数，挥发率，两个超参数，新增信息素计算公式里的Q    def __init__(self,num_ant=500,num_iter=100,evaporation_rate=0.1,alpha=1.0,beta=5.0,Q=1):        self.num_ant = num_ant        self.num_iter = num_iter        self.alpha = alpha        self.beta = beta        self.Q = Q        self.evaporation_rate = evaporation_rate        self.shortest_tour_len = float(&#x27;inf&#x27;)        self.shortest_tour = None    def run(self,graph:Graph,begin):        shortest_tour_len_records = []        node_num = len(graph.data)        for iter in range(self.num_iter):            # 每一次迭代换一批蚂蚁            ants = [Ant(graph,begin,self.alpha,self.beta) for _ in range(self.num_ant)]            for ant in ants:                # 蚂蚁走完一圈                for _ in range(node_num-1):                    ant.to_next()                # 比较，取最小值                tour_len = ant.get_tour_len()                if tour_len &lt; self.shortest_tour_len:                    self.shortest_tour_len = tour_len                    self.shortest_tour = ant.get_tour()            # 更新走过的边            for i in range(node_num):                for j in range(node_num):                    # 挥发一部分信息素                    graph.data[i][j].pheromone *= (1 - self.evaporation_rate)                    # 每只蚂蚁都留下信息素                    for ant in ants:                        tour_len = ant.get_tour_len()                        pre_node = ant.begin                        for cur_node in ant.get_tour()[1:]:                            graph.data[pre_node][cur_node].pheromone += self.Q / tour_len                            pre_node = cur_node            # 记录方便画图            shortest_tour_len_records.append(self.shortest_tour_len)        return self.shortest_tour,self.shortest_tour_len,shortest_tour_len_records# 坐标数据coordinates = np.array([[565.0,575.0],[25.0,185.0],[345.0,750.0],[945.0,685.0],[845.0,655.0],            [880.0,660.0],[25.0,230.0],[525.0,1000.0],[580.0,1175.0],[650.0,1130.0],            [1605.0,620.0],[1220.0,580.0],[1465.0,200.0],[1530.0,  5.0],[845.0,680.0],            [725.0,370.0],[145.0,665.0],[415.0,635.0],[510.0,875.0],[560.0,365.0],            [300.0,465.0],[520.0,585.0],[480.0,415.0],[835.0,625.0],[975.0,580.0],            [1215.0,245.0],[1320.0,315.0],[1250.0,400.0],[660.0,180.0],[410.0,250.0],            [420.0,555.0],[575.0,665.0],[1150.0,1160.0],[700.0,580.0],[685.0,595.0],            [685.0,610.0],[770.0,610.0],[795.0,645.0],[720.0,635.0],[760.0,650.0],            [475.0,960.0],[95.0,260.0],[875.0,920.0],[700.0,500.0],[555.0,815.0],            [830.0,485.0],[1170.0, 65.0],[830.0,610.0],[605.0,625.0],[595.0,360.0],            [1340.0,725.0],[1740.0,245.0]])aco = ACO(num_ant=45,num_iter=100)g = Graph(coordinates)begin = 0tour,length,records = aco.run(g,begin)print(tour,length)plt.plot(range(100),records)plt.show()\n\n","categories":["启发式算法"]},{"title":"Hexo安装资源压缩插件报错，Command failed: C:\\Windows\\system32\\cmd.exe /s /c \"autoreconf -ivf\"","url":"/2021/10/11/%E8%B5%84%E6%BA%90%E5%8E%8B%E7%BC%A9%E6%8F%92%E4%BB%B6%E6%8A%A5%E9%94%99/","content":"解决方案参考 这篇文章 的解决方案3.\n\n  \n    \n      修改windows的hosts文件\n\n    \n    \n      修改C:\\Windows\\System32\\drivers\\etc\\hosts添加一行151.101.76.133    raw.githubusercontent.com\n\n    \n  \n然后就可以愉快安装了\nnpm install hexo-all-minifier --save","categories":["报错解决"],"tags":["hexo","npm","windows"]},{"title":"跳表练习","url":"/2022/02/02/%E8%B7%B3%E8%A1%A8%E7%BB%83%E4%B9%A0/","content":"看《数据结构与算法之美》练手写了一下跳表一开始自己只看了思路，写了一晚上还是有两个小bug所以第二次写参考了一下别的博客\n\n跳表的java实现\n\n算是写出了个能用的吧(应该)\nimport java.util.*;/** * @author 20级三班刘宇阳 * @create 2022/2/2 *//** * 跳表类 * @param &lt;T&gt; 泛型 */public class SkipList&lt;T&gt;&#123;    /**     * 跳表结点内部类     */    private class Node&#123;        //前后上下        private Node next,pre,up,down;        private Integer key;        private T value;        public Node(int key,T value)&#123;            this.key = key;            this.value = value;        &#125;        public Node getNext() &#123; return next; &#125;        public void setNext(Node next) &#123; this.next = next; &#125;        public Node getPre() &#123; return pre; &#125;        public void setPre(Node pre) &#123; this.pre = pre; &#125;        public Node getUp() &#123; return up; &#125;        public void setUp(Node up) &#123; this.up = up; &#125;        public Node getDown() &#123; return down; &#125;        public void setDown(Node down) &#123; this.down = down; &#125;        public int getKey() &#123; return key; &#125;        public void setKey(int key) &#123; this.key = key; &#125;        public T getValue() &#123; return value; &#125;        public void setValue(T value) &#123; this.value = value; &#125;        @Override        public String toString() &#123;            return &quot;Node&#123;&quot; +                    &quot;key=&quot; + key +                    &quot;, value=&#x27;&quot; + value + &#x27;\\&#x27;&#x27; +                    &#x27;&#125;&#x27;;        &#125;    &#125;    //使tail有哨兵作用    private static final int MAX_KEY = Integer.MAX_VALUE;    //使head有哨兵作用    private static final int MIN_KEY = Integer.MIN_VALUE;    //掷骰子    private static final Random random = new Random();    //当前跳表内索引层的最大值    private int currentMaxLevel = 1;    //头尾结点，两个哨兵    private Node head,tail;    //当前跳表内存储了多少个元素(不包括索引结点)    private int size = 0;    public SkipList()&#123; clear(); &#125;    /**     * 重置当前的状态,也可用于初始化     */    public void clear()&#123;        //重置层数        setCurrentMaxLevel(1);        //设置头尾        setHead(new Node(MIN_KEY,null));        setTail(new Node(MAX_KEY,null));        //连接头尾        horizontalLink(getHead(),getTail());    &#125;    //掷骰子，1即可以向上，否则不行    private boolean canUpgrade()&#123;        return getRandom().nextInt(2)==1;    &#125;    /**     * 竖直方向连接两个结点(作为内部其他方法的工具方法)     * @param down 下方结点     * @param up 上方结点     */    private void verticalLink(Node down,Node up)&#123;        down.setUp(up);        up.setDown(down);    &#125;    /**     * 水平方向连接两个结点(作为内部其他方法的工具方法)     * @param pre 前面的结点     * @param next 后面结点     */    private void horizontalLink(Node pre,Node next)&#123;        pre.setNext(next);        next.setPre(pre);    &#125;    /**     * 插入结点操作(作为内部其他方法的工具方法)     * @param pre 插入位置的前一个结点     * @param cur 要插入的结点     */    private void insertAfter(Node pre,Node cur)&#123;        Node next = pre.getNext();        horizontalLink(pre,cur);        horizontalLink(cur,next);    &#125;    /**     * 寻找结点     * @param key     * @return 如果存在key,则返回对应node,否则返回小于该key值的最后一个结点     */    private Node findNode(int key)&#123;        Node node = getHead();        while(true)&#123;            while (node.getNext().getKey()&lt;=key&amp;&amp;node.getNext().getKey() != MAX_KEY)&#123;                node = node.getNext();            &#125;            if(node.getDown() != null)&#123;                node = node.getDown();            &#125;else &#123;                break;            &#125;        &#125;        return node;    &#125;    /**     *  1.先查找到需要插入的地方     *  2.执行插入     *  3.判定需不需要进行升层     * @param key    插入节点的key     * @param value  插入节点的value     */    public void put(int key,T value)&#123;        Node node = findNode(key);        if(node.getKey() == key)&#123;            node.setValue(value);        &#125;else&#123;            //1.创建出节点            Node cur = new Node(key,value);            //2.插入节点            insertAfter(node,cur);            //用作判定是否超过现有的层数            int currentLevel = 1;            //3.判定需不需要进行升层，使用抛硬币的方法,1/2的概率            boolean canUpGradeFlag=canUpgrade();            Node pre=node;            while(canUpGradeFlag)&#123;                //1.currentLevel                if(currentLevel&gt;=getCurrentMaxLevel())&#123;                    //2.此时先提高层数                    setCurrentMaxLevel(getCurrentMaxLevel()+1);                    //3.创建出两端                    Node newHead = new Node(MIN_KEY,null);                    Node newTail = new Node(MAX_KEY,null);                    //4.水平上的连接                    horizontalLink(newHead,newTail);                    //5.上下的承接                    verticalLink(getHead(),newHead);                    verticalLink(getTail(),newTail);                    //6.赋值                    setHead(newHead);                    setTail(newTail);                &#125;                //7.找到上方该插入位置的前后结点                while(pre.getUp() == null)&#123;                    pre = pre.getPre();                &#125;                //得到上一层要插入位置的前一个结点                pre = pre.getUp();                 //8.新建关于当前插入节点的上层节点                Node up = new Node(key, null);                //插入节点                insertAfter(pre,up);                //层次关系                verticalLink(cur,up);                //迭代更新下方结点，方便垂直连接该插入结点的各索引层                cur = up;                //更新flag                canUpGradeFlag = canUpgrade();                //当前结点的索引层数加一                currentLevel++;            &#125;            //节点数加一            setSize(getSize()+1);        &#125;    &#125;    /**     *  1.先查找到需要删除的key     *  2.如果没有就返回     *  3.找到后从底向上开始删除     * @param key 要删除的节点的key     */    public boolean remove(int key)&#123;        Node node = findNode(key);        if(node.getKey()!=key)&#123; return false; &#125;        else&#123;            int currentLevel=0;            while(node != null)&#123;                Node pre = node.getPre();                Node next = node.getNext();                //水平方向断开该结点                horizontalLink(pre,next);                //当该层除头尾结点外无结点时，说明该层包括以上层都可以舍弃了,进行一个新的更                //结点的销毁是GC的事，我们只需要断开连接                if(pre.getNext().getKey() == MAX_KEY &amp;&amp; pre.getKey() == MIN_KEY&amp;&amp;getCurrentMaxLevel()&gt;1)&#123;                    setHead(pre.getDown());                    setTail(next.getDown());                    getHead().setUp(null);                    getTail().setUp(null);                    //记得拿当前的层数更新跳表层数                    setCurrentMaxLevel(currentLevel);                    break;                &#125;                node = node.getUp();                currentLevel++;            &#125;            //节点数减一            setSize(getSize()-1);            return true;        &#125;    &#125;    public T get(int key)&#123;        Node node=findNode(key);        if(node.getKey()!=key)&#123;            return null;        &#125;        return node.getValue();    &#125;    /**     * 范围查询(左闭右闭)     * @param start 起始key     * @param end   终止key     * @return 内容为&lt;key,value&gt;的链表集合     */    public List&lt;Map&lt;Integer,T&gt;&gt; getRangeByKey(int start, int end)&#123;        Node node=findNode(start);        if(node.getKey()!=start)&#123; node=node.getNext(); &#125;        List&lt;Map&lt;Integer,T&gt;&gt; list=new LinkedList&lt;&gt;();        while(node.key&lt;=end)&#123;            Map&lt;Integer,T&gt; map=new HashMap&lt;&gt;();            map.put(node.getKey(),node.getValue());            list.add(map);            node=node.getNext();        &#125;        return list;    &#125;    /**     * 自己写的很乐色     * @return     */    @Override    public String toString()&#123;        StringBuilder sb=new StringBuilder();        sb.append(&quot;SkipList:&#123;\\n&quot;);        sb.append(&quot;\\tlevel:&quot;+this.currentMaxLevel+&quot;,\\n&quot;);        sb.append(&quot;\\t&#123;\\n&quot;);        Node tempHead=getHead();        while(tempHead!=null)&#123;            sb.append(&quot;\\t\\t&quot;+tempHead.getKey()+&quot;\\t&quot;);            Node tempNode=tempHead.getNext();            while(tempNode.getKey()!=getTail().getKey())&#123;                sb.append(tempNode.getKey()+&quot;\\t&quot;);                tempNode=tempNode.getNext();            &#125;            sb.append(tempNode.key+&quot;\\n&quot;);            tempHead=tempHead.getDown();        &#125;        sb.append(&quot;\\t&#125;\\n&quot;);        sb.append(&quot;&#125;\\n&quot;);        return sb.toString();    &#125;    public int getCurrentMaxLevel() &#123; return currentMaxLevel; &#125;    private void setCurrentMaxLevel(int currentMaxLevel) &#123; this.currentMaxLevel = currentMaxLevel; &#125;    private Node getHead() &#123; return head; &#125;    private void setHead(Node head) &#123; this.head = head; &#125;    private Node getTail() &#123; return tail; &#125;    private void setTail(Node tail) &#123; this.tail = tail; &#125;    private Random getRandom() &#123; return random; &#125;    private int getSize() &#123; return size; &#125;    private void setSize(int size) &#123; this.size = size; &#125;&#125;class Demo&#123;    public static void main(String[] args) &#123;        SkipList&lt;Integer&gt; skipList=new SkipList&lt;&gt;();        skipList.put(1,1);        skipList.put(2,2);        skipList.put(2,3);        System.out.println(skipList);        skipList.remove(2);        System.out.println(skipList);        skipList.put(3,3);        skipList.put(0,0);        skipList.put(2,2);        System.out.println(skipList.getRangeByKey(0,5));    &#125;&#125;\n写了两晚上算是整出来了，好爽\n","categories":["数据结构","练习"]},{"title":"设计模式学习","url":"/2021/09/07/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%AD%A6%E4%B9%A0/","content":"三种工厂模式建造者模式原型模式责任链模式适配器模式装饰者模式外观模式组合模式命令模式模版方法模式策略模式备忘录模式观察者模式单例模式迭代器模式桥接模式中介者模式解释器模式访问者模式状态模式享元模式代理模式概括23种设计模式\n参考博客：简单工厂模式、工厂模式以及抽象工厂模式（具体）秒懂设计模式之抽象工厂模式（Abstract FactoryPattern）抽象工厂模式（通俗易懂）23种设计模式详解（全23种）\n\n工厂：实例化对象的时候不再使用 new Object()形式，通过一个工厂获得对象类型：创建型简单工厂模式可以根据用户的选择条件来实例化相关的类。可以看做一条上面有很多种不同实例对象的流水线，用户只需要输入一条命令给switch case(多条机械手)，其中一条与命令相对应的机械手就会取出对应的实例对象。\n操作接口package 简单工厂模式.opertion;public interface Operation &#123;    public double getResult(double numberA,double numberB) throws Exception;&#125;\n具体操作类加减乘除同理，除法可以多加一个判断除数为0\npackage 简单工厂模式.opertion;public class Add implements Operation&#123;    @Override    public double getResult(double numberA, double numberB) &#123;        return numberA + numberB;    &#125;&#125;\n\n工厂类package 简单工厂模式.factory;import 简单工厂模式.opertion.*;public class EasyFactory &#123;    public static Operation createOperation(String name) &#123;        Operation operationObj = null;        switch (name) &#123;            case &quot;+&quot;:                operationObj = new Add();                break;            case &quot;-&quot;:                operationObj = new Sub();                break;            case &quot;*&quot;:                operationObj = new Mul();                break;            case &quot;/&quot;:                operationObj = new Div();                break;            default:        &#125;        return operationObj;    &#125;&#125;\n\n客户端package 简单工厂模式.client;import 简单工厂模式.factory.EasyFactory;import 简单工厂模式.opertion.Operation;public class Client &#123;    public static void main(String[] args) throws Exception &#123;        Operation add = EasyFactory.createOperation(&quot;+&quot;);        Operation sub = EasyFactory.createOperation(&quot;-&quot;);        Operation mul = EasyFactory.createOperation(&quot;*&quot;);        Operation div = EasyFactory.createOperation(&quot;/&quot;);        System.out.println(add.getResult(3, 2));        System.out.println(sub.getResult(3, 2));        System.out.println(mul.getResult(3, 2));        System.out.println(div.getResult(3, 2));    &#125;&#125;\n我们无需提供具体的子类类名，只需要提供一个字符串即可得到相应的实例对象。当子类的类名更换或者增加子类时我们都无需修改客户端代码，只需要在简单工厂类上增加一个分支判断代码即可。\n优点：工厂隐藏了创建对象时进行加工的过程，相比于直接在客户端new对象并进行加工，方便且易于维护。\n缺点当工厂中生产的对象种类很多、每个创建方法需要写很多的代码，会导致这个简单工厂类很庞大臃肿。每次增加或者删除子类对象的创建方法都需要打开简单工厂类来进行修改，耦合性高，而且也违反了开闭原则。\n工厂模式相较于简单工厂模式，就是用更多的类来取代switch case分支，每一个分支归于一个类还拿那个流水线做例子的话，就是为每一种产品开辟一条对应的流水线\n\n操作接口和具体操作类同上面的简单工厂模式中的\n工厂接口package 工厂模式.factory;import 简单工厂模式.opertion.Operation;public interface OperationFactory &#123;    public Operation createOperation() ;&#125;\n具体的工厂类加减乘除同理\npackage 工厂模式.factory;import 简单工厂模式.opertion.Add;import 简单工厂模式.opertion.Operation;public class AddFactory implements OperationFactory&#123;    @Override    public Operation createOperation() &#123;        return new Add();    &#125;\n\n客户端package 工厂模式.client;import 工厂模式.factory.AddFactory;import 工厂模式.factory.DivFactory;import 工厂模式.factory.MulFactory;import 工厂模式.factory.SubFactory;public class Client &#123;    public static void main(String[] args) throws Exception &#123;        //生成所有的具体工厂实例        AddFactory addFactory = new AddFactory();        SubFactory subFactory = new SubFactory();        MulFactory mulFactory = new MulFactory();        DivFactory divFactory = new DivFactory();        //进行操作        System.out.println(addFactory.createOperation().getResult(3,2));        System.out.println(subFactory.createOperation().getResult(3,2));        System.out.println(mulFactory.createOperation().getResult(3,2));        System.out.println(divFactory.createOperation().getResult(3,2));    &#125;&#125;\n优点相对于简单工厂模式，进行了解耦，并克服了违背开闭原则的缺点，又保持了封装对象创建过程的优点。\n缺点把简单工厂的内部逻辑判断转移到了客户端代码来进行，因此客户端的代码也增加了不少。每增加一个产品类，就需要增加一个对应的工厂类，增加了额外的开发量。\n抽象工厂模式相较于前两种模式，该模式不以产品而是以品牌家族建立工厂\n品牌接口package 抽象工厂模式.factory;import 抽象工厂模式.product.computer.Computer;import 抽象工厂模式.product.phone.Phone;public interface ProductFactory &#123;    Phone getPhoneProduct();    Computer getComputerProduct();&#125;\n\n小米品牌package 抽象工厂模式.factory;import 抽象工厂模式.product.computer.Computer;import 抽象工厂模式.product.computer.XiaoMiComputer;import 抽象工厂模式.product.phone.Phone;import 抽象工厂模式.product.phone.XiaoMiPhone;public class XiaoMiFactory implements ProductFactory&#123;    @Override    public Phone getPhoneProduct() &#123;        return new XiaoMiPhone();    &#125;    @Override    public Computer getComputerProduct() &#123;        return new XiaoMiComputer();    &#125;&#125;\n华为品牌package 抽象工厂模式.factory;import 抽象工厂模式.product.computer.Computer;import 抽象工厂模式.product.computer.HuaWeiComputer;import 抽象工厂模式.product.phone.HuaWeiPhone;import 抽象工厂模式.product.phone.Phone;public class HuaWeiFactory implements ProductFactory&#123;    @Override    public Phone getPhoneProduct() &#123;        return new HuaWeiPhone();    &#125;    @Override    public Computer getComputerProduct() &#123;        return new HuaWeiComputer();    &#125;&#125;\n电脑产品接口package 抽象工厂模式.product.computer;public interface Computer&#123;    void playComputerGame();&#125;\n小米电脑package 抽象工厂模式.product.computer;public class XiaoMiComputer implements Computer&#123;    @Override    public void playComputerGame() &#123;        System.out.println(&quot;玩小米电脑游戏&quot;);    &#125;&#125;\n华为电脑package 抽象工厂模式.product.computer;public class HuaWeiComputer implements Computer&#123;    @Override    public void playComputerGame() &#123;        System.out.println(&quot;玩华为电脑游戏&quot;);    &#125;&#125;\n手机接口package 抽象工厂模式.product.phone;public interface Phone &#123;    void playPhoneGame();&#125;\n华为手机package 抽象工厂模式.product.phone;public class HuaWeiPhone implements Phone&#123;    @Override    public void playPhoneGame() &#123;        System.out.println(&quot;玩华为手机游戏&quot;);    &#125;&#125;\n小米手机package 抽象工厂模式.product.phone;public class XiaoMiPhone implements Phone&#123;    @Override    public void playPhoneGame() &#123;        System.out.println(&quot;玩小米手机游戏&quot;);    &#125;&#125;\n客户端package 抽象工厂模式.client;import 抽象工厂模式.factory.HuaWeiFactory;import 抽象工厂模式.factory.XiaoMiFactory;import 抽象工厂模式.product.computer.Computer;import 抽象工厂模式.product.phone.Phone;public class Client &#123;    public static void main(String[] args) &#123;        System.out.println(&quot;============小米产品============&quot;);        //创建小米工厂        XiaoMiFactory xiaoMiFactory = new XiaoMiFactory();        //生产小米手机        Phone xiaoMiPhone = xiaoMiFactory.getPhoneProduct();        xiaoMiPhone.playPhoneGame();        //生产小米电脑        Computer xiaoMiComputer = xiaoMiFactory.getComputerProduct();        xiaoMiComputer.playComputerGame();        System.out.println(&quot;============华为产品============&quot;);        //创建华为工厂        HuaWeiFactory huaWeiFactory = new HuaWeiFactory();        //生产华为手机        Phone huaWeiPhone = huaWeiFactory.getPhoneProduct();        huaWeiPhone.playPhoneGame();        //生产华为电脑        Computer huaWeiComputer = huaWeiFactory.getComputerProduct();        huaWeiComputer.playComputerGame();    &#125;&#125;\n效果============小米产品============玩小米手机游戏玩小米电脑游戏============华为产品============玩华为手机游戏玩华为电脑上的游戏Process finished with exit code 0\n\n优点：一个产品族中的多个对象被设计成一起工作时，它能保证客户端始终只使用同一个产品族中的对象（将一个系列的产品统一一起创建）\n缺点：产品族扩展非常困难，要增加一个系列的某一产品，既要修改工厂抽象类里加代码，又修改具体的实现类里面加代码；增加了系统的抽象性和理解难度\n三种工厂模式的使用选择\n简单工厂 ： 用来生产同一等级结构中的任意产品。（不支持拓展增加产品）\n\n工厂方法 ：用来生产同一等级结构中的固定产品。（支持拓展增加产品）   \n\n抽象工厂 ：用来生产不同产品族的全部产品。（支持拓展增加产品；支持增加产品族）\n\n建造者模式类型：创建型\n参考23 种设计模式详解（全23种）设计模式：建造者模式（Builder）\n\n简单来说，就是有一个管事的和一堆各司其职（制造产品）的工人，这个管事的人可以每次吩咐一个人去完成他的任务，需要完成任务A就找到工人A，需要完成任务B就找到工人B。管事的只负责找到相应的工人，工人只负责完成自己的任务。\n包结构\n需要被建造的beanpackage 建造者模式.bean;public class Animal &#123;    private String head;    private String body;    private String feet;    private String tail;    public String getHead() &#123;        return head;    &#125;    public void setHead(String head) &#123;        this.head = head;    &#125;    public String getBody() &#123;        return body;    &#125;    public void setBody(String body) &#123;        this.body = body;    &#125;    public String getFeet() &#123;        return feet;    &#125;    public void setFeet(String feet) &#123;        this.feet = feet;    &#125;    public String getTail() &#123;        return tail;    &#125;    public void setTail(String tail) &#123;        this.tail = tail;    &#125;    @Override    public String toString() &#123;        return &quot;Animal&#123;&quot; +                &quot;head=&#x27;&quot; + head + &#x27;\\&#x27;&#x27; +                &quot;, body=&#x27;&quot; + body + &#x27;\\&#x27;&#x27; +                &quot;, feet=&#x27;&quot; + feet + &#x27;\\&#x27;&#x27; +                &quot;, tail=&#x27;&quot; + tail + &#x27;\\&#x27;&#x27; +                &#x27;&#125;&#x27;;    &#125;&#125;\n建造者基类package 建造者模式.builder;import 建造者模式.bean.Animal;public abstract class AnimalBuilder &#123;    protected Animal animal;    public Animal getAnimal()&#123;        return animal;    &#125;    public void createAnimal()&#123;        animal = new Animal();    &#125;    public abstract void buildHead();    public abstract void buildBody();    public abstract void buildFeet();    public abstract void buildTail();&#125;\n具体的建造者造猫工人package 建造者模式.builder;import 建造者模式.bean.Animal;public class CatBuilder extends AnimalBuilder &#123;    @Override    public void buildHead() &#123;        super.animal.setHead(&quot;猫的头&quot;);    &#125;    @Override    public void buildBody() &#123;        super.animal.setBody(&quot;猫的身子&quot;);    &#125;    @Override    public void buildFeet() &#123;        super.animal.setFeet(&quot;猫的脚&quot;);    &#125;    @Override    public void buildTail() &#123;        super.animal.setTail(&quot;猫的尾巴&quot;);    &#125;&#125;\n造狗工人package 建造者模式.builder;public class DogBuilder extends AnimalBuilder&#123;    @Override    public void buildHead() &#123; super.animal.setHead(&quot;狗的头&quot;); &#125;    @Override    public void buildBody() &#123; super.animal.setBody(&quot;狗的身子&quot;); &#125;    @Override    public void buildFeet() &#123;        super.animal.setFeet(&quot;狗的脚&quot;);    &#125;    @Override    public void buildTail() &#123;        super.animal.setTail(&quot;狗的尾巴&quot;);    &#125;&#125;\n负责管事的directorpackage 建造者模式.director;import 建造者模式.bean.Animal;import 建造者模式.builder.AnimalBuilder;public class Director &#123;    private AnimalBuilder animalBuilder;    public void setAnimalBuilder(AnimalBuilder animalBuilder) &#123;        this.animalBuilder = animalBuilder;    &#125;    public void createAnimal()&#123;    \t//这里就可以控制赋值的顺序        animalBuilder.createAnimal();        animalBuilder.buildHead();        animalBuilder.buildBody();        animalBuilder.buildFeet();        animalBuilder.buildTail();    &#125;    public Animal getAnimal() &#123;        return animalBuilder.getAnimal();    &#125;&#125;\n\n客户端package 建造者模式.client;import 建造者模式.bean.Animal;import 建造者模式.builder.CatBuilder;import 建造者模式.builder.DogBuilder;import 建造者模式.director.Director;public class Client &#123;    public static void main(String[] args) &#123;        //先new出director对象        Director director = new Director();        System.out.println(&quot;============创造猫咪============&quot;);        director.setAnimalBuilder(new CatBuilder());        director.createAnimal();        Animal cat = director.getAnimal();        System.out.println(cat);        System.out.println(&quot;============创造炫狗============&quot;);        director.setAnimalBuilder(new DogBuilder());        director.createAnimal();        Animal dog = director.getAnimal();        System.out.println(dog);    &#125;&#125;\n\n效果============创造猫咪============Animal&#123;head=&#x27;猫的头&#x27;, body=&#x27;猫的身子&#x27;, feet=&#x27;猫的脚&#x27;, tail=&#x27;猫的尾巴&#x27;&#125;============创造炫狗============Animal&#123;head=&#x27;狗的头&#x27;, body=&#x27;狗的身子&#x27;, feet=&#x27;狗的脚&#x27;, tail=&#x27;狗的尾巴&#x27;&#125;Process finished with exit code 0\n\n优点\n使用建造者模式可以使客户端不必知道产品内部的组成细节。（封装性） \n具体的建造者之间是相互独立的，对系统的扩展非常有利。（扩展性）\n由于具体的建造者是独立的，因此可以对建造过程逐步细化，而不对其他模块产生任何影响。\n\n缺点对不同类型的对象需要实现不同的具体构造器的类，这可能会大大增加类的数量\n与工厂模式的区别建造者模式构建对象的时候，通常构建对象的过程需要多个步骤，而且是将这些复杂的构建过程封装起来。工厂模式构建对象通常只有一个步骤，调用一个工厂方法就可以生成一个对象。\n建造者模式关注的是零件类型和装配工艺（顺序），而工厂模式是创建一个对象，这是最大不同的地方。\n建造者模式的使用场景1）相同的方法，不同的执行顺序，产生不同的事件结果时，可以使用建造者模式。2）多个部件或零件，都可以装配到一个对象中，但是产生的运行结果又不想同时，可以使用建造者模式。3）产品类非常复杂，或者产品类中的调用顺序不同产生了不同的效能，这时候可以使用建造者模式。 \n参考23种设计模式详解（全23种）23种设计模式（5）：原型模式\n\n原型模式类型：创建型通过复制现有实例来创建新的实例，无需知道相应类的信息。关键字：Clone深拷贝和浅拷贝浅拷贝：将一个对象复制后，基本数据类型的变量都会重新创建，而引用类型，指向的还是原对象所指向的。\n深拷贝：将一个对象复制后，不论是基本数据类型还是引用类型，都是重新创建的。\n简单来说，就是深拷贝进行了完全彻底的拷贝，而浅拷贝不彻底。clone明显是深拷贝，clone出来的对象是是不能去影响原型对象的\n优点先说优点是因为怕有人觉得为什么不直接new原因：\n\n使用原型模式创建对象比直接new一个对象在性能上要好的多，因为Object类的clone方法是一个本地方法，它直接操作内存中的二进制流，特别是复制大对象时，性能的差别非常明显。\n使用原型模式的另一个好处是简化对象的创建，使得创建对象就像我们在编辑文档时的复制粘贴一样简单。\n\n角色Client：客户端Prototype：接口（抽象类），声明具备clone能力，例如java中得Cloneable接口ConcretePrototype：具体的原型类\nUML图\n原型模式的具体实现：一个原型类，只需要实现Cloneable接口，覆写clone方法，此处clone方法可以改成任意的名称，因为Cloneable接口是个空接口，你可以任意定义实现类的方法名，如cloneA或者cloneB，因为此处的重点是super.clone()这句话，super.clone()调用的是Object的clone()方法。\n包结构\n原型类package 原型模式.prototype;public class PrototypeEmail implements Cloneable&#123;    @Override    public PrototypeEmail clone() throws CloneNotSupportedException &#123;        return (PrototypeEmail) super.clone();    &#125;&#125;\n具体类package 原型模式.concretePrototype;import 原型模式.prototype.PrototypeEmail;public class Email extends PrototypeEmail &#123;    public void print(int i)&#123;        System.out.println(&quot;制造出了第&quot;+i+&quot;封信&quot;);    &#125;&#125;\n客户端package 原型模式.client;import 原型模式.concretePrototype.Email;public class Client &#123;    public static void main(String[] args) throws CloneNotSupportedException &#123;        Email em = new Email();        for(int i=1;i&lt;=10;i++)&#123;            Email email = (Email)em.clone();            email.print(i);        &#125;    &#125;&#125;\n\n输出制造出了第1封信制造出了第2封信制造出了第3封信制造出了第4封信制造出了第5封信制造出了第6封信制造出了第7封信制造出了第8封信制造出了第9封信制造出了第10封信Process finished with exit code 0\n\n在需要重复地创建相似对象时可以考虑使用原型模式。比如需要在一个循环体内创建对象，假如对象创建过程比较复杂或者循环次数很多的话，使用原型模式不但可以简化创建过程，而且可以使系统的整体性能提高很多。\n原型模式的注意事项1. 使用原型模式复制对象不会调用类的构造方法 因为对象的复制是通过调用Object类的clone方法来完成的，它直接在内存中复制数据。不但构造方法中的代码不会执行，甚至连访问权限都对原型模式无效。\n而在单例模式中，只要将构造方法的访问权限设置为private类型，就可以实现单例。但是clone方法直接无视构造方法的权限.\n所以，单例模式与原型模式是冲突的，在使用时要特别注意。\n2. 深拷贝与浅拷贝。Object类的clone方法只会拷贝对象中的基本的数据类型，对于数组、容器对象、引用对象等都不会拷贝，这就是浅拷贝。如果要实现深拷贝，必须将原型模式中的数组、容器对象、引用对象等另行拷贝。\npackage 原型模式.prototype;import java.util.ArrayList;public class PrototypeEmail implements Cloneable&#123;    private ArrayList arrayList = new ArrayList();    @Override    public PrototypeEmail clone() throws CloneNotSupportedException &#123;        PrototypeEmail pe=(PrototypeEmail)super.clone();        //这里对引用对象另行拷贝了        pe.arrayList = (ArrayList)this.arrayList.clone();        return pe;    &#125;&#125;\njava提供的大部分的容器类都实现了Cloneable接口会发生深拷贝的有java中的8种基本类型以及他们的封装类型，另外还有String类型。其余的都是浅拷贝。\n参考行为型模式（一）：责任链模式\n\n责任链模式类型：行为型为了避免请求发送者与多个请求处理者耦合在一起，将所有请求的处理者通过前一对象记住其下一个对象的引用而连成一条链；当有请求发生时，可将请求沿着这条链传递，直到有对象处理它为止。角色：\n抽象处理者（Handler）角色：定义一个处理请求的接口，包含抽象处理方法和一个后继连接。\n具体处理者（Concrete Handler）角色：实现抽象处理者的处理方法，判断能否处理本次请求，如果可以处理请求则处理，否则将该请求转给它的后继者。\n客户类（Client）角色：创建处理链，并向链头的具体处理者对象提交请求，它不关心处理细节和请求的传递过程。\n\nUML\n模式的应用场景\n有多个对象可以处理一个请求，哪个对象处理该请求由运行时刻自动确定。\n可动态指定一组对象处理请求，或添加新的处理者。\n在不明确指定请求处理者的情况下，向多个处理者中的一个提交请求。\n\n包结构\n处理者基类package 责任链模式.handler;public abstract class Handler &#123;    protected Handler nextHandler;    public void setNextHandler(Handler nextHandler)&#123;        this.nextHandler=nextHandler;    &#125;    public Handler getNextHandler()&#123;        return this.nextHandler;    &#125;    public abstract String handleReq(double reqMoney);&#125;\n\n权限从小到大的处理者package 责任链模式.handler;public class SmallHandler extends Handler&#123;    private double permission = 1e3;    @Override    public String handleReq(double reqMoney) &#123;        if(reqMoney&lt;=permission)&#123;            System.out.println(&quot;小领导还是有这个能力的&quot;);            return &quot;小领导办了&quot;;        &#125;else&#123;            System.out.println(&quot;小领导没这个权限，去找中领导吧&quot;);            return this.getNextHandler().handleReq(reqMoney);        &#125;    &#125;&#125;//////////////////////////////////////////////////////////////////////package 责任链模式.handler;public class MediumHandler extends Handler&#123;    private double permission = 1e4;    @Override    public String handleReq(double reqMoney) &#123;        if(reqMoney&lt;=permission)&#123;            System.out.println(&quot;中领导还是有这个能力的&quot;);            return &quot;中领导办了&quot;;        &#125;else&#123;            System.out.println(&quot;中领导没这个权限，去找大领导吧&quot;);            return this.getNextHandler().handleReq(reqMoney);        &#125;    &#125;&#125;//////////////////////////////////////////////////////////////////////package 责任链模式.handler;public class BigHandler extends Handler&#123;    private double permission = 1e5;    @Override    public String handleReq(double reqMoney) &#123;        if(reqMoney&lt;=permission)&#123;            System.out.println(&quot;大领导还是有这个能力的&quot;);            return &quot;大领导办了&quot;;        &#125;else&#123;            System.out.println(&quot;大领导没这个权限，去找更大领导吧&quot;);            return this.getNextHandler().handleReq(reqMoney);        &#125;    &#125;&#125;//////////////////////////////////////////////////////////////////////package 责任链模式.handler;public class BiggerHandler extends Handler&#123;    private double permission = 1e6;    @Override    public String handleReq(double reqMoney) &#123;        if(reqMoney&lt;=permission)&#123;            System.out.println(&quot;更大领导还是有这个能力的&quot;);            return &quot;更大领导办了&quot;;        &#125;else&#123;            System.out.println(&quot;要这么多钱干嘛？不批&quot;);            return &quot;这笔钱没批下来&quot;;        &#125;    &#125;&#125;//////////////////////////////////////////////////////////////////////\n客户端package 责任链模式.client;import 责任链模式.handler.BigHandler;import 责任链模式.handler.BiggerHandler;import 责任链模式.handler.MediumHandler;import 责任链模式.handler.SmallHandler;public class Client &#123;    public static void main(String[] args) &#123;        BiggerHandler biggerHandler = new BiggerHandler();        BigHandler bigHandler = new BigHandler();        MediumHandler mediumHandler = new MediumHandler();        SmallHandler smallHandler = new SmallHandler();        //先设置next        bigHandler.setNextHandler(biggerHandler);        mediumHandler.setNextHandler(bigHandler);        smallHandler.setNextHandler(mediumHandler);        //开始处理        for(double i=100;i&lt;=1e6;i=i*10)&#123;            double req = i+1;            System.out.println(&quot;----请求经费为&quot;+req+&quot;----&quot;);            String resp= smallHandler.handleReq(req);            System.out.println(&quot;最终是&quot;+resp+&#x27;\\n&#x27;);        &#125;    &#125;&#125;\n效果----请求经费为101.0----小领导还是有这个能力的最终是小领导办了----请求经费为1001.0----小领导没这个权限，去找中领导吧中领导还是有这个能力的最终是中领导办了----请求经费为10001.0----小领导没这个权限，去找中领导吧中领导没这个权限，去找大领导吧大领导还是有这个能力的最终是大领导办了----请求经费为100001.0----小领导没这个权限，去找中领导吧中领导没这个权限，去找大领导吧大领导没这个权限，去找更大领导吧更大领导还是有这个能力的最终是更大领导办了----请求经费为1000001.0----小领导没这个权限，去找中领导吧中领导没这个权限，去找大领导吧大领导没这个权限，去找更大领导吧要这么多钱干嘛？不批最终是这笔钱没批下来Process finished with exit code 0\n\n\n\n模式的扩展职责链模式存在以下两种情况：1、纯的职责链模式：一个请求必须被某一个处理者对象所接收，且一个具体处理者对某个请求的处理只能采用以下两种行为之一：自己处理（承担责任）；把责任推给下家处理。2、不纯的职责链模式：允许出现某一个具体处理者对象在承担了请求的一部分责任后又将剩余的责任传给下家的情况，且一个请求可以最终不被任何接收端对象所接收。\n参考JAVA设计模式初探之适配器模式适配器模式详解\n\n适配器模式类型：结构型将一个接口转换成客户希望的另一个接口，使接口不兼容的那些类可以一起工作适用场景\n系统需要使用现有的类，但现有的类却不兼容。\n需要建立一个可以重复使用的类，用于一些彼此关系不大的类，并易于扩展，以便于面对将来会出现的类。\n需要一个统一的输出接口，但是输入类型却不可预知。\n\n模式中的角色目标接口（Target）：客户所期待的接口。目标可以是具体的或抽象的类，也可以是接口。\n需要适配的类（Adaptee）：需要适配的类或适配者类。\n适配器（Adapter）：通过包装一个需要适配的对象，把原接口转换成目标接口。　\n两种实现方式：1. 类的适配器模式（采用继承实现）对于\nAdaptee（厂商标准电压）package 适配器模式.类适配器模式.adaptee;public class Voltage220 &#123;    public String beforeVoltage()&#123;        return &quot;220V&quot;;    &#125;&#125;\n\nTarget(用户手机的电压接口)package 适配器模式.类适配器模式.target;public interface Voltage5 &#123;    String afterVoltage();&#125;---------------------------------------package 适配器模式.类适配器模式.target;public interface Voltage10 &#123;    String afterVoltage();&#125;---------------------------------------\nAdapter(电压适配器)package 适配器模式.类适配器模式.adapter;import 适配器模式.类适配器模式.adaptee.Voltage220;import 适配器模式.类适配器模式.target.Voltage5;public class VoltageAdapter5 extends Voltage220 implements Voltage5 &#123;    @Override    public String afterVoltage() &#123;        return &quot;5V&quot;;    &#125;&#125;-----------------------------------------------------------------------package 适配器模式.类适配器模式.adapter;import 适配器模式.类适配器模式.adaptee.Voltage220;import 适配器模式.类适配器模式.target.Voltage10;public class VoltageAdapter10 extends Voltage220 implements Voltage10 &#123;    @Override    public String afterVoltage() &#123;        return &quot;10V&quot;;    &#125;&#125;-----------------------------------------------------------------------\n\nClientpackage 适配器模式.类适配器模式.client;import 适配器模式.类适配器模式.adapter.VoltageAdapter10;import 适配器模式.类适配器模式.adapter.VoltageAdapter5;public class Client &#123;    public static void main(String[] args) &#123;        System.out.println(&quot;适配5V的电压&quot;);        VoltageAdapter5 va5 = new VoltageAdapter5();        System.out.println(&quot;----------适配之前的标准电压---------&quot;);        System.out.println(va5.beforeVoltage());        System.out.println(&quot;----------适配手机之后的电压---------&quot;);        System.out.println(va5.afterVoltage());        System.out.println();        System.out.println(&quot;适配10V的电压&quot;);        VoltageAdapter10 va10 = new VoltageAdapter10();        System.out.println(&quot;----------适配之前的标准电压---------&quot;);        System.out.println(va10.beforeVoltage());        System.out.println(&quot;----------适配手机之后的电压---------&quot;);        System.out.println(va10.afterVoltage());    &#125;&#125;\n效果适配5V的电压----------适配之前的标准电压---------220V------------适配之后的电压-----------5V适配10V的电压----------适配之前的标准电压---------220V------------适配之后的电压-----------10VProcess finished with exit code 0\n\n\n2. 对象适配器（采用对象组合方式实现）这种方法其实和类适配器的区别就是适配器部分，用组合代替继承只有Adapter类有点不同\nAdapter(电压适配器)package 适配器模式.对象适配器模式.adapter;import 适配器模式.对象适配器模式.adaptee.Voltage220;import 适配器模式.对象适配器模式.target.Voltage5;public class VoltageAdapter5 implements Voltage5 &#123;    Voltage220 voltage220;    public VoltageAdapter5(Voltage220 voltage220)&#123;        this.voltage220 = voltage220;    &#125;    public String beforeVoltage()&#123;        return voltage220.beforeVoltage();    &#125;    @Override    public String afterVoltage() &#123;        return &quot;5V&quot;;    &#125;&#125;-----------------------------------------------------------------------package 适配器模式.对象适配器模式.adapter;import 适配器模式.对象适配器模式.adaptee.Voltage220;import 适配器模式.对象适配器模式.target.Voltage10;public class VoltageAdapter10 implements Voltage10 &#123;    Voltage220 voltage220;    public VoltageAdapter10(Voltage220 voltage220)&#123;        this.voltage220 = voltage220;    &#125;    public String beforeVoltage()&#123;        return voltage220.beforeVoltage();    &#125;    @Override    public String afterVoltage() &#123;        return &quot;10V&quot;;    &#125;&#125;-----------------------------------------------------------------------\n模式优缺点\n将目标类和适配者类解耦，通过引入一个适配器类来重用现有的适配者类，而无须修改原有代码。\n增加了类的透明性和复用性，将具体的实现封装在适配者类中，对于客户端类来说是透明的，而且提高了适配者的复用性。\n灵活性和扩展性都非常好，通过使用配置文件，可以很方便地更换适配器，也可以在不修改原有代码的基础上增加新的适配器类，完全符合“开闭原则”。\n\n类适配器模式还具有如下优点：由于适配器类是适配者类的子类，因此可以在适配器类中置换一些适配者的方法，使得适配器的灵活性更强。\n类适配器模式的缺点如下：对于Java、C#等不支持多重继承的语言，一次最多只能适配一个适配者类，而且目标抽象类只能为抽象类，不能为具体类，其使用有一定的局限性，不能将一个适配者类和它的子类都适配到目标接口。\n对象适配器模式还具有如下优点：一个对象适配器可以把多个不同的适配者适配到同一个目标，也就是说，同一个适配器可以把适配者类和它的子类都适配到目标接口。\n对象适配器模式的缺点如下：与类适配器模式相比，要想置换适配者类的方法就不容易。如果一定要置换掉适配者类的一个或多个方法，就只好先做一个适配者类的子类，将适配者类的方法置换掉，然后再把适配者类的子类当做真正的适配者进行适配，实现过程较为复杂。\n模式扩展默认适配器模式(Default Adapter Pattern)或缺省适配器模式当不需要全部实现接口提供的方法时，可先设计一个抽象类实现接口，并为该接口中每个方法提供一个默认实现（空方法），那么该抽象类的子类可有选择地覆盖父类的某些方法来实现需求，它适用于一个接口不想使用其所有的方法的情况。因此也称为单接口适配器模式。\n\n适配者接口是一个接口，通常在该接口中声明了大量的方法。\n默认适配器类是缺省适配器模式的核心类，使用空方法的形式实现了在ServiceInterface接口中声明的方法。通常将它定义为抽象类，因为对它进行实例化没有任何意义。\n具体业务类是缺省适配器类的子类，在没有引入适配器之前，它需要实现适配者接口，因此需要实现在适配者接口中定义的所有方法，而对于一些无须使用的方法也不得不提供空实现。在有了缺省适配器之后，可以直接继承该适配器类，根据需要有选择性地覆盖在适配器类中定义的方法。\n\n双向适配器在对象适配器的使用过程中，如果在适配器中同时包含对目标类和适配者类的引用，适配者可以通过它调用目标类中的方法，目标类也可以通过它调用适配者类中的方法，那么该适配器就是一个双向适配器装饰者模式类型：结构型动态的将新功能附加到对象上。在对象功能扩展方面，它比继承更有弹性。具体做法就是不断的包装，然后获得总价可以通过递归的形式由内向外获得所有花费之和可以参考下面这张图\n\n将LongBlack咖啡先包装进Milk类的对象内，表示加入了牛奶\n然后再包装进Chocalate类的对象内，表示加入了巧克力\n然后又包装进Chocalate类的对象内，表示再次加入了巧克力\n\n角色\nComponent（被装饰对象的基类）定义一个对象接口，可以给这些对象动态地添加职责。\nConcreteComponent（具体被装饰对象）定义一个对象，可以给这个对象添加一些职责。\nDecorator（装饰者抽象类）维持一个指向Component实例的引用，并定义一个与Component接口一致的接口。\nConcreteDecorator（具体装饰者）具体的装饰对象，给内部持有的具体被装饰对象，增加具体的职责。\n\nUML\n包结构\ncomponent基类package 装饰者模式.component;public abstract class Dish &#123;    private String description=&quot;&quot;;    private int price=0;    public abstract int getAllCost();    public abstract String getAllDesc();    public void setDescription(String description) &#123;        this.description = description;    &#125;    public String getDescription() &#123;        return description;    &#125;    public int getPrice() &#123;        return price;    &#125;    public void setPrice(int price) &#123;        this.price = price;    &#125;&#125;\n具体子类package 装饰者模式.component;public class Fish extends Dish&#123;    public Fish()&#123;        super.setDescription(&quot;一条鱼&quot;);        super.setPrice(100000);    &#125;    @Override    public int getAllCost() &#123;        return super.getPrice();    &#125;    @Override    public String getAllDesc() &#123;        return super.getDescription();    &#125;&#125;--------------------------------------------package 装饰者模式.component;public class Soup extends Dish&#123;    public Soup()&#123;        super.setDescription(&quot;一碗汤&quot;);        super.setPrice(1000);    &#125;    @Override    public int getAllCost() &#123;        return super.getPrice();    &#125;    @Override    public String getAllDesc() &#123;        return super.getDescription();    &#125;&#125;--------------------------------------------package 装饰者模式.component;public class Tofu extends Dish&#123;    public Tofu()&#123;        super.setDescription(&quot;一块豆腐&quot;);        super.setPrice(10000);    &#125;    @Override    public int getAllCost() &#123;        return super.getPrice();    &#125;    @Override    public String getAllDesc() &#123;        return super.getDescription();    &#125;&#125;\n\n装饰者基类package 装饰者模式.decorator;import 装饰者模式.component.Dish;public class Seasoning extends Dish&#123;    private Dish dish;    public Seasoning(Dish dish)&#123;        this.dish=dish;    &#125;    @Override    public int getAllCost() &#123;        //用递归的方法去获得价格        //加号前面为该菜之前的花费，加号后面为当前调料的花费        return dish.getAllCost()+super.getPrice();    &#125;    @Override    public String getAllDesc() &#123;        //用递归的方法去获得描述        return dish.getAllDesc()+super.getDescription();    &#125;&#125;\n具体子类package 装饰者模式.decorator;import 装饰者模式.component.Dish;public class Oil extends Seasoning&#123;    public Oil(Dish dish) &#123;        super(dish);        super.setPrice(100);        super.setDescription(&quot;+油&quot;);    &#125;&#125;----------------------------------------package 装饰者模式.decorator;import 装饰者模式.component.Dish;public class Salt extends Seasoning&#123;    public Salt(Dish dish) &#123;        super(dish);        super.setPrice(10);        super.setDescription(&quot;+盐&quot;);    &#125;&#125;----------------------------------------package 装饰者模式.decorator;import 装饰者模式.component.Dish;public class Sugar extends Seasoning&#123;    public Sugar(Dish dish) &#123;        super(dish);        super.setPrice(1);        super.setDescription(&quot;+糖&quot;);    &#125;&#125;\n客户端package 装饰者模式.client;import 装饰者模式.component.Dish;import 装饰者模式.component.Fish;import 装饰者模式.component.Tofu;import 装饰者模式.decorator.Oil;import 装饰者模式.decorator.Salt;import 装饰者模式.decorator.Sugar;public class Client &#123;    public static void main(String[] args) &#123;        //未经处理的鱼        Dish fish = new Fish();        System.out.println(fish.getAllDesc());        System.out.println(&quot;花费为&quot;+fish.getAllCost()+&#x27;\\n&#x27;);        //加油        fish = new Oil(fish);        System.out.println(fish.getAllDesc());        System.out.println(&quot;花费为&quot;+fish.getAllCost()+&#x27;\\n&#x27;);        //加盐        fish = new Salt(fish);        System.out.println(fish.getAllDesc());        System.out.println(&quot;花费为&quot;+fish.getAllCost()+&#x27;\\n&#x27;);        //加糖        fish = new Sugar(fish);        System.out.println(fish.getAllDesc());        System.out.println(&quot;花费为&quot;+fish.getAllCost()+&#x27;\\n&#x27;);        //加盐        fish = new Salt(fish);        System.out.println(fish.getAllDesc());        System.out.println(&quot;花费为&quot;+fish.getAllCost()+&#x27;\\n&#x27;);        /*-----------------------------------------------------*/        //未经处理的豆腐        Dish tofu = new Tofu();        tofu=new Oil(new Salt(tofu));        System.out.println(tofu.getAllDesc());        System.out.println(&quot;花费为&quot;+tofu.getAllCost()+&#x27;\\n&#x27;);    &#125;&#125;\n效果一条鱼花费为100000一条鱼+油花费为100100一条鱼+油+盐花费为100110一条鱼+油+盐+糖花费为100111一条鱼+油+盐+糖+盐花费为100121一块豆腐+盐+油花费为10110Process finished with exit code 0\n总结\n装饰者和被装饰者之间必须是一样的类型,也就是要有共同的超类。\n在这里使用继承并不是实现方法的复制,而是实现类型的匹配。因为装饰者和被装饰者是同一个类型,因此装饰者可以取代被装饰者,这样就使被装饰者拥有了装饰者独有的行为。\n虽然装饰者模式可以为设计注入弹性，但装饰者也常常造成设计中有大量的小对象，如果过度使用会让程序变得很复杂。\n\n装饰者一般对组件的客户是透明的，除非客户程序依赖于组件的具体类型\n\n\n\n参考设计模式-外观模式（家庭影院你值得拥有） 23种设计模式详解（全23种）\n\n外观模式类型:结构型模式外观模式可以理解为转换一群接口，客户只要调用这一个接口而不用调用多个接口才能达到目的，也不需关心这个子系统的内部细节。就是解决多个复杂接口带来的使用困难，起到简化用户操作的作用。\n角色\nFacade外观类：提供统一的调用接口，外观类知道哪些子系统负责处理请求，从而将调用端的请求代理给相应子系统对象。\nSystem子系统：处理Facade对象指派的任务，是功能的实际提供者。\nClient客户端：外观接口调用测试者。\n\nUML\n包结构\nsystempackage 外观模式.system;public class CPU &#123;    public void start() &#123;        System.out.println(&quot;cpu启动&quot;);    &#125;    public void shutDown() &#123;        System.out.println(&quot;CPU关闭&quot;);    &#125;&#125;------------------------------------------package 外观模式.system;public class Disk &#123;    public void start() &#123;        System.out.println(&quot;Disk启动&quot;);    &#125;    public void shutDown() &#123;        System.out.println(&quot;Disk关闭&quot;);    &#125;&#125;------------------------------------------package 外观模式.system;public class Memory &#123;    public void start() &#123;        System.out.println(&quot;Memory启动&quot;);    &#125;    public void shutDown() &#123;        System.out.println(&quot;Memory关闭&quot;);    &#125;&#125;------------------------------------------\n\nfacadepackage 外观模式.facade;import 外观模式.system.CPU;import 外观模式.system.Disk;import 外观模式.system.Memory;public class Computer &#123;    private CPU cpu;    private Memory memory;    private Disk disk;    public Computer() &#123;        cpu = new CPU();        memory = new Memory();        disk = new Disk();    &#125;    public void start() &#123;        System.out.println(&quot;电脑开始开机&quot;);        cpu.start();        disk.start();        memory.start();        System.out.println(&quot;电脑开机完毕&quot;);    &#125;    public void shutDown() &#123;        System.out.println(&quot;电脑开始关机&quot;);        cpu.shutDown();        disk.shutDown();        memory.shutDown();        System.out.println(&quot;电脑关机完毕&quot;);    &#125;&#125;\nclientpackage 外观模式.client;import 外观模式.facade.Computer;public class Client &#123;    public static void main(String[] args) &#123;        Computer computer = new Computer();        System.out.println(&quot;---用户开机---&quot;);        computer.start();        System.out.println(&quot;\\n---用户关机---&quot;);        computer.shutDown();    &#125;&#125;\n\n效果---用户开机---电脑开始开机cpu启动Disk启动Memory启动电脑开机完毕---用户关机---电脑开始关机CPU关闭Disk关闭Memory关闭电脑关机完毕Process finished with exit code 0\n优点\n外观模式对客户端与子系统的耦合关系，让子系统内部的模块更易维护和扩展。\n外观模式对外屏蔽了子系统的细节，因此外观模式降低了客户端对子系统使用的复 杂性。\n当系统需要进行分层设计时，可以考虑外观模式帮我们更好的划分访问的层次。\n\n总结\n在维护一个遗留的大型系统时，可能这个系统已经变得非常难以维护和扩展，此时可以考虑为新系统开发一个Facade类，来提供遗留系统的比较清晰简单的接口，让新系统与Facade类交互，提高复用性。\n不能过多的或者不合理的使用外观模式，使用外观模式好，还是直接调用模块好。 要以让系统有层次，利于维护为目的。\n\n参考组合模式\n\n组合模式类型:结构型模式将对象组合成树形结构来表示“部分-整体”的层次结构，使得客户能以一致的方式处理个别对象和组合对象。如何解决：叶子和组合节点实现统一接口，叶子和组合节点分别重写接口的方法，使得调用方法一致但产生不同结果。\n关键代码：组合节点内部组合该接口，并且含有内部属性 List，里面放 Component。\n角色\nComponent 抽象组件：为组合中所有对象提供一个接口，不管是叶子对象还是组合对象。\nComposite 组合节点对象：实现了Component的所有操作，并且持有子节点对象。\nLeaf 叶节点对象：叶节点对象没有任何子节点，实现了Component中的某些操作。\n\nUML\n包结构\ncomponent(基类)package 组合模式.component;import java.util.List;public abstract class Node &#123;    protected String name;    public Node(String name) &#123;        this.name = name;    &#125;    public abstract void doOperation();    public void add(Node c) &#123;        System.out.println(&quot;叶子结点不能添加子结点&quot;);    &#125;    public void remove(Node c) &#123;        System.out.println(&quot;叶子结点没有子结点&quot;);    &#125;    public Node getChild(int i) &#123;        System.out.println(&quot;叶子结点没有子结点&quot;);        return null;    &#125;    public List&lt;Node&gt; getChildren() &#123;        System.out.println(&quot;叶子结点没有子结点&quot;);        return null;    &#125;&#125;\n两个子类leafpackage 组合模式.leaf;import 组合模式.component.Node;public class Leaf extends Node &#123;    public Leaf(String name) &#123;        super(name);    &#125;    @Override    public void doOperation() &#123;        System.out.println(&quot;-----叶子节点：&quot;+name+&quot;的操作-----&quot;);    &#125;&#125;\ncompositepackage 组合模式.composite;import 组合模式.component.Node;import java.util.ArrayList;import java.util.List;public class NotLeaf extends Node &#123;    private List&lt;Node&gt; nodes = new ArrayList&lt;&gt;();    public NotLeaf(String name) &#123;        super(name);    &#125;    @Override    public void doOperation() &#123;        System.out.println(&quot;-----非叶结点：&quot;+name+&quot;的操作-----&quot;);        //进行所有子节点的操作        for (Node node : nodes) &#123;            node.doOperation();        &#125;    &#125;    @Override    public void add(Node c) &#123;        nodes.add(c);    &#125;    @Override    public void remove(Node c) &#123;        nodes.remove(c);    &#125;    @Override    public Node getChild(int i) &#123;        return nodes.get(i);    &#125;    @Override    public List&lt;Node&gt; getChildren() &#123;        return nodes;    &#125;&#125;\n\nclient(就随便调用方法了，这个模式的树结构在输出语句上看起来挺麻烦)package 组合模式.client;import 组合模式.component.Node;import 组合模式.composite.NotLeaf;import 组合模式.leaf.Leaf;public class Client &#123;    public static void main(String[] args) &#123;        Node node1 = new NotLeaf(&quot;根结点&quot;);        Node node2 = new Leaf(&quot;第一个叶子结点&quot;);        Node node3 = new NotLeaf(&quot;第一个非叶结点&quot;);        node1.add(node2);        node1.add(node3);        node1.doOperation();        System.out.print(&#x27;\\n&#x27;);        Node node4 = new Leaf(&quot;第二个叶子结点&quot;);        Node node5 = new NotLeaf(&quot;第二个非叶结点&quot;);        node2.add(node4);        node3.add(node5);        node5.add(node4);        node5.doOperation();        System.out.print(&#x27;\\n&#x27;);        node1.doOperation();        System.out.print(&#x27;\\n&#x27;);        node1.remove(node3);        node1.doOperation();        System.out.print(&#x27;\\n&#x27;);    &#125;&#125;\n效果-----非叶结点：根结点的操作----------叶子节点：第一个叶子结点的操作----------非叶结点：第一个非叶结点的操作-----叶子结点不能添加子结点-----非叶结点：第二个非叶结点的操作----------叶子节点：第二个叶子结点的操作----------非叶结点：根结点的操作----------叶子节点：第一个叶子结点的操作----------非叶结点：第一个非叶结点的操作----------非叶结点：第二个非叶结点的操作----------叶子节点：第二个叶子结点的操作----------非叶结点：根结点的操作----------叶子节点：第一个叶子结点的操作-----Process finished with exit code 0\n\n优点\n组合模式使得客户端代码可以一致地处理单个对象和组合对象，无须关心自己处理的是单个对象，还是组合对象，这简化了客户端代码；\n\n更容易在组合体内加入新的对象，客户端不会因为加入了新的对象而更改源代码，满足“开闭原则”；\n\n\n缺点\n设计较复杂，客户端需要花更多时间理清类之间的层次关系；\n\n不容易限制容器中的构件；\n\n不容易用继承的方法来增加构件的新功能；\n\n\n参考设计模式之命令模式设计模式6-命令模式（Command）解析+案例实践+总结\n\n命令模式类型:行为型将一个请求封装为一个对象，从而使你可用不同的请求对象对客户进行参数化；对请求排队或记录请求日志，以及支持可取消的操作。\n角色\nReceive接收者角色，处理命令\nCommand命令角色，需要执行的请求\nInvoker调用者角色，接收命令，并执行命令\n\nUML\n包结构\nreceiverpackage 命令模式.receiver;public class TV &#123;    public void playCCTV1() &#123;        System.out.println(&quot;--CCTV1--&quot;);    &#125;    public void playCCTV2() &#123;        System.out.println(&quot;--CCTV2--&quot;);    &#125;    public void playCCTV3() &#123;        System.out.println(&quot;--CCTV3--&quot;);    &#125;&#125;\ncommand父类package 命令模式.command;import 命令模式.receiver.TV;public abstract class Command &#123;    protected TV tv;    public Command(TV tv)&#123;        this.tv=tv;    &#125;    public abstract void excute();&#125;\n\n子类package 命令模式.command;import 命令模式.receiver.TV;public class CCTV1Command extends Command&#123;    public CCTV1Command(TV tv) &#123;        super(tv);    &#125;    @Override    public void excute() &#123;        super.tv.playCCTV1();    &#125;&#125;---------------------------------------------package 命令模式.command;import 命令模式.receiver.TV;public class CCTV2Command extends Command&#123;    public CCTV2Command(TV tv) &#123;        super(tv);    &#125;    @Override    public void excute() &#123;        super.tv.playCCTV2();    &#125;&#125;---------------------------------------------package 命令模式.command;import 命令模式.receiver.TV;public class CCTV3Command extends Command&#123;    public CCTV3Command(TV tv) &#123;        super(tv);    &#125;    @Override    public void excute() &#123;        super.tv.playCCTV3();    &#125;&#125;---------------------------------------------\n\ninvokerpackage 命令模式.invoker;import 命令模式.command.Command;import java.util.ArrayList;import java.util.LinkedList;import java.util.List;public class TVController &#123;    //创建存储历史命令记录的数组    List&lt;Command&gt; historyRecord = new ArrayList&lt;&gt;();    public void inputCommand(Command command)&#123;        historyRecord.add(command);        command.excute();    &#125;    public void undo()&#123;        if(historyRecord.isEmpty())&#123;            System.out.println(&quot;频道为空，不能执行撤回操作&quot;);            return;        &#125;        if(historyRecord.size()==1)&#123;            System.out.println(&quot;已经是第一个操作了，不能再撤回了&quot;);            return;        &#125;        historyRecord.remove(historyRecord.size()-1);        historyRecord.get(historyRecord.size()-1).excute();    &#125;&#125;\n\nclientpackage 命令模式.client;import 命令模式.command.CCTV1Command;import 命令模式.command.CCTV2Command;import 命令模式.command.CCTV3Command;import 命令模式.invoker.TVController;import 命令模式.receiver.TV;public class Client&#123;    public static void main(String[] args) &#123;        TV tv = new TV();        TVController tc = new TVController();        System.out.println(&quot;------切换频道中-----&quot;);        tc.inputCommand(new CCTV2Command(tv));        tc.inputCommand(new CCTV3Command(tv));        tc.inputCommand(new CCTV1Command(tv));        System.out.println(&quot;-------撤销操作-------&quot;);        tc.undo();        tc.undo();        tc.undo();    &#125;&#125;\n\n效果------切换频道中-------CCTV2----CCTV3----CCTV1---------撤销操作---------CCTV3----CCTV2--已经是第一个操作了，不能再撤回了Process finished with exit code 0\n\n优点\n更松散的耦合，将发起命令的客户端与具体处理命令的接收者完全解耦，客户端完全不知道接收者是什么样子。\n更动态的控制，把请求封装起来，可以动态的对请求进行参数化、队列化和日志化等，使系统更灵活。\n复合命令，很容易地组合命令，即宏命令，使系统功能更强大。\n更好的扩展，很容易添加新的命令。\n\n缺点类数量随命令数量增长而增长。可能造成类数量过多。（设计模式常见的缺点）\n参考23 种设计模式详解（全23种）\n\n模板方法类型：行为型在父类中定义一个完成该事情的总方法，每个步骤的具体实现，由子类完成。（感觉就是多态的内容）\n角色\n抽象父类（AbstractClass）：实现了模板方法，定义了算法的骨架。\n具体类（ConcreteClass)：实现抽象类中的抽象方法，即不同的对象的具体实现细节。\n\nUML\n包结构\n模板类package 模板方法模式;public abstract class Dish &#123;    public void doDish()&#123;        prepare();        cook();        serve();    &#125;    public abstract void prepare();    public abstract void cook();    public abstract void serve();&#125;\n\n具体子类package 模板方法模式;public class EggSoup extends Dish &#123;    @Override    public void prepare() &#123;        System.out.println(&quot;准备鸡蛋&quot;);    &#125;    @Override    public void cook() &#123;        System.out.println(&quot;煮蛋汤&quot;);    &#125;    @Override    public void serve() &#123;        System.out.println(&quot;将汤倒入碗中，上菜&quot;);    &#125;&#125;----------------------------------------------------package 模板方法模式;public class Steak extends Dish &#123;    @Override    public void prepare() &#123;        System.out.println(&quot;准备牛排&quot;);    &#125;    @Override    public void cook() &#123;        System.out.println(&quot;煎牛排&quot;);    &#125;    @Override    public void serve() &#123;        System.out.println(&quot;将牛排放入盘子上，上菜&quot;);    &#125;&#125;----------------------------------------------------\n\n客户端package 模板方法模式;public class Client &#123;    public static void main(String[] args) &#123;        System.out.println(&quot;-----制作蛋汤----Client-&quot;);        Dish eggSoup = new EggSoup();        eggSoup.doDish();        System.out.println(&quot;-----制作牛排-----&quot;);        Dish steak = new Steak();        steak.doDish();    &#125;&#125;\n效果-----制作蛋汤-----准备鸡蛋煮蛋汤将汤倒入碗中，上菜-----制作牛排-----准备牛排煎牛排将牛排放入盘子上，上菜Process finished with exit code 0\n\n优点：\n具体细节步骤实现定义在子类中，子类定义详细处理算法是不会改变算法整体结构。\n代码复用的基本技术，在数据库设计中尤为重要。\n存在一种反向的控制结构，通过一个父类调用其子类的操作，通过子类对父类进行扩展增加新的行为，符合“开闭原则”。\n\n缺点：\n每个不同的实现都需要定义一个子类，会导致类的个数增加，系统更加庞大。(设计模式常见缺点)\n策略模式类型：行为类定义一组算法，将每个算法都封装起来，并且使他们之间可以互换。与模板方法模式的比较 策略模式与模板方法模式很像，区别在于客户端调用方法时，模板方法模式调用方法的主体是抽象模板类，策略方法调用方法的主体是上下文类（一个在抽象策略类和具体策略类外部的类）\n 模板模式一般只针对一套算法，注重对同一个算法的不同细节进行抽象提供不同的实现。而策略模式注重多套算法多套实现，在算法中间不应该有交集，因此算法和算法之间一般不会有冗余代码！\n策略模式优缺点优点：\n横向扩展性好，灵活性高\n\n缺点\n客户端需要知道全部策略，若策略过多会导致复杂度升高\n\n模板模式优缺点优点：\n可维护性好，纵向扩展性好\n\n缺点\n耦合性较高，子类无法影响父类公用模块代码\n\n与建造者模式的区别\n参考策略模式和建造者模式\n\n（1）建造者模式是创建型的，也就是说用来创建对象的，而策略模式属于行为型模式，通过将行为封装成对象来降低类之间的耦合度；\n（2）策略模式的抽象类仅仅定义了一个算法接口，而建造者模式的抽象类则已经定义好了算法骨架或者过程的步骤，也就是说策略模式的各具体策略在实现上可以差之千里，但是建造者模式的具体建造者必须按照接口中定义好的骨架或步骤去实现；\n（3）策略模式的StrategyContext类通过提供一个上下文环境来维护具体策略；而建造者模式的Director类则是封装了Product类的创建细节，便于客户端程序调用。\nUML\n包结构\nstrategy策略基类package 策略模式.strategy;public abstract class Action &#123;    public abstract void doAction();&#125;\n具体策略类package 策略模式.strategy;public class Walk extends Action&#123;    @Override    public void doAction() &#123;        System.out.println(&quot;走起路来了&quot;);    &#125;&#125;----------------------------------------------package 策略模式.strategy;public class Jump extends Action&#123;    @Override    public void doAction() &#123;        System.out.println(&quot;跳起来了&quot;);    &#125;&#125;----------------------------------------------package 策略模式.strategy;public class Run extends Action&#123;    @Override    public void doAction() &#123;        System.out.println(&quot;跑起步来了&quot;);    &#125;&#125;----------------------------------------------\n上下文类package 策略模式.context;import 策略模式.strategy.Action;public class Context &#123;    private Action action;    public void setAction(Action action)&#123;        this.action=action;    &#125;    public void doAction()&#123;        this.action.doAction();    &#125;&#125;\n客户端package 策略模式.client;import 策略模式.context.Context;import 策略模式.strategy.Jump;import 策略模式.strategy.Run;import 策略模式.strategy.Walk;public class Client &#123;    public static void main(String[] args) &#123;        Context actionContext = new Context();        System.out.println(&quot;-------------------&quot;);        actionContext.setAction(new Walk());        actionContext.doAction();        System.out.println(&quot;-------------------&quot;);        actionContext.setAction(new Jump());        actionContext.doAction();        System.out.println(&quot;-------------------&quot;);        actionContext.setAction(new Run());        actionContext.doAction();        System.out.println(&quot;-------------------&quot;);    &#125;&#125;\n\n效果-------------------走起路来了-------------------跳起来了-------------------跑起步来了-------------------Process finished with exit code 0\n\n优点\n策略模式提供了对 “开闭原则” 的完美支持，用户可以在不修改原有系统的基础上选择算法或行为，也可以灵活地增加新的算法或行为。\n策略模式提供了管理相关的算法族的办法。策略类的等级结构定义了一个算法或行为族，恰当使用继承可以把公共的代码移到抽象策略类中，从而避免重复的代码。\n策略模式提供了一种可以替换继承关系的办法。如果不使用策略模式而是通过继承，这样算法的使用就和算法本身混在一起，不符合    “单一职责原则”，而且使用继承无法实现算法或行为在程序运行时的动态切换。\n使用策略模式可以避免多重条件选择语句。多重条件选择语句是硬编码，不易维护。\n策略模式提供了一种算法的复用机制，由于将算法单独提取出来封装在策略类中，因此不同的环境类可以方便地复用这些策略类。\n\n缺点\n客户端必须知道所有的策略类，并自行决定使用哪一个策略类。这就意味着客户端必须理解这些算法的区别，以便适时选择恰当的算法。换言之，策略模式只适用于客户端知道所有的算法或行为的情况。\n策略模式将造成系统产生很多具体策略类，任何细小的变化都将导致系统要增加一个新的具体策略类。\n无法同时在客户端使用多个策略类，也就是说，在使用策略模式时，客户端每次只能使用一个策略类，不支持使用一个策略类完成部分功能后再使用另一个策略类来完成剩余功能的情况。\n\n参考设计模式 | 备忘录模式及典型应用23 种设计模式详解（全23种）备忘录模式 - 行为模式\n\n备忘录模式类型：行为型在不破坏封装的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态，这样可以在以后将对象恢复到原先保存的状态。它是一种对象行为型模式，其别名为Token。\n适用场景：\n保存一个对象在某一个时刻的全部状态或部分状态，这样以后需要时它能够恢复到先前的状态，实现撤销操作。\n防止外界对象破坏一个对象历史状态的封装性，避免将对象历史状态的实现细节暴露给外界对象。\n\n角色\n发起人（Originator）角色：记录当前时刻的内部状态信息，提供创建备忘录和恢复备忘录数据的功能，实现其他业务功能，它可以访问备忘录里的所有信息。\n备忘录（Memento）角色：负责存储发起人的内部状态，在需要的时候提供这些内部状态给发起人。\n管理者（Caretaker）角色：对备忘录进行管理，提供保存与获取备忘录的功能，但其不能对备忘录的内容进行访问与修改。\n\nUML\n包结构\nmemento(一个bean，存放状态)package 备忘录模式.memento;public class Record &#123;    private int place;    public Record(int place)&#123;        this.place=place;    &#125;    public int getPlace()&#123;        return this.place;    &#125;&#125;\ncareTaker(内置一个集合，用于存放许多历史记录(即前面那个bean))，负责对于记录的存取package 备忘录模式.careTaker;import 备忘录模式.memento.Record;import java.util.ArrayList;import java.util.List;public class CareTaker &#123;    private List&lt;Record&gt; recordList = new ArrayList&lt;&gt;();    public void saveRecord(Record record)&#123;        recordList.add(record);    &#125;    public Record getRecord(int idx)&#123;        return recordList.get(idx);    &#125;&#125;\noriginator(生成记录的类，同时具有回到某一个历史记录的能力)package 备忘录模式.originator;import 备忘录模式.memento.Record;public class Player &#123;     private int place;     public Record createRecord()&#123;          return new Record(this.place);     &#125;     public void restore(Record record)&#123;          this.place=record.getPlace();     &#125;     public int getPlace() &#123;          return this.place;     &#125;     public void setPlace(int place) &#123;          this.place = place;     &#125;&#125;\n\n客户端（我这里把他作为一场游戏的进行了）package 备忘录模式.client;import 备忘录模式.careTaker.CareTaker;import 备忘录模式.originator.Player;public class Game &#123;    public static void main(String[] args) &#123;        Player player = new Player();        CareTaker careTaker = new CareTaker();        //玩家走到1位置        player.setPlace(1);        careTaker.saveRecord(player.createRecord());        //玩家走到2位置        player.setPlace(2);        careTaker.saveRecord(player.createRecord());        //玩家走到3位置        player.setPlace(3);        careTaker.saveRecord(player.createRecord());        //当前玩家到达的位置        System.out.println(&quot;玩家到达了&quot;+player.getPlace());        //玩家想回到第一次走到的位置        player.restore(careTaker.getRecord(0));        System.out.println(&quot;玩家回到了&quot;+player.getPlace());    &#125;&#125;\n\n效果玩家到达了3玩家回到了1Process finished with exit code 0\n\n优点\n备忘录实现了对信息的封装，一个备忘录对象是一种原发器对象状态的表示，不会被其他代码所改动。备忘录保存了原发器的状态，采用列表、堆栈等集合来存储备忘录对象可以实现多次撤销操作。\n备份的状态是保存在发起人角色之外的，这样，发起人角色就不需要对各个备份的状态进行管理。\n\n缺点\n资源消耗过大，如果需要保存的原发器类的成员变量太多，就不可避免需要占用大量的存储空间，每保存一次对象的状态都需要消耗一定的系统资源。\n\n参考设计模式（五）观察者模式\n\n观察者模式类型：行为型定义了一种一对多的依赖关系，让多个观察者对象同时监听某一个主题对象。这个主题对象在状态变化时，会通知所有的观察者对象，使他们能够自动更新自己。\nUML\n角色\nSubject：抽象主题（抽象被观察者），抽象主题角色把所有观察者对象保存在一个集合里，每个主题都可以有任意数量的观察者，抽象主题提供一个接口，可以增加和删除观察者对象。\n\nConcreteSubject：具体主题（具体被观察者），该角色将有关状态存入具体观察者对象，在具体主题的内部状态发生改变时，给所有注册过的观察者发送通知。\n\nObserver：抽象观察者，是观察者者的抽象类，它定义了一个更新接口，使得在得到主题更改通知时更新自己。\n\nConcrereObserver：具体观察者，实现抽象观察者定义的更新接口，以便在得到主题更改通知时更新自身的状态。\n\n\n包结构\nsubject接口package 观察者模式.subject;import 观察者模式.observer.Student;public interface Subject&#123;    void addStu(Student student);    void deleteStu(Student student);    void notify(String msg);&#125;\n具体子类package 观察者模式.subject;import 观察者模式.observer.Student;import java.util.LinkedList;import java.util.List;public class Teacher implements Subject&#123;    private List&lt;Student&gt; studentList = new LinkedList&lt;&gt;();    @Override    public void addStu(Student student) &#123;        studentList.add(student);    &#125;    @Override    public void deleteStu(Student student) &#123;        studentList.remove(student);    &#125;    @Override    public void notify(String msg) &#123;        for(Student student:studentList)&#123;            student.remind(msg);        &#125;    &#125;&#125;\n\nobserver接口package 观察者模式.observer;public interface Observer &#123;  void remind(String msg);&#125;\n\n具体子类package 观察者模式.observer;public class Student implements Observer&#123;    private String name;    public Student (String name)&#123;        this.name=name;    &#125;    @Override    public void remind(String msg) &#123;        System.out.println(name+&quot;被告知消息：&quot;+msg);    &#125;&#125;\n\n客户端package 观察者模式.client;import 观察者模式.observer.Student;import 观察者模式.subject.Teacher;public class Client &#123;    public static void main(String[] args) &#123;        Teacher teacher = new Teacher();        System.out.println(&quot;-------------------------------&quot;);        Student zhang =new Student(&quot;张三&quot;);        teacher.addStu(zhang);        teacher.notify(&quot;张三加入我们班了&quot;);        System.out.println(&quot;-------------------------------&quot;);        Student li =new Student(&quot;李四&quot;);        teacher.addStu(li);        teacher.notify(&quot;李四来我们班了&quot;);        System.out.println(&quot;-------------------------------&quot;);        teacher.notify(&quot;老师要抽人回答问题了&quot;);        System.out.println(&quot;-------------------------------&quot;);        teacher.deleteStu(li);        teacher.notify(&quot;李四退出我们班了&quot;);        System.out.println(&quot;-------------------------------&quot;);    &#125;&#125;\n\n效果-------------------------------张三被告知消息：张三加入我们班了-------------------------------张三被告知消息：李四来我们班了李四被告知消息：李四来我们班了-------------------------------张三被告知消息：老师要抽人回答问题了李四被告知消息：老师要抽人回答问题了-------------------------------张三被告知消息：李四退出我们班了-------------------------------Process finished with exit code 0\n\n优点解除耦合，让耦合的双方都依赖于抽象，从而使得各自的变换都不会影响另一边的变换。\n缺点在应用观察者模式时需要考虑一下开发效率和运行效率的问题，程序中包括一个被观察者、多个观察者，开发、调试等内容会比较复杂，而且在Java中消息的通知一般是顺序执行，那么一个观察者卡顿，会影响整体的执行效率，在这种情况下，一般会采用异步实现。\n参考JAVA设计模式之单例模式\n\n单例模式类型：创建型确保一个类最多只有一个实例，并提供一个全局访问点单例模式有以下特点：\n\n单例类只能有一个实例。\n单例类必须自己创建自己的唯一实例。\n单例类必须给所有其他对象提供这一实例。\n\n采取的措施：通过将构造方法限定为private避免了类在外部被实例化(暂且当做没有反射机制)在同一个虚拟机范围内，Singleton的唯一实例只能通过getInstance()方法访问。\n饿汉型相对而言要考虑的较少，因为他的机制使他天生就是线程安全的，故放在第一个\npackage 单例模式.singleton;public class PreloadSingleton &#123;    public static PreloadSingleton instance = new PreloadSingleton();    //避免了类在外部被实例化    private PreloadSingleton() &#123; &#125;;    public static PreloadSingleton getInstance() &#123;        return instance;    &#125;&#125;\n\n懒汉型版本1.0最基本的样子，当第一次调用getInstance方法时才new实例\npackage 单例模式.singleton;public class LazyLoadSingleton &#123;    private static LazyLoadSingleton instance=null;    private LazyLoadSingleton()&#123; &#125;        public static LazyLoadSingleton getInstance() &#123;        if(instance==null) &#123;            instance=new LazyLoadSingleton();        &#125;        return instance;    &#125;&#125;\n\n但是它是线程不安全的，并发环境下很可能出现多个LazyLoadSingleton实例\n版本2.0使用线程同步，保证线程安全但是，如果要经常的调用getInstance()方法，不管有没有初始化实例，都会唤醒和阻塞线程。\npackage 单例模式.singleton;public class LazyLoadSingleton &#123;    private static LazyLoadSingleton instance=null;    private LazyLoadSingleton()&#123; &#125;    public static synchronized LazyLoadSingleton getInstance() &#123;        if(instance==null) &#123;            instance=new LazyLoadSingleton();        &#125;        return instance;    &#125;&#125;\n\n版本3.0把sychronized加在if(instance&#x3D;&#x3D;null)判断语句里面，保证instance未实例化的时候才加锁\npackage 单例模式.singleton;public class LazyLoadSingleton &#123;    private static LazyLoadSingleton instance=null;    private LazyLoadSingleton()&#123; &#125;    public static synchronized LazyLoadSingleton getInstance() &#123;        if(instance==null) &#123;            synchronized (LazyLoadSingleton.class)&#123;                if(instance==null) &#123;                    instance=new LazyLoadSingleton();                &#125;            &#125;        &#125;        return instance;    &#125;&#125;\n\n终极版本new 一个对象是有代码执行顺序的，而并发环境下是无法保证顺序性的因此，我们需要使用另一个关键字volatile保证对象实例化过程的顺序性。\n\nmemory&#x3D;allocate();&#x2F;&#x2F;1:初始化内存空间ctorInstance(memory);&#x2F;&#x2F;2:初始化对象instance&#x3D;memory();&#x2F;&#x2F;3:设置instance指向刚分配的内存地址\n\npackage 单例模式.singleton;public class LazyLoadSingleton &#123;    private static volatile LazyLoadSingleton instance=null;    private LazyLoadSingleton()&#123; &#125;    public static synchronized LazyLoadSingleton getInstance() &#123;        if(instance==null) &#123;            synchronized (LazyLoadSingleton.class)&#123;                if(instance==null) &#123;                    instance=new LazyLoadSingleton();                &#125;            &#125;        &#125;        return instance;    &#125;&#125;\n\n总结线程安全：饿汉式天生就是线程安全的，可以直接用于多线程而不会出现问题，\n懒汉式本身是非线程安全的，为了实现线程安全有几种写法，这三种实现在资源加载和性能方面有些区别。\n资源加载和性能：饿汉式在类创建的同时就实例化一个静态对象出来，不管之后会不会使用这个单例，都会占据一定的内存，但是相应的，在第一次调用时速度也会更快，因为其资源已经初始化完成，\n而懒汉式顾名思义，会延迟加载，在第一次使用该单例的时候才会实例化对象出来，第一次调用时要做初始化，如果要做的工作比较多，性能上会有些延迟，之后就和饿汉式一样了。迭代器模式类型：行为类提供一种方法访问一个容器对象中各个元素，而又不暴露该对象的内部细节。\nUML\n角色\n抽象容器：一般是一个接口，提供一个iterator()方法，例如java中的Collection接口，List接口，Set接口等。\n具体容器：就是抽象容器的具体实现类，比如List接口的有序列表实现ArrayList，List接口的链表实现LinkList，Set接口的哈希列表的实现HashSet等。\n抽象迭代器：定义遍历元素所需要的方法，一般来说会有这么三个方法：取得第一个元素的方法first()，取得下一个元素的方法next()，判断是否遍历结束的方法isDone()（或者叫hasNext()），移出当前对象的方法remove(),\n迭代器实现：实现迭代器接口中定义的方法，完成集合的迭代。\n\n代码这个感觉没啥好说的，用过集合的人应该都有所体会，迭代器关键就在于他实现了对内部结构的遍历算法，使内部结构对用户隐藏，对外部只暴露方法供调用这里只是使用了一下迭代器，体现他的作用\npackage 迭代器模式;import java.util.*;public class Client &#123;    public static void main(String[] args) &#123;        System.out.println(&quot;--------------List集合的遍历&quot;);        List&lt;String&gt; list = new ArrayList();        list.add(&quot;张三&quot;);        list.add(&quot;李四&quot;);        list.add(&quot;王五&quot;);        list.add(&quot;赵六&quot;);        Iterator&lt;String&gt; iterator1 = list.listIterator();        while(iterator1.hasNext())&#123;            System.out.println(iterator1.next());        &#125;        System.out.println(&quot;-------------Map集合的遍历&quot;);        HashMap&lt;String,String&gt; map = new HashMap&lt;&gt;();        map.put(&quot;张三&quot;,&quot;三&quot;);        map.put(&quot;李四&quot;,&quot;四&quot;);        map.put(&quot;王五&quot;,&quot;五&quot;);        Iterator&lt;Map.Entry&lt;String,String&gt;&gt; iterator2 = map.entrySet().iterator();//返回所有的entry实体        System.out.println(&quot;------------遍历键值对&quot;);        while (iterator2.hasNext()) &#123;        \tMap.Entry&lt;String, String&gt; next1 = iterator2.next();        \tString key = next1.getKey();        \tString value = next1.getValue();        \tSystem.out.println(key+&quot; &quot;+value);        &#125;        System.out.println(&quot;------------遍历键&quot;);        Iterator  iterator3 = map.keySet().iterator();        while (iterator3.hasNext()) &#123;        \tSystem.out.println(iterator3.next());        &#125;        System.out.println(&quot;------------遍历值&quot;);        Iterator iterator4 = map.values().iterator();        while (iterator4.hasNext()) &#123;        \tSystem.out.println(iterator4.next());        &#125;    &#125;&#125;\n\n效果--------------List集合的遍历张三李四王五赵六-------------Map集合的遍历------------遍历键值对李四 四张三 三王五 五------------遍历键李四张三王五------------遍历值四三五Process finished with exit code 0\n\n优点\n简化了遍历方式\n可以提供多种遍历方式，比如提供正序遍历和倒序遍历，用户只需要得到我们实现好的迭代器，就可以方便的对集合进行遍历了。\n封装性良好，用户只需要得到迭代器就可以遍历，而对于遍历算法则不用去关心。\n\n缺点对于比较简单的遍历（像数组或者有序列表），使用迭代器方式遍历较为繁琐，大家可能都有感觉，像ArrayList，我们宁可愿意使用for循环和get方法来遍历集合。\n参考桥接模式（Bridge Pattern）-（最通俗易懂的案例） \n\n桥接模式通过使用封装、聚合及继承等行为让不同的类承担不同的职责。将抽象部分与它的实现部分分离，使它们都可以独立地变化。简单而言就是对于每一种特点，抽象成一个类\n角色\nClient 类：桥接模式的调用者\n抽象类(Abstraction) :维护了 Implementor &#x2F; 即它的实现类 ConcreteImplementorA…, 二者是聚合关系, Abstraction充当桥接类\nRefinedAbstraction : 是 Abstraction 抽象类的子类\nImplementor : 行为实现类的接口\nConcreteImplementorA &#x2F;B ：行为的具体实现类从 UML 图：这里的抽象类和接口是聚合的关系，是调用和被调用关系\n\nUML\n包结构\nshape抽象类package 桥接模式.shape;import 桥接模式.color.Color;public abstract class Shape &#123;    protected Color color;    protected String shape;    public abstract String getShape();    public abstract void setColor(Color color);    public abstract Color getColor();&#125;\n具体package 桥接模式.shape;import 桥接模式.color.Color;public class Circle extends Shape&#123;    public Circle()&#123;        super.shape=&quot;圆形&quot;;    &#125;    @Override    public String getShape() &#123;        return super.shape;    &#125;    @Override    public void setColor(Color color) &#123;        super.color = color;    &#125;    @Override    public Color getColor() &#123;        return super.color;    &#125;&#125;-----------------------------------------------------package 桥接模式.shape;import 桥接模式.color.Color;public class Rectangle extends Shape&#123;    public Rectangle()&#123;        super.shape=&quot;长方形&quot;;    &#125;    @Override    public String getShape() &#123;        return super.shape;    &#125;    @Override    public void setColor(Color color) &#123;        super.color=color;    &#125;    @Override    public Color getColor() &#123;        return super.color;    &#125;&#125;-----------------------------------------------------\n\ncolor接口package 桥接模式.color;public interface Color &#123;    String getColor();&#125;\n实现类package 桥接模式.color;public class Green implements Color&#123;    private String color = &quot;绿色&quot;;    @Override    public String getColor() &#123;        return this.color;    &#125;&#125;----------------------------------------------------------package 桥接模式.color;public class Red implements Color&#123;    private String color = &quot;红色&quot;;    @Override    public String getColor() &#123;        return this.color;    &#125;&#125;----------------------------------------------------------\n优点：\n实现抽象和实现的分离\n桥接模式提高了系统的可扩充性，在两个变化维度中任意扩展一个维度，都不需要修改原有系统\n桥接模式有时类似于多继承方案，但是多继承方案违背了类的单一职责原则（即一个类只有一个变化的原因），复用性比较差，而且多继承结构中类的个数非常庞大，桥接模式是比多继承方案更好的解决方法\n\n缺点：\n桥接模式的引入会增加系统的理解与设计难度，由于聚合关联关系建立在抽象层，要求开发者针对抽象进行设计与编程。\n桥接模式要求正确识别出系统中两个独立变化的维度，因此其使用范围具有一定的局限性。\n\n参考设计模式入门——中介者模式（mediator）23种设计模式（7）：中介者模式\n\n中介者模式类型：行为型这个中介者负责与对象之间联系，对象与对象之间不再进行直接的交互，也就是对对象关系进行解耦\n角色\n抽象中介者（mediator）：定义一个接口用于和对象通信（SmartDevice）\n具体中介者（concretemediator）：协调各同事对象实现协作，了解维护各个同事()\n抽象同事角色（colleague）：规定了同事的基本类型\n具体同事角色（concreteColleague）：每个同事都知道中介者对象，要与同事通信则把通信告诉中介者\n\nUML\n包结构\n同事类基类package 中介者模式.colleague;public abstract class AbstractColleague &#123;    protected String book;    public String getBook() &#123;        return book;    &#125;    public void setBook(String book) &#123;        this.book = book;    &#125;&#125;\n\n具体子类package 中介者模式.colleague;import 中介者模式.mediator.AbstractMediator;public class Wang extends AbstractColleague&#123;    public void giveBookToZhang(AbstractMediator mediator)&#123;        System.out.println(&quot;老王将书&quot;+book+&quot;给了中介者&quot;);        mediator.wangGiveZhang(super.book);    &#125;&#125;---------------------------------------------------------------package 中介者模式.colleague;import 中介者模式.mediator.AbstractMediator;public class Zhang extends AbstractColleague&#123;    public void giveBookToWang(AbstractMediator mediator)&#123;        System.out.println(&quot;老张将书&quot;+book+&quot;给了中介者&quot;);        mediator.zhangGiveWang(super.book);    &#125;&#125;\n中介者基类package 中介者模式.mediator;import 中介者模式.colleague.AbstractColleague;public abstract class AbstractMediator &#123;    protected AbstractColleague wang;    protected AbstractColleague zhang;    public AbstractMediator(AbstractColleague wang, AbstractColleague zhang) &#123;        this.wang = wang;        this.zhang = zhang;    &#125;    public abstract void wangGiveZhang(String book);    public abstract void zhangGiveWang(String book);&#125;\n具体子类package 中介者模式.mediator;import 中介者模式.colleague.AbstractColleague;public class Mediator extends AbstractMediator &#123;    public Mediator(AbstractColleague wang, AbstractColleague zhang) &#123;        super(wang, zhang);    &#125;    @Override    public void wangGiveZhang(String book) &#123;        System.out.println(&quot;中介者得到了老王给来的书&quot;+book+&quot;并交给了老张&quot;);        super.zhang.setBook(book);    &#125;    @Override    public void zhangGiveWang(String book) &#123;        System.out.println(&quot;中介者得到了老张给来的书&quot;+book+&quot;并交给了老王&quot;);        super.wang.setBook(book);    &#125;&#125;\n\n客户端package 中介者模式.client;import 中介者模式.colleague.AbstractColleague;import 中介者模式.colleague.Wang;import 中介者模式.colleague.Zhang;import 中介者模式.mediator.AbstractMediator;import 中介者模式.mediator.Mediator;public class Client &#123;    public static void main(String[] args) &#123;        Wang wang = new Wang();        Zhang zhang = new Zhang();        AbstractMediator mediator = new Mediator(wang,zhang);        System.out.println(&quot;--------先让老王获得书--------&quot;);        wang.setBook(&quot;《假如我有三天光明》&quot;);        System.out.println(&quot;---------再让老王把书给老张---------&quot;);        wang.giveBookToZhang(mediator);        System.out.println(&quot;-----------查看老张手上的书-----------&quot;);        System.out.println(zhang.getBook());    &#125;&#125;\n\n效果--------先让老王获得书-----------------再让老王把书给老张---------老王将书《假如我有三天光明》给了中介者中介者得到了老王给来的书《假如我有三天光明》并交给了老张-----------查看老张手上的书-----------《假如我有三天光明》Process finished with exit code 0\n\n模式优缺点中介者模式很容易在系统中应用，也很容易在系统中误用，当系统出现了‘多对多’交互复杂的对象群时，不要急于使用中介者模式，而要先反思你的系统在设计上是不是合理。\n优点：\nMediator的出现减少了各个Colleague的耦合，使得可以独立的改变和复用各个ColleagueMediator；\n由于把对象如何协作进行了抽象，将中介者作为一个独立的概念并将其封装在一个对象中，这样关注的对象就从对象各自本身的行为转移到了他们之间的交互上来，也就是站在一个更宏观的角度去看待系统\n\n缺点\n由于ConcreteMediator控制了集中化，于是就把交互复杂性变为了中介者的复杂性，这就使得中介者会变得比任何一个ConcreteColleague都复杂。\n\n参考23种设计模式（14）：解释器模式设计模式（二十）解释器模式\n\n解释器模式（据说用的非常少，我就没怎么研究了）类型：行为型给定一种语言，定义他的文法的一种表示，并定义一个解释器，该解释器使用该表示来解释语言中句子。\n角色\n抽象解释器（AbstractExpression）：具体的解释任务由各个实现类完成。\n终结符表达式（TerminalExpression）：实现与文法中的元素相关联的解释操作，通常一个解释器模式中只有一个终结表达式，但有多个实例，对应不同的终结符。\n非终结符表达式（NonterminalExpression）：文法中的每条规则对应于一个非终结表达式，非终结符表达式根据逻辑的复杂程度而增加，原则上每个文法规则都对应一个非终结符表达式\n上下文（Context）: 上下文环境类,包含解释器之外的全局信息\n客户类（Client）: 客户端,解析表达式,构建抽象语法树,执行具体的解释操作等.\n\nUML图\n代码class Context &#123;&#125;abstract class Expression &#123;\tpublic abstract Object interpreter(Context ctx);&#125;class TerminalExpression extends Expression &#123;\tpublic Object interpreter(Context ctx)&#123;\t\treturn null;\t&#125;&#125;class NonterminalExpression extends Expression &#123;\tpublic NonterminalExpression(Expression...expressions)&#123;\t\t\t&#125;\tpublic Object interpreter(Context ctx)&#123;\t\treturn null;\t&#125;&#125;public class Client &#123;\tpublic static void main(String[] args)&#123;\t\tString expression = &quot;&quot;;\t\tchar[] charArray = expression.toCharArray();\t\tContext ctx = new Context();\t\tStack&lt;Expression&gt; stack = new Stack&lt;Expression&gt;();\t\tfor(int i=0;i&lt;charArray.length;i++)&#123;\t\t\t//进行语法判断，递归调用\t\t&#125;\t\tExpression exp = stack.pop();\t\texp.interpreter(ctx);\t&#125;&#125;\n\n文法递归的代码部分需要根据具体的情况来实现，因此在代码中没有体现。抽象表达式是生成语法集合的关键，每个非终结符表达式解释一个最小的语法单元，然后通过递归的方式将这些语法单元组合成完整的文法，这就是解释器模式。\n优点\n扩展性强，若要新增乘，除，添加相应的非终结表达式，修改计算逻辑即可。\n\n缺点\n需要建大量的类，因为每一种语法都要建一个非终结符的类。\n解释的时候采用递归调用方法，导致有时候函数的深度会很深，影响效率。\n\n参考23种设计模式（9）：访问者模式\n\n访问者模式类型：行为类角色\n抽象访问者：抽象类或者接口，声明访问者可以访问哪些元素，具体到程序中就是visit方法中的参数定义哪些对象是可以被访问的。\n访问者：实现抽象访问者所声明的方法，它影响到访问者访问到一个类后该干什么，要做什么事情。\n抽象元素类：接口或者抽象类，声明接受哪一类访问者访问，程序上是通过accept方法中的参数来定义的。抽象元素一般有两类方法，一部分是本身的业务逻辑，另外就是允许接收哪类访问者来访问。\n元素类：实现抽象元素类所声明的accept方法，通常都是visitor.visit(this)，基本上已经形成一种定式了。\n结构对象：一个元素的容器，一般包含一个容纳多个不同类、不同接口的容器，如List、Set、Map等，在项目中一般很少抽象出这个角色。\n\nUML\n适用场景\n假如一个对象中存在着一些与本对象不相干（或者关系较弱）的操作，为了避免这些操作污染这个对象，则可以使用访问者模式来把这些操作封装到访问者中去。\n假如一组对象中，存在着相似的操作，为了避免出现大量重复的代码，也可以将这些重复的操作封装到访问者中去。\n\n包结构\n访问者接口package 访问者模式.visitor;import 访问者模式.element.ConcreteElement1;import 访问者模式.element.ConcreteElement2;public interface IVisitor &#123;    public void visit(ConcreteElement1 el1);    public void visit(ConcreteElement2 el2);&#125;\n\n实现类package 访问者模式.visitor;import 访问者模式.element.ConcreteElement1;import 访问者模式.element.ConcreteElement2;public class Visitor implements IVisitor &#123;    @Override    public void visit(ConcreteElement1 el1) &#123;        el1.doSomething();    &#125;    @Override    public void visit(ConcreteElement2 el2) &#123;        el2.doSomething();    &#125;&#125;\n元素基类package 访问者模式.element;import 访问者模式.visitor.IVisitor;public abstract class Element &#123;    public abstract void accept(IVisitor visitor);    public abstract void doSomething();&#125;\n\n具体类package 访问者模式.element;import 访问者模式.visitor.IVisitor;public class ConcreteElement1 extends Element &#123;    @Override    public void doSomething()&#123;        System.out.println(&quot;这是元素1&quot;);    &#125;    @Override    public void accept(IVisitor visitor) &#123;        visitor.visit(this);    &#125;&#125;--------------------------------------------------------------package 访问者模式.element;import 访问者模式.visitor.IVisitor;public class ConcreteElement2 extends Element &#123;    @Override    public void doSomething()&#123;        System.out.println(&quot;这是元素2&quot;);    &#125;    @Override    public void accept(IVisitor visitor) &#123;        visitor.visit(this);    &#125;&#125;\n\n结构对象package 访问者模式.objectStructure;import 访问者模式.element.ConcreteElement1;import 访问者模式.element.ConcreteElement2;import 访问者模式.element.Element;import java.util.ArrayList;import java.util.List;import java.util.Random;public class ObjectStructure &#123;    public static List&lt;Element&gt; getList()&#123;        List&lt;Element&gt; list = new ArrayList&lt;&gt;();        Random ran = new Random();        for(int i=0; i&lt;10; i++)&#123;            int a = ran.nextInt(100);            if(a&gt;50)&#123;                list.add(new ConcreteElement1());            &#125;else&#123;                list.add(new ConcreteElement2());            &#125;        &#125;        return list;    &#125;&#125;\n客户端package 访问者模式.client;import 访问者模式.objectStructure.ObjectStructure;import 访问者模式.visitor.Visitor;import 访问者模式.element.Element;import java.util.List;public class Client &#123;    public static void main(String[] args)&#123;        List&lt;Element&gt; list = ObjectStructure.getList();        for(Element e: list)&#123;            e.accept(new Visitor());        &#125;    &#125;&#125;\n效果这是元素2这是元素1这是元素1这是元素2这是元素2这是元素2这是元素1这是元素2这是元素1这是元素2Process finished with exit code 0\n\n\n\n优点\n符合单一职责原则：凡是适用访问者模式的场景中，元素类中需要封装在访问者中的操作必定是与元素类本身关系不大且是易变的操作，使用访问者模式一方面符合单一职责原则，另一方面，因为被封装的操作通常来说都是易变的，所以当发生变化时，就可以在不改变元素类本身的前提下，实现对变化部分的扩展。\n扩展性良好：元素类可以通过接受不同的访问者来实现对不同操作的扩展。\n\n缺点\n增加新的元素类比较困难，每增加一个元素类都需要修改访问者类（也包括访问者类的子类或者实现类），修改起来相当麻烦。也就是说，在元素类数量不确定的情况下，应该慎用访问者模式。\n\n参考博客设计模式之状态模式(State)\n\n状态模式类型：行为型一个拥有状态的context对象，在不同的状态下，其行为会发生改变。\n角色\n环境角色(Context)：客户程序需要的接口，并且维护一个具体状态的实例，这个实例决定当前状态。\n状态角色(State)：定义一个接口以封装与使用环境角色的一个特定状态的相关行为。\n具体状态角色(ConcreteState)：实现状态角色定义的接口，结构十分简单与策略模式相似。\n\nUML\n包结构\nstate基类package 状态模式.state;public interface State &#123;    void handle();&#125;\n子类都类似\npackage 状态模式.state;public class Sended  implements State &#123;    @Override    public void handle() &#123;        System.out.println(&quot;已发货！&quot;);    &#125;&#125;-------------------------------------------package 状态模式.state;public class Recieved  implements State &#123;    @Override    public void handle() &#123;        System.out.println(&quot;已确认收获！&quot;);    &#125;&#125;\n\ncontext（环境）package 状态模式.context;import 状态模式.state.State;public class Context &#123;    private State state;    public Context() &#123;&#125;    public Context(State state) &#123;        this.state = state;    &#125;    public void setState(State state) &#123;        System.out.println(&quot;订单信息已更新！&quot;);        this.state = state;        this.state.handle();    &#125;&#125;\nclientpackage 状态模式.client;import 状态模式.context.Context;import 状态模式.state.*;public class Client &#123;    public static  void  main(String [] args) &#123;        Context context = new Context();        context.setState(new Booked());        context.setState(new Payed());        context.setState(new Sended());        context.setState(new InWay());        context.setState(new Recieved());    &#125;&#125;\n\n优点\n应用状态模式使程序扩展起来变的简单\n避免了多重条件语句的应用\n程序结构会变得比较清晰\n\n缺点\n应用状态模式使类变的过多，而且简单的关系会变的理解困难\n没有很好的遵守开闭原则，引入新的新的状态会导致原有状态的修改\n没有很好的处理耦合关系，从例子中可以看出，应用状态模式不仅会使状态类和环境类进行关联而且状态类之间也有关系存在\n\n 参考博客 秒懂设计模式之享元模式（Flyweight Pattern） 深入理解享元模式\n\n享元模式类型：结构型享元模式通过共享技术实现相同或相似对象的重用，例子可参考常量池\n在享元模式中可以共享的相同内容称为 内部状态(Intrinsic State)，而那些需要外部环境来设置的不能共享的内容称为 外部状态(Extrinsic State)，其中外部状态和内部状态是相互独立的，外部状态的变化不会引起内部状态的变化。\n由于区分了内部状态和外部状态，因此可以通过设置不同的外部状态使得相同的对象可以具有一些不同的特征，而相同的内部状态是可以共享的。也就是说，享元模式的本质是分离与共享 ： 分离变与不变，并且共享不变。把一个对象的状态分成内部状态和外部状态，内部状态即是不变的，外部状态是变化的；然后通过共享不变的部分，达到减少对象数量并节约内存的目的。\n在享元模式中通常会出现工厂模式，需要创建一个享元工厂来负责维护一个享元池(Flyweight Pool)（用于存储具有相同内部状态的享元对象）。在享元模式中，共享的是享元对象的内部状态，外部状态需要通过环境来设置。在实际使用中，能够共享的内部状态是有限的，因此享元对象一般都设计为较小的对象，它所包含的内部状态较少，这种对象也称为细粒度对象。享元模式的目的就是使用共享技术来实现大量细粒度对象的复用。\n角色\nFlyweight： 享元接口，通过这个接口传入外部状态并作用于外部状态；\nConcreteFlyweight： 具体的享元实现对象，必须是可共享的，需要封装享元对象的内部状态；\nUnsharedConcreteFlyweight： 非共享的享元实现对象，并不是所有的享元对象都可以共享，非共享的享元对象通常是享元对象的组合对象；\nFlyweightFactory： 享元工厂，主要用来创建并管理共享的享元对象，并对外提供访问共享享元的接口；\n\nUML\n包结构享元类接口package 享元模式.flyWeight;public interface AbstractColor &#123;    void doOperation(int r,int c);&#125;\n实现类package 享元模式.flyWeight;public class Color implements AbstractColor&#123;    private String colorName;    @Override    public void doOperation(int r, int c) &#123;        System.out.println(&quot;将颜色：&quot;+this.colorName+&quot;画在(&quot;+r+&quot;,&quot;+c+&quot;)上&quot;);        System.out.println(&quot;该颜色的hashcode为&quot;+this.hashCode());    &#125;    public Color(String colorName)&#123;this.colorName=colorName;&#125;&#125;\n\n生产享元的工厂package 享元模式.flyWeightFactory;import 享元模式.flyWeight.AbstractColor;import 享元模式.flyWeight.Color;import java.util.HashMap;public class ColorPool &#123;    private HashMap&lt;String, AbstractColor&gt; hashMap = new HashMap&lt;&gt;();    public AbstractColor get(String colorName)&#123;        AbstractColor color = hashMap.get(colorName);        if(color==null)&#123;            color = new Color(colorName);            hashMap.put(colorName,color);        &#125;        return color;    &#125;&#125;\n\n客户端测试package 享元模式.client;import 享元模式.flyWeightFactory.ColorPool;public class Client &#123;    public static void main(String[] args) &#123;       ColorPool colorPool= new ColorPool();       colorPool.get(&quot;绿色&quot;).doOperation(1,2);       colorPool.get(&quot;绿色&quot;).doOperation(7,10);       colorPool.get(&quot;红色&quot;).doOperation(3,4);       colorPool.get(&quot;红色&quot;).doOperation(10,90);    &#125;&#125;\n\n效果可以发现虽然获得了四个享元，但实际上只有两种hashcode，即只有两个不同对象并且对于同一种对象，进行了不同的操作\n将颜色：绿色画在(1,2)上该颜色的hashcode为356573597将颜色：绿色画在(7,10)上该颜色的hashcode为356573597将颜色：红色画在(3,4)上该颜色的hashcode为1735600054将颜色：红色画在(10,90)上该颜色的hashcode为1735600054Process finished with exit code 0\n\n优点\n它可以极大减少内存中对象的数量，使得相同对象或相似对象在内存中只保存一份；\n享元模式的外部状态相对独立，而且不会影响其内部状态，从而使得享元对象可以在不同的环境中被共享。\n\n缺点\n享元模式使得系统更加复杂，需要分离出内部状态和外部状态，这使得程序的逻辑复杂化；\n为了使对象可以共享，享元模式需要将享元对象的状态外部化，而读取外部状态使得运行时间变长。\n\n参考博客代理模式的使用总结23 种设计模式详解（全23种）\n\n代理模式类型：结构型代理模式给某一个对象提供一个代理对象，并由代理对象控制对原对象的引用。通俗的来讲代理模式就是我们生活中常见的中介。\n为什么要用代理模式？\n中介隔离作用：在某些情况下，一个客户类不想或者不能直接引用一个委托对象，而代理类对象可以在客户类和委托对象之间起到中介的作用，其特征是代理类和委托类实现相同的接口。\n\n开闭原则，增加功能：代理类除了是客户类和委托类的中介之外，我们还可以通过给代理类增加额外的功能来扩展委托类的功能，这样做我们只需要修改代理类而不需要再修改委托类，符合代码设计的开闭原则。代理类主要负责为委托类预处理消息、过滤消息、把消息转发给委托类，以及事后对返回结果的处理等。通过类本身并不真正实现服务，而是通过调用委托类的相关方法，来提供特定的服务。真正的业务功能还是由委托类来实现，但是可以在业务功能执行的前后加入一些公共的服务。例如我们想给项目加入缓存、日志这些功能，我们就可以使用代理类来完成，而没必要打开已经封装好的委托类。\n\n\nUML\n代理模式分为三类：1. 静态代理 2. 动态代理 3. CGLIB代理静态代理由程序员创建或特定工具自动生成源代码，也就是在编译时就已经将接口、被代理类、代理类等确定下来。在程序运行之前，代理类的.class文件就已经生成。##\n包结构\n接口package 代理模式;public interface Person &#123;    void buyHouse();&#125;\n\n委托类（客户）package 代理模式;public class BuyHousePerson implements Person&#123;    @Override    public void buyHouse() &#123;        System.out.println(&quot;我要买一间.....的屋子，我的预算是....元&quot;);    &#125;&#125;\n代理类（中介）package 代理模式;public class BuyHouseProxy implements Person&#123;    private BuyHousePerson principal;    public BuyHouseProxy(BuyHousePerson principal)&#123;        System.out.println(&quot;我太忙了，于是找了这家中介&quot;);        this.principal=principal;    &#125;    @Override    public void buyHouse() &#123;        System.out.println(&quot;我是中介，我来替用户挑房子&quot;);        this.principal.buyHouse();    &#125;&#125;\n\n客户端测试package 代理模式;public class Client &#123;    public static void main(String[] args) &#123;        BuyHouseProxy buyHouseProxy = new BuyHouseProxy(new BuyHousePerson());        buyHouseProxy.buyHouse();    &#125;&#125;\n\n效果我太忙了，于是找了这家中介我是中介，我来替用户挑房子我要买一间.....的屋子，我的预算是....元Process finished with exit code 0\n\n优点：可以做到在符合开闭原则的情况下对目标对象进行功能扩展。\n缺点：代理对象与目标对象要实现相同的接口，我们得为每一个服务都得创建代理类，工作量太大，不易管理。同时接口一旦发生改变，代理类也得相应修改。 \n动态代理代理类在程序运行时创建的代理方式被成为动态代理。\n动态代理有以下特点:\n\n代理对象,不需要实现接口\n代理对象的生成,是利用JDK的API,动态的在内存中构建代理对象(需要我们指定创建代理对象&#x2F;目标对象实现的接口的类型)\n\n代理类不用再实现接口了。但是，要求被代理对象必须有接口。\n动态代理实现：Java.lang.reflect.Proxy类可以直接生成一个代理对象\n//生成一个代理对象Proxy.newProxyInstance(ClassLoader loader, Class&lt;?&gt;[] interfaces, InvocationHandler h)\n\n\n参数1:ClassLoader loader 代理对象的类加载器 一般使用被代理对象的类加载器\n\n参数2:Class&lt;?&gt;[] interfaces 代理对象的要实现的接口 一般使用的被代理对象实现的接口\n\n参数3:InvocationHandler h (接口)执行处理类\n\n\n//调用代理类的任何方法，此方法都会执行InvocationHandler中的  invoke(Object proxy, Method method, Object[] args)\n\n\n参数3.1:代理对象(慎用)\n\n参数3.2:当前执行的方法\n\n参数3.3:当前执行的方法运行时传递过来的参数\n\n\n第一步：编写动态处理器public class DynamicProxyHandler implements InvocationHandler &#123;       private Object object;       public DynamicProxyHandler(final Object object) &#123;              this.object = object;       &#125;       @Override       public Object invoke(Object proxy, Method method, Object[] args) throws Throwable &#123;              System.out.println(&quot;买房前准备&quot;);              Object result = method.invoke(object, args);              System.out.println(&quot;买房后装修&quot;);              return result;       &#125;&#125;\n\n第二步：编写测试类public class DynamicProxyTest &#123;    public static void main(String[] args) &#123;        BuyHouse buyHouse = new BuyHouseImpl();        BuyHouse proxyBuyHouse = (BuyHouse) Proxy.newProxyInstance(BuyHouse.class.getClassLoader(), new                Class[]&#123;BuyHouse.class&#125;, new DynamicProxyHandler(buyHouse));        proxyBuyHouse.buyHosue();    &#125;&#125;\n\n动态代理总结：虽然相对于静态代理，动态代理大大减少了我们的开发任务，同时减少了对业务接口的依赖，降低了耦合度。但是还是有一点点小小的遗憾之处，那就是它始终无法摆脱仅支持interface代理的桎梏（我们要使用被代理的对象的接口），因为它的设计注定了这个遗憾。\nCGLIB代理待续创建型：对于对象的实例化进行解耦单例有且只能有一个实例，且全局可访问。注意懒汉(提前实例化但是浪费内存)和饿汉(延后实例化但是要处理线程安全问题)的区别。\n三个工厂(只有后两个属于GOF23种设计模式)简单工厂\n实现：定义一个产品接口和诸多实现了该接口的具体产品类定义一个工厂类，内含一个生产产品的方法，通过传入的参数来判断实例化哪种产品并返回。\n即只有一个工厂，内置多个生产方法(或者多个if else)\n\n\n使用案例：想获得加法操作对象，就向工厂类的生产产品方法传入字符+，返回new AddOperation()\n\n工厂方法\n实现  也定义一个产品接口和诸多实现了该接口的具体产品类  注意这里，定义的是工厂接口和诸多实现了该接口的具体工厂类，每个具体工厂类都有对应的生产产品的方法\n即有多个工厂，每个工厂都生产对应的产品\n\n\n使用案例想获得加法操作对象，就调用AddFactory的getOperation方法，返回new AddOperation()\n\n抽象工厂\n实现相较于工厂方法，为了减少工厂的数量，让每个工厂都可以生产多种产品。如小米工厂生产小米手机和小米电脑、华为工厂生产华为手机和华为电脑。\n使用案例新建小米工厂，调用mi.getPhone获得小米手机,调用mi.getComputer获得小米电脑。华为同理。\n\n建造者\n实现有零件类、工人类、机器类其实就是工人类封装了组装零件的细节，直接返回了机器对象\n对比  - 与工厂模式：工厂模式注重于对新建对象方式的解耦，其新建对象是一步完成的。而建造者模式是需要组装多个部件才能新建完成一个对象的，注重于这个组装的过程及组装顺序。\n\n原型\n实现其实就是使用了对象的拷贝取代了new，因为二者在效率上是有差异的。\n\n结构型：适配器\n实现参考变压器、编译器等。变压器类继承220V电压类、实现变压器接口。5V变压器重写变压方法为转换为5V，10V变压器重写为转换为10V。\n\n桥接感觉图片会好理解一点原本的继承关系，不同维度的属性通过层层继承实现独立各维度的属性后如下\n组合\n实现定义叶节点类和非叶节点类，他们都继承节点抽象类，将数据以树形方式构建起来\n\n装饰者\n实现其实就是把被装饰的东西注入到有装饰方法的对象里，层层包装\n使用案例  奶茶 milkTea = new 奶茶()糖添加者 sugar = new 糖添加者(milkTea)芋圆添加者 yuYuan = new 芋圆添加者(sugar)布丁添加者 buDing = new 布丁添加者(yuYuan)sout(buDing)//加了糖、芋圆、布丁的奶茶\n\n外观\n实现封装内部复杂细节(关乎到多个类、多个系统的”复杂”，而不只是过程的复杂)，对外提供简单接口\n\n享元\n实现享元即共享的元素，参考Java的常量池，将常用的对象用池子保存并管理，多次调用只会获得同一个对象。\n\n代理\n实现联想买房的场景，将买房者对象注入中介对象的属性中，让中介提出买房者的要求，接收卖房者的反馈，起到保护买房者的作用。\n\n行为型访问者TODO没想明白，先放篇感觉可以的、别人的博客 设计模式之访问者模式\n模板\n实现思想上就是面向对象的继承，使用抽象类和子类继承实现就行\n\n策略\n实现其实就是将switch-case的各个case用多种策略类表示，这些策略类继承于一个策略基类，以方便修改，即替换对象而不是更改方法细节。\n\n状态\n实现如果类有状态属性的话，就可以让多种状态以多种状态类表示，对象变换状态就是注入新状态。\n\n观察者\n实现以师生为例，老师为被观察者，学生为观察者。老师有一个存储学生的集合，老师和学生都有一个进行操作的方法。老师进行操作时，还会调用集合内学生的操作方法。这样子看起来就是”老师一动，学生就动了”。\n\n备忘录\n实现在正常业务的基础上，定义记录类和记录者类，业务对象新增读取记录方法。在客户端，对于业务对象的每次操作，记录者类根据当前状态创建记录并进行存储和管理，业务对象想读取历史记录时，调用自己的读取记录方法，传入记录者类返回的记录对象即可。\n\n中介者\n实现参考消息队列。\n\n迭代器\n实现参考Java、C++的迭代器，即各集合提供统一接口、封装复杂细节\n\n命令\n实现有命令发送者、命令接收者、命令三个类命令对象保存了接收者对象，并有一个成员方法(例如excute)是调用了接收者处理该命令的方法发送者只负责调用excute这样子就保证了发送者和接收者的解耦，因为发送者无需知道接收者是谁，接收者是在新建命令对象时存储在命令中的，并且是由命令主动去让接收者使用自己的\n\n责任链\n实现联想到过滤器这东西，一层一层更密的筛子对混合物进行过滤。在代码实现上，每层过滤器都是一个类，且他们都保存了下一层过滤器的引用，以方便在自己这里过滤不了时将混合物送往下一层过滤器进行过滤。而混合物只需调用一次过滤操作就行，过滤的过程由过滤器们联动实现。\n\n解释器(用得少、难理解、遂不概括)收集了一下设计模式常见优缺点(自行对号入座吧)优点\n提高可复用性\n提高可维护性\n降低耦合度\n降低代码复杂性\n提高可读性\n提高可扩展性\n增强健壮性\n\n缺点\n类的数量增多，增加复杂性\n系统更抽象，理解难度增加\n修改成本增大\n扩展困难\n容易引入风险\n请求处理速度变慢\n客户端必须知晓细节并自行决策\n增加了资源占用，如内存等\n\n","categories":["软件工程","笔记"]},{"title":"遗传算法求解01背包问题记录","url":"/2023/06/24/%E9%81%97%E4%BC%A0%E7%AE%97%E6%B3%95%E6%B1%82%E8%A7%A301%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/","content":"感觉就是在大方向正确(优胜劣汰)的情况下进行随机的变化，试图找到最优解\n  graph TD;\n     START(输入数据)-->B[编码];\n     B[编码]-->C[种群old];\n     C-->D[计算各个体适应值];\n     D-->E[随机选择两个个体进行交叉运算];\n     E-->F[随机选择个体进行变异];\n     F-->G[生成种群new];\n     G-->H[使用new更新old];\n     H-->I{满足要求或到达迭代次数}\n     I-->|Y|J[解码种群old];\n     I-->|N|C[种群old];\n     J-->END(目标解);\n\nfrom functools import reduceimport matplotlib.pyplot as pltimport numpy as np# 根据种群大小，基因长度初始化所有的随机的染色体序列# 后面基于这个初始化序列再不断迭代def init(pop_size,leng):    population = []    for i in range(pop_size):        pop = &#x27;&#x27;        # 对每个位置取个初始随机01值        for j in range(leng):            pop = pop + str(np.random.randint(0,2))        population.append(pop)    return population# 计算种群中每个个体的背包情况，返回所有个体的情况def compute_fitness(population,weight,profit):    weight_list = []    profit_list = []    # 每一个个体是一个选物体策略    for pop in population:        tmp_w = 0        tmp_p = 0        # 遍历每个下标，看是否选了这个物体        for idx in range(len(pop)):            if pop[idx] == &#x27;1&#x27;:                tmp_w += weight[idx]                tmp_p += profit[idx]        weight_list.append(tmp_w)        profit_list.append(tmp_p)    return weight_list,profit_list# 筛选选取重量小于背包重量的def select(weight_limit,population,weight,profit):    pop,w,p = [],[],[]    for idx in range(len(weight)):        if weight[idx] &lt;= weight_limit:            # print(weight[idx],weight_limit)            w.append(weight[idx])            p.append(profit[idx])            pop.append(population[idx])    return pop,w,p# 轮盘赌def roulette(pop_size,population,total_profit):    # 计算总和    sum_profit = reduce(lambda i,j:i+j,total_profit)    # 概率即占比    p = list(map(lambda i:i/sum_profit,total_profit))    new_population = []    # 一直填充直至长度相等    while len(new_population) &lt; pop_size:        # 选一个        tmp = np.random.choice(a=population,size=1,replace=True,p=p)        # 因为tmp是ndarray，这里转换一下        tmp = tmp.tolist()[0]        new_population.append(tmp)    return new_population# 随机交配，返回交叉后的子代def ga_cross(new_population,pcross):    children = []    # 每条染色体的长度    leng = len(new_population[0])    # 必须产生这么多个    while len(children) &lt; len(new_population):        # 发生了交配        if np.random.uniform() &lt; pcross:            # 随机选出一对父母            mo_idx = np.random.randint(0,leng)            fa_idx = np.random.randint(0,leng)            mo = new_population[mo_idx]            fa = new_population[fa_idx]            if fa_idx != mo_idx:                # 分割，交叉                seg_idx = np.random.randint(0,leng)                mo_left = mo[0:seg_idx]                mo_right = mo[seg_idx:leng]                fa_left = fa[0:seg_idx]                fa_right = fa[seg_idx:leng]                child1 = mo_left + fa_right                child2 = fa_left + mo_right                children.append(child1)                children.append(child2)    return children# 变异def mutation(population,pmutation):    new_pop = []    # 每条染色体长度    leng = len(population[0])    for pop in population:        if np.random.uniform() &lt; pmutation:            # 随机一个变异位置            idx = np.random.randint(0,leng)            # 对指定下标取模            pop = list(pop)            if pop[idx] == &#x27;0&#x27;:                pop[idx] = &#x27;1&#x27;            else:                pop[idx] = &#x27;0&#x27;            pop = &#x27;&#x27;.join(pop)        new_pop.append(pop)    return new_popif __name__ == &#x27;__main__&#x27;:    pm = 0.2 # 变异概率    pc = 0.8 # 交叉概率    iters = 600 # 迭代次数    pop_size = 50 # 种群大小    n = 14 # 14个物体    # 重量    weight=[5,7,9,8,4,3,10,14,13,9,6,8,5,15]    # 价值    profit=[10,8,15,9,6,5,20,10,13,10,7,12,5,18]    # 背包大小    weight_limit = 75    # 初始化种群(pop_size个背包策略)    population = init(pop_size,n)    cur_iter = 0    ans_pop,ans_w,ans_p = [],[],[]    while cur_iter &lt; iters:        # print(f&#x27;第&#123;cur_iter+1&#125;代&#x27;)        # print(&quot;初始为&quot;,population)        #  计算适应度        w,p = compute_fitness(population,weight,profit)        # print(&#x27;weight:&#x27;,w,&#x27;profit:&#x27;,p)        # 筛选选取物品总重量小于背包大小的情况        s_pop,s_w,s_p = select(weight_limit,population,w,p)        # print(f&#x27;筛选后的种群&#123;s_pop&#125;,筛选后的veight&#123;s_w&#125;,筛选后的profit&#123;s_p&#125;&#x27;)        # 随机抽pop_size个人        new_pop =  roulette(pop_size,s_pop,s_p)        # print(f&#x27;选择后的：&#123;new_pop&#125;&#x27;)        new_pop1 = ga_cross(new_pop,pc)        # print(f&#x27;交叉后的：&#123;new_pop1&#125;&#x27;)        population = mutation(new_pop1,pm)        # print(f&#x27;变异后的&#123;population&#125;&#x27;)        cur_iter += 1        # print(&quot;-&quot;*10)        # 记录此时种群里的最优解        # 注意要重新计算一次，因为更新了populatison        w,p = compute_fitness(population,weight,profit)        s_pop,s_w,s_p = select(weight_limit,population,w,p)        idx = s_pop.index(max(s_pop))        if len(ans_p)==0 or s_p[idx] &gt; ans_p[-1]:            ans_pop.append(s_pop[idx])            ans_p.append(s_p[idx])            ans_w.append(s_w[idx])    # 校验一下    idx = population.index(max(population))    print(&quot;w_limit:&quot;,weight_limit)    print(&quot;w的变化&quot;,ans_w)    print(&quot;p的变化&quot;,ans_p)    # 图表展示    # 解决legend的汉字问题    plt.rcParams[&#x27;font.sans-serif&#x27;]=[&#x27;simsun&#x27;]    plt.rcParams[&#x27;axes.unicode_minus&#x27;] = False    # 放数据    plt.plot(range(len(ans_p)),ans_p,label=&#x27;装入物品总价值&#x27;, color=&#x27;red&#x27;)    # 点上放数据    for idx,(w,p) in enumerate(zip(ans_w, ans_p)):        plt.text(idx, p, f&#x27;(w:&#123;w&#125;,p:&#123;p&#125;)&#x27;)    plt.legend()    plt.show()","categories":["启发式算法"]}]